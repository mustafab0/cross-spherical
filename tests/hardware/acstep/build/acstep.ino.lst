
/home/agentv/cross-spherical/tests/hardware/acstep/build/acstep.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001400 <memory_copy>:
	if (dest == src) return;
	do {
		*dest++ = *src++;
	} while (dest < dest_end);
#else
	asm volatile(
60001400:	4281      	cmp	r1, r0
60001402:	d005      	beq.n	60001410 <memory_copy+0x10>
60001404:	f851 3b04 	ldr.w	r3, [r1], #4
60001408:	f840 3b04 	str.w	r3, [r0], #4
6000140c:	4282      	cmp	r2, r0
6000140e:	d8f9      	bhi.n	60001404 <memory_copy+0x4>
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	"2:					\n"
	: [dest] "+r" (dest), [src] "+r" (src) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001410:	4770      	bx	lr
60001412:	bf00      	nop

60001414 <memory_clear.constprop.0>:
#if 0
	while (dest < dest_end) {
		*dest++ = 0;
	}
#else
	asm volatile(
60001414:	4a04      	ldr	r2, [pc, #16]	; (60001428 <memory_clear.constprop.0+0x14>)
60001416:	4905      	ldr	r1, [pc, #20]	; (6000142c <memory_clear.constprop.0+0x18>)
60001418:	f04f 0300 	mov.w	r3, #0
6000141c:	f842 3b04 	str.w	r3, [r2], #4
60001420:	4291      	cmp	r1, r2
60001422:	d8fb      	bhi.n	6000141c <memory_clear.constprop.0+0x8>
	"1:	str.w	r3, [%[dest]], #4	\n"
	"	cmp	%[end], %[dest]		\n"
	"	bhi.n	1b			\n"
	: [dest] "+r" (dest) : [end] "r" (dest_end) : "r3", "memory");
#endif
}
60001424:	4770      	bx	lr
60001426:	bf00      	nop
60001428:	20000ec0 	.word	0x20000ec0
6000142c:	20001640 	.word	0x20001640

60001430 <ResetHandler2>:
{
60001430:	e92d 4888 	stmdb	sp!, {r3, r7, fp, lr}
	__asm__ volatile("dsb":::"memory");
60001434:	f3bf 8f4f 	dsb	sy
	asm volatile("nop");
60001438:	bf00      	nop
	asm volatile("nop");
6000143a:	bf00      	nop
	asm volatile("nop");
6000143c:	bf00      	nop
	asm volatile("nop");
6000143e:	bf00      	nop
	startup_early_hook(); // must be in FLASHMEM, as ITCM is not yet initialized!
60001440:	f000 f916 	bl	60001670 <startup_default_early_hook>
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001444:	4b67      	ldr	r3, [pc, #412]	; (600015e4 <ResetHandler2+0x1b4>)
60001446:	2208      	movs	r2, #8
60001448:	f8c3 2154 	str.w	r2, [r3, #340]	; 0x154
	asm volatile("nop");
6000144c:	bf00      	nop
	asm volatile("nop");
6000144e:	bf00      	nop
	asm volatile("nop");
60001450:	bf00      	nop
	asm volatile("nop");
60001452:	bf00      	nop
	asm volatile("nop");
60001454:	bf00      	nop
	asm volatile("nop");
60001456:	bf00      	nop
	asm volatile("nop");
60001458:	bf00      	nop
	asm volatile("nop");
6000145a:	bf00      	nop
	asm volatile("nop");
6000145c:	bf00      	nop
	asm volatile("nop");
6000145e:	bf00      	nop
	asm volatile("nop");
60001460:	bf00      	nop
	asm volatile("nop");
60001462:	bf00      	nop
	asm volatile("nop");
60001464:	bf00      	nop
	asm volatile("nop");
60001466:	bf00      	nop
	asm volatile("nop");
60001468:	bf00      	nop
	asm volatile("nop");
6000146a:	bf00      	nop
	memory_copy(&_stext, &_stextload, &_etext);
6000146c:	4a5e      	ldr	r2, [pc, #376]	; (600015e8 <ResetHandler2+0x1b8>)
6000146e:	495f      	ldr	r1, [pc, #380]	; (600015ec <ResetHandler2+0x1bc>)
60001470:	485f      	ldr	r0, [pc, #380]	; (600015f0 <ResetHandler2+0x1c0>)
60001472:	f7ff ffc5 	bl	60001400 <memory_copy>
	memory_copy(&_sdata, &_sdataload, &_edata);
60001476:	4a5f      	ldr	r2, [pc, #380]	; (600015f4 <ResetHandler2+0x1c4>)
60001478:	495f      	ldr	r1, [pc, #380]	; (600015f8 <ResetHandler2+0x1c8>)
6000147a:	4860      	ldr	r0, [pc, #384]	; (600015fc <ResetHandler2+0x1cc>)
6000147c:	f7ff ffc0 	bl	60001400 <memory_copy>
	memory_clear(&_sbss, &_ebss);
60001480:	4c5f      	ldr	r4, [pc, #380]	; (60001600 <ResetHandler2+0x1d0>)
60001482:	f7ff ffc7 	bl	60001414 <memory_clear.constprop.0>
	SCB_CPACR = 0x00F00000;
60001486:	f44f 0070 	mov.w	r0, #15728640	; 0xf00000
6000148a:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
6000148e:	2300      	movs	r3, #0
60001490:	4a5c      	ldr	r2, [pc, #368]	; (60001604 <ResetHandler2+0x1d4>)
	SCB_CPACR = 0x00F00000;
60001492:	f8c1 0d88 	str.w	r0, [r1, #3464]	; 0xd88
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
60001496:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
6000149a:	3301      	adds	r3, #1
6000149c:	2bb0      	cmp	r3, #176	; 0xb0
6000149e:	d1fa      	bne.n	60001496 <ResetHandler2+0x66>
600014a0:	4b59      	ldr	r3, [pc, #356]	; (60001608 <ResetHandler2+0x1d8>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600014a2:	2180      	movs	r1, #128	; 0x80
600014a4:	4a59      	ldr	r2, [pc, #356]	; (6000160c <ResetHandler2+0x1dc>)
600014a6:	f803 1b01 	strb.w	r1, [r3], #1
600014aa:	4293      	cmp	r3, r2
600014ac:	d1fb      	bne.n	600014a6 <ResetHandler2+0x76>
	SCB_VTOR = (uint32_t)_VectorsRam;
600014ae:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014b2:	4e4c      	ldr	r6, [pc, #304]	; (600015e4 <ResetHandler2+0x1b4>)
600014b4:	f04f 3980 	mov.w	r9, #2155905152	; 0x80808080
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 6000163c <ResetHandler2+0x20c>
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014bc:	f8df a180 	ldr.w	sl, [pc, #384]	; 60001640 <ResetHandler2+0x210>
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
	SCB_VTOR = (uint32_t)_VectorsRam;
600014c4:	f8c5 4d08 	str.w	r4, [r5, #3336]	; 0xd08
	SYST_CVR = 0;
600014c8:	2700      	movs	r7, #0
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600014ca:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600014ce:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
600014d2:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
600014d6:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014da:	f8d5 3d24 	ldr.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014de:	f8df 8164 	ldr.w	r8, [pc, #356]	; 60001644 <ResetHandler2+0x214>
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e2:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600014e6:	4a4a      	ldr	r2, [pc, #296]	; (60001610 <ResetHandler2+0x1e0>)
	SCB_SHCSR |= SCB_SHCSR_MEMFAULTENA | SCB_SHCSR_BUSFAULTENA | SCB_SHCSR_USGFAULTENA;
600014e8:	f8c5 3d24 	str.w	r3, [r5, #3364]	; 0xd24
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600014ec:	f8d8 301c 	ldr.w	r3, [r8, #28]
600014f0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
600014f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
600014f8:	f8c8 301c 	str.w	r3, [r8, #28]
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
600014fc:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
60001500:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001508:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000150c:	6691      	str	r1, [r2, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
6000150e:	66d1      	str	r1, [r2, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001510:	6711      	str	r1, [r2, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001512:	6751      	str	r1, [r2, #116]	; 0x74
	configure_cache();
60001514:	f000 f8b4 	bl	60001680 <configure_cache>
	_VectorsRam[14] = pendablesrvreq_isr;
60001518:	4b3e      	ldr	r3, [pc, #248]	; (60001614 <ResetHandler2+0x1e4>)
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000151a:	493f      	ldr	r1, [pc, #252]	; (60001618 <ResetHandler2+0x1e8>)
	_VectorsRam[14] = pendablesrvreq_isr;
6000151c:	63a3      	str	r3, [r4, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
6000151e:	4b3f      	ldr	r3, [pc, #252]	; (6000161c <ResetHandler2+0x1ec>)
60001520:	63e3      	str	r3, [r4, #60]	; 0x3c
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001522:	2363      	movs	r3, #99	; 0x63
60001524:	616b      	str	r3, [r5, #20]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001526:	2303      	movs	r3, #3
	SYST_CVR = 0;
60001528:	61af      	str	r7, [r5, #24]
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
6000152a:	612b      	str	r3, [r5, #16]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000152c:	4b3c      	ldr	r3, [pc, #240]	; (60001620 <ResetHandler2+0x1f0>)
6000152e:	f8c5 3d20 	str.w	r3, [r5, #3360]	; 0xd20
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001532:	f8d5 3dfc 	ldr.w	r3, [r5, #3580]	; 0xdfc
60001536:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
6000153a:	f8c5 3dfc 	str.w	r3, [r5, #3580]	; 0xdfc
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000153e:	4b39      	ldr	r3, [pc, #228]	; (60001624 <ResetHandler2+0x1f4>)
60001540:	681a      	ldr	r2, [r3, #0]
60001542:	f042 0201 	orr.w	r2, r2, #1
60001546:	601a      	str	r2, [r3, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001548:	685b      	ldr	r3, [r3, #4]
6000154a:	600b      	str	r3, [r1, #0]
	usb_pll_start();	
6000154c:	f000 f920 	bl	60001790 <usb_pll_start>
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001550:	f8c6 9104 	str.w	r9, [r6, #260]	; 0x104
	set_arm_clock(F_CPU);
60001554:	4834      	ldr	r0, [pc, #208]	; (60001628 <ResetHandler2+0x1f8>)
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001556:	f8c6 b100 	str.w	fp, [r6, #256]	; 0x100
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000155a:	f8c6 90f4 	str.w	r9, [r6, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000155e:	f8c6 a0f0 	str.w	sl, [r6, #240]	; 0xf0
	set_arm_clock(F_CPU);
60001562:	f000 fab9 	bl	60001ad8 <__set_arm_clock_veneer>
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001566:	f8d8 106c 	ldr.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
6000156a:	4b30      	ldr	r3, [pc, #192]	; (6000162c <ResetHandler2+0x1fc>)
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000156c:	4a30      	ldr	r2, [pc, #192]	; (60001630 <ResetHandler2+0x200>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000156e:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
60001572:	f8c8 106c 	str.w	r1, [r8, #108]	; 0x6c
	PIT_MCR = 0;
60001576:	601f      	str	r7, [r3, #0]
	PIT_TCTRL0 = 0;
60001578:	f8c3 7108 	str.w	r7, [r3, #264]	; 0x108
	PIT_TCTRL1 = 0;
6000157c:	f8c3 7118 	str.w	r7, [r3, #280]	; 0x118
	PIT_TCTRL2 = 0;
60001580:	f8c3 7128 	str.w	r7, [r3, #296]	; 0x128
	PIT_TCTRL3 = 0;
60001584:	f8c3 7138 	str.w	r7, [r3, #312]	; 0x138
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
60001588:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000158a:	07db      	lsls	r3, r3, #31
6000158c:	d408      	bmi.n	600015a0 <ResetHandler2+0x170>
		SNVS_LPSRTCMR = 1546300800u >> 17;
6000158e:	f642 6315 	movw	r3, #11797	; 0x2e15
		SNVS_LPSRTCLR = 1546300800u << 15;
60001592:	4928      	ldr	r1, [pc, #160]	; (60001634 <ResetHandler2+0x204>)
60001594:	6551      	str	r1, [r2, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
60001596:	6513      	str	r3, [r2, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
60001598:	6b93      	ldr	r3, [r2, #56]	; 0x38
6000159a:	f043 0301 	orr.w	r3, r3, #1
6000159e:	6393      	str	r3, [r2, #56]	; 0x38
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600015a0:	4a23      	ldr	r2, [pc, #140]	; (60001630 <ResetHandler2+0x200>)
600015a2:	4c25      	ldr	r4, [pc, #148]	; (60001638 <ResetHandler2+0x208>)
600015a4:	6893      	ldr	r3, [r2, #8]
600015a6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600015aa:	6093      	str	r3, [r2, #8]
	analog_init();
600015ac:	f000 fa54 	bl	60001a58 <analog_init>
	pwm_init();
600015b0:	f000 fa86 	bl	60001ac0 <__pwm_init_veneer>
	tempmon_init();
600015b4:	f000 f91a 	bl	600017ec <tempmon_init>
	startup_middle_hook();
600015b8:	f000 f85c 	bl	60001674 <startup_default_middle_hook>
// Returns the number of milliseconds since your program started running.
// This 32 bit number will roll back to zero after about 49.7 days.  For a
// simpler way to build delays or timeouts, consider using elapsedMillis.
static inline uint32_t millis(void)
{
	return systick_millis_count;
600015bc:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015be:	2b13      	cmp	r3, #19
600015c0:	d9fc      	bls.n	600015bc <ResetHandler2+0x18c>
	usb_init();
600015c2:	f000 f9ab 	bl	6000191c <usb_init>
600015c6:	6823      	ldr	r3, [r4, #0]
	while (millis() < TEENSY_INIT_USB_DELAY_AFTER + TEENSY_INIT_USB_DELAY_BEFORE) ; // wait
600015c8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600015cc:	d3fb      	bcc.n	600015c6 <ResetHandler2+0x196>
	startup_debug_reset();
600015ce:	f000 f855 	bl	6000167c <startup_debug_reset>
	startup_late_hook();
600015d2:	f000 f851 	bl	60001678 <startup_default_late_hook>
	__libc_init_array();
600015d6:	f000 fa87 	bl	60001ae8 <____libc_init_array_veneer>
	main();
600015da:	f000 fa79 	bl	60001ad0 <__main_veneer>
	while (1) asm("WFI");
600015de:	bf30      	wfi
600015e0:	e7fd      	b.n	600015de <ResetHandler2+0x1ae>
600015e2:	bf00      	nop
600015e4:	400d8000 	.word	0x400d8000
600015e8:	00002ce8 	.word	0x00002ce8
600015ec:	60001c00 	.word	0x60001c00
600015f0:	00000000 	.word	0x00000000
600015f4:	20000ec0 	.word	0x20000ec0
600015f8:	600048ec 	.word	0x600048ec
600015fc:	20000000 	.word	0x20000000
60001600:	20000c00 	.word	0x20000c00
60001604:	00000fbd 	.word	0x00000fbd
60001608:	e000e400 	.word	0xe000e400
6000160c:	e000e4a0 	.word	0xe000e4a0
60001610:	400ac000 	.word	0x400ac000
60001614:	00001f05 	.word	0x00001f05
60001618:	200015d0 	.word	0x200015d0
6000161c:	00001f09 	.word	0x00001f09
60001620:	20200000 	.word	0x20200000
60001624:	e0001000 	.word	0xe0001000
60001628:	23c34600 	.word	0x23c34600
6000162c:	40084000 	.word	0x40084000
60001630:	400d4000 	.word	0x400d4000
60001634:	56c00000 	.word	0x56c00000
60001638:	200015d4 	.word	0x200015d4
6000163c:	2018101b 	.word	0x2018101b
60001640:	13110d0c 	.word	0x13110d0c
60001644:	400fc000 	.word	0x400fc000

60001648 <ResetHandler>:
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001648:	4b05      	ldr	r3, [pc, #20]	; (60001660 <ResetHandler+0x18>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
6000164a:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000164e:	4a05      	ldr	r2, [pc, #20]	; (60001664 <ResetHandler+0x1c>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001650:	4805      	ldr	r0, [pc, #20]	; (60001668 <ResetHandler+0x20>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001652:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001654:	6418      	str	r0, [r3, #64]	; 0x40
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
60001656:	4a05      	ldr	r2, [pc, #20]	; (6000166c <ResetHandler+0x24>)
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001658:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : "memory");
6000165a:	4695      	mov	sp, r2
	ResetHandler2();
6000165c:	f7ff fee8 	bl	60001430 <ResetHandler2>
60001660:	400ac000 	.word	0x400ac000
60001664:	aaaaaaab 	.word	0xaaaaaaab
60001668:	00200007 	.word	0x00200007
6000166c:	20078000 	.word	0x20078000

60001670 <startup_default_early_hook>:
FLASHMEM void startup_default_early_hook(void) {}
60001670:	4770      	bx	lr
60001672:	bf00      	nop

60001674 <startup_default_middle_hook>:
60001674:	4770      	bx	lr
60001676:	bf00      	nop

60001678 <startup_default_late_hook>:
60001678:	4770      	bx	lr
6000167a:	bf00      	nop

6000167c <startup_debug_reset>:
FLASHMEM void startup_debug_reset(void) { __asm__ volatile("nop"); }
6000167c:	bf00      	nop
6000167e:	4770      	bx	lr

60001680 <configure_cache>:
{
60001680:	b410      	push	{r4}
	SCB_MPU_CTRL = 0; // turn off MPU
60001682:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
60001686:	2100      	movs	r1, #0
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001688:	2410      	movs	r4, #16
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
6000168a:	4831      	ldr	r0, [pc, #196]	; (60001750 <configure_cache+0xd0>)
	SCB_MPU_CTRL = 0; // turn off MPU
6000168c:	f8c3 1d94 	str.w	r1, [r3, #3476]	; 0xd94
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
60001690:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
60001694:	2411      	movs	r4, #17
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
60001696:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
6000169a:	482e      	ldr	r0, [pc, #184]	; (60001754 <configure_cache+0xd4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
6000169c:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a0:	2412      	movs	r4, #18
	SCB_MPU_RASR = MEM_NOCACHE | READONLY | SIZE_512K;
600016a2:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016a6:	482c      	ldr	r0, [pc, #176]	; (60001758 <configure_cache+0xd8>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600016a8:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016ac:	4a2b      	ldr	r2, [pc, #172]	; (6000175c <configure_cache+0xdc>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600016ae:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016b2:	4c2b      	ldr	r4, [pc, #172]	; (60001760 <configure_cache+0xe0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016b4:	f042 0215 	orr.w	r2, r2, #21
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016b8:	482a      	ldr	r0, [pc, #168]	; (60001764 <configure_cache+0xe4>)
	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600016ba:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600016be:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c2:	4c29      	ldr	r4, [pc, #164]	; (60001768 <configure_cache+0xe8>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016c4:	4829      	ldr	r0, [pc, #164]	; (6000176c <configure_cache+0xec>)
	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600016c6:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600016ca:	f8c3 0da0 	str.w	r0, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016ce:	4c28      	ldr	r4, [pc, #160]	; (60001770 <configure_cache+0xf0>)
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600016d0:	f8c3 2d9c 	str.w	r2, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016d4:	4827      	ldr	r0, [pc, #156]	; (60001774 <configure_cache+0xf4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016d6:	4a28      	ldr	r2, [pc, #160]	; (60001778 <configure_cache+0xf8>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600016d8:	f8c3 4da0 	str.w	r4, [r3, #3488]	; 0xda0
	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600016dc:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600016e0:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016e4:	f502 22a0 	add.w	r2, r2, #327680	; 0x50000
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016e8:	4c24      	ldr	r4, [pc, #144]	; (6000177c <configure_cache+0xfc>)
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016ea:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016ec:	4824      	ldr	r0, [pc, #144]	; (60001780 <configure_cache+0x100>)
	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600016ee:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600016f2:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016f6:	4a23      	ldr	r2, [pc, #140]	; (60001784 <configure_cache+0x104>)
	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600016f8:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
600016fc:	4c22      	ldr	r4, [pc, #136]	; (60001788 <configure_cache+0x108>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
600016fe:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001702:	f102 6240 	add.w	r2, r2, #201326592	; 0xc000000
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001706:	f8c3 4d9c 	str.w	r4, [r3, #3484]	; 0xd9c
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
6000170a:	4820      	ldr	r0, [pc, #128]	; (6000178c <configure_cache+0x10c>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000170c:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001710:	320c      	adds	r2, #12
	SCB_MPU_RBAR = 0x80000000 | REGION(i++); // SEMC: SDRAM, NAND, SRAM, etc
60001712:	f8c3 0d9c 	str.w	r0, [r3, #3484]	; 0xd9c
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1G;
60001716:	f8c3 2da0 	str.w	r2, [r3, #3488]	; 0xda0
	asm("nop"); // allow a few cycles for bus writes before enable MPU
6000171a:	bf00      	nop
	asm("nop");
6000171c:	bf00      	nop
	asm("nop");
6000171e:	bf00      	nop
	asm("nop");
60001720:	bf00      	nop
	asm("nop");
60001722:	bf00      	nop
	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
60001724:	2201      	movs	r2, #1
60001726:	f8c3 2d94 	str.w	r2, [r3, #3476]	; 0xd94
	asm("dsb");
6000172a:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000172e:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001732:	f8c3 1f50 	str.w	r1, [r3, #3920]	; 0xf50
	asm("dsb");
60001736:	f3bf 8f4f 	dsb	sy
	asm("isb");
6000173a:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
6000173e:	f8d3 2d14 	ldr.w	r2, [r3, #3348]	; 0xd14
}
60001742:	f85d 4b04 	ldr.w	r4, [sp], #4
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001746:	f442 3240 	orr.w	r2, r2, #196608	; 0x30000
6000174a:	f8c3 2d14 	str.w	r2, [r3, #3348]	; 0xd14
}
6000174e:	4770      	bx	lr
60001750:	1000003f 	.word	0x1000003f
60001754:	07080025 	.word	0x07080025
60001758:	00100009 	.word	0x00100009
6000175c:	20001640 	.word	0x20001640
60001760:	00200013 	.word	0x00200013
60001764:	07020021 	.word	0x07020021
60001768:	20000014 	.word	0x20000014
6000176c:	13080025 	.word	0x13080025
60001770:	10000009 	.word	0x10000009
60001774:	20200016 	.word	0x20200016
60001778:	130b0027 	.word	0x130b0027
6000177c:	40000017 	.word	0x40000017
60001780:	60000018 	.word	0x60000018
60001784:	070b002f 	.word	0x070b002f
60001788:	70000019 	.word	0x70000019
6000178c:	8000001a 	.word	0x8000001a

60001790 <usb_pll_start>:
{
60001790:	b4f0      	push	{r4, r5, r6, r7}
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001792:	4a15      	ldr	r2, [pc, #84]	; (600017e8 <usb_pll_start+0x58>)
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001794:	2740      	movs	r7, #64	; 0x40
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
60001796:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000179a:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
6000179e:	f44f 5500 	mov.w	r5, #8192	; 0x2000
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017a2:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017a6:	f243 0042 	movw	r0, #12354	; 0x3042
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600017aa:	6913      	ldr	r3, [r2, #16]
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600017ac:	f013 0f02 	tst.w	r3, #2
600017b0:	d10e      	bne.n	600017d0 <usb_pll_start+0x40>
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600017b2:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600017b6:	d00f      	beq.n	600017d8 <usb_pll_start+0x48>
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600017b8:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600017bc:	d00e      	beq.n	600017dc <usb_pll_start+0x4c>
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600017be:	2b00      	cmp	r3, #0
600017c0:	daf3      	bge.n	600017aa <usb_pll_start+0x1a>
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600017c2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600017c6:	d10b      	bne.n	600017e0 <usb_pll_start+0x50>
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600017c8:	065b      	lsls	r3, r3, #25
600017ca:	d50b      	bpl.n	600017e4 <usb_pll_start+0x54>
}
600017cc:	bcf0      	pop	{r4, r5, r6, r7}
600017ce:	4770      	bx	lr
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600017d0:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600017d2:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600017d4:	6190      	str	r0, [r2, #24]
			continue;
600017d6:	e7e8      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600017d8:	6155      	str	r5, [r2, #20]
			continue;
600017da:	e7e6      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600017dc:	6156      	str	r6, [r2, #20]
			continue;
600017de:	e7e4      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600017e0:	6191      	str	r1, [r2, #24]
			continue;
600017e2:	e7e2      	b.n	600017aa <usb_pll_start+0x1a>
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600017e4:	6157      	str	r7, [r2, #20]
			continue;
600017e6:	e7e0      	b.n	600017aa <usb_pll_start+0x1a>
600017e8:	400d8000 	.word	0x400d8000

600017ec <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017ec:	4a3f      	ldr	r2, [pc, #252]	; (600018ec <tempmon_init+0x100>)

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600017ee:	2003      	movs	r0, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600017f0:	493f      	ldr	r1, [pc, #252]	; (600018f0 <tempmon_init+0x104>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
600017f2:	eef3 5a09 	vmov.f32	s11, #57	; 0x41c80000  25.0
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600017f6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600017fa:	f04f 0c00 	mov.w	ip, #0
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600017fe:	ed9f 6a3d 	vldr	s12, [pc, #244]	; 600018f4 <tempmon_init+0x108>
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001802:	f023 0301 	bic.w	r3, r3, #1
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001806:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 600018f8 <tempmon_init+0x10c>
{
6000180a:	b430      	push	{r4, r5}
  TEMPMON_TEMPSENSE0 &= ~0x1U;
6000180c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001810:	f8c2 0090 	str.w	r0, [r2, #144]	; 0x90
  calibrationData = HW_OCOTP_ANA1;
60001814:	f8d1 10e0 	ldr.w	r1, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001818:	4d38      	ldr	r5, [pc, #224]	; (600018fc <tempmon_init+0x110>)
6000181a:	b2cb      	uxtb	r3, r1
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000181c:	4c38      	ldr	r4, [pc, #224]	; (60001900 <tempmon_init+0x114>)
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000181e:	4839      	ldr	r0, [pc, #228]	; (60001904 <tempmon_init+0x118>)
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001820:	602b      	str	r3, [r5, #0]
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001822:	ee07 3a90 	vmov	s15, r3
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001826:	0d0b      	lsrs	r3, r1, #20
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
60001828:	f3c1 210b 	ubfx	r1, r1, #8, #12
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000182c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
60001830:	ee06 3a90 	vmov	s13, r3
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001834:	ee07 1a10 	vmov	s14, r1
60001838:	4b33      	ldr	r3, [pc, #204]	; (60001908 <tempmon_init+0x11c>)
6000183a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000183e:	6021      	str	r1, [r4, #0]
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
60001840:	eef8 6ae6 	vcvt.f32.s32	s13, s13
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001844:	4931      	ldr	r1, [pc, #196]	; (6000190c <tempmon_init+0x120>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001846:	ee37 6ac6 	vsub.f32	s12, s15, s12
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000184a:	ee37 5ac5 	vsub.f32	s10, s15, s10
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000184e:	ee76 6ac7 	vsub.f32	s13, s13, s14
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
60001852:	ee77 7ae5 	vsub.f32	s15, s15, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001856:	ee26 6a26 	vmul.f32	s12, s12, s13
    s_roomC_hotC = (float) roomCount - (float) s_hotCount;
6000185a:	edc3 6a00 	vstr	s13, [r3]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000185e:	ee25 5a26 	vmul.f32	s10, s10, s13
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001862:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001866:	ee67 4aa6 	vmul.f32	s9, s15, s13
    s_hot_ROOM = (float) (s_hotTemp) - 25.0f;
6000186a:	edc0 7a00 	vstr	s15, [r0]
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000186e:	eec6 5a27 	vdiv.f32	s11, s12, s15
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001872:	4827      	ldr	r0, [pc, #156]	; (60001910 <tempmon_init+0x124>)
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001874:	ee85 6a27 	vdiv.f32	s12, s10, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001878:	eec4 6aa7 	vdiv.f32	s13, s9, s15
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000187c:	ee75 5a87 	vadd.f32	s11, s11, s14
60001880:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001884:	ee36 6a07 	vadd.f32	s12, s12, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001888:	ee15 4a90 	vmov	r4, s11
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000188c:	eebc 6ac6 	vcvt.u32.f32	s12, s12
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001890:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001894:	ee76 7a87 	vadd.f32	s15, s13, s14
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001898:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000189c:	ee16 3a10 	vmov	r3, s12
600018a0:	f8d2 4190 	ldr.w	r4, [r2, #400]	; 0x190
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018a4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018a8:	ea01 4103 	and.w	r1, r1, r3, lsl #16
600018ac:	4321      	orrs	r1, r4
  tempCodeVal = ((float)s_hotCount + ((float)s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
600018ae:	ee17 3a90 	vmov	r3, s15
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600018b2:	f8c2 1190 	str.w	r1, [r2, #400]	; 0x190
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600018b6:	f3c3 030b 	ubfx	r3, r3, #0, #12
600018ba:	f8d2 1190 	ldr.w	r1, [r2, #400]	; 0x190
600018be:	430b      	orrs	r3, r1
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* volatile _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
600018c0:	4914      	ldr	r1, [pc, #80]	; (60001914 <tempmon_init+0x128>)
600018c2:	f8c2 3190 	str.w	r3, [r2, #400]	; 0x190
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600018c6:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
600018ca:	f043 0302 	orr.w	r3, r3, #2
600018ce:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
600018d2:	4b11      	ldr	r3, [pc, #68]	; (60001918 <tempmon_init+0x12c>)
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600018d4:	f880 c040 	strb.w	ip, [r0, #64]	; 0x40
600018d8:	f8c1 3140 	str.w	r3, [r1, #320]	; 0x140
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
600018e0:	2201      	movs	r2, #1
}
600018e2:	bc30      	pop	{r4, r5}
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600018e4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
}
600018e8:	4770      	bx	lr
600018ea:	bf00      	nop
600018ec:	400d8100 	.word	0x400d8100
600018f0:	401f4400 	.word	0x401f4400
600018f4:	42aa0000 	.word	0x42aa0000
600018f8:	42b40000 	.word	0x42b40000
600018fc:	20001444 	.word	0x20001444
60001900:	20001440 	.word	0x20001440
60001904:	20001448 	.word	0x20001448
60001908:	2000144c 	.word	0x2000144c
6000190c:	0fff0000 	.word	0x0fff0000
60001910:	e000e400 	.word	0xe000e400
60001914:	20000c00 	.word	0x20000c00
60001918:	0000117d 	.word	0x0000117d

6000191c <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000191c:	4b31      	ldr	r3, [pc, #196]	; (600019e4 <usb_init+0xc8>)
6000191e:	f640 7261 	movw	r2, #3937	; 0xf61
{
60001922:	b510      	push	{r4, lr}
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001924:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001928:	f240 4404 	movw	r4, #1028	; 0x404
	usb_init_serialnumber();
6000192c:	f000 f8d8 	bl	60001ae0 <__usb_init_serialnumber_veneer>
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001930:	4a2d      	ldr	r2, [pc, #180]	; (600019e8 <usb_init+0xcc>)
	USB1_BURSTSIZE = 0x0404;
60001932:	492e      	ldr	r1, [pc, #184]	; (600019ec <usb_init+0xd0>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001934:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001938:	482d      	ldr	r0, [pc, #180]	; (600019f0 <usb_init+0xd4>)
	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000193a:	f043 0303 	orr.w	r3, r3, #3
6000193e:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001942:	4b2c      	ldr	r3, [pc, #176]	; (600019f4 <usb_init+0xd8>)
	USB1_BURSTSIZE = 0x0404;
60001944:	f8c1 4160 	str.w	r4, [r1, #352]	; 0x160
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001948:	6802      	ldr	r2, [r0, #0]
6000194a:	421a      	tst	r2, r3
6000194c:	d103      	bne.n	60001956 <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
6000194e:	f8d1 31a8 	ldr.w	r3, [r1, #424]	; 0x1a8
60001952:	079a      	lsls	r2, r3, #30
60001954:	d01b      	beq.n	6000198e <usb_init+0x72>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001956:	4a25      	ldr	r2, [pc, #148]	; (600019ec <usb_init+0xd0>)
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001958:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
6000195c:	4b24      	ldr	r3, [pc, #144]	; (600019f0 <usb_init+0xd4>)
6000195e:	6359      	str	r1, [r3, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
60001960:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001964:	f043 0302 	orr.w	r3, r3, #2
60001968:	f8c2 3140 	str.w	r3, [r2, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
6000196c:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
60001970:	079b      	lsls	r3, r3, #30
60001972:	d4fb      	bmi.n	6000196c <usb_init+0x50>
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001974:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001978:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000197c:	4b1c      	ldr	r3, [pc, #112]	; (600019f0 <usb_init+0xd4>)
6000197e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		NVIC_CLEAR_PENDING(IRQ_USB1);
60001982:	f8c1 028c 	str.w	r0, [r1, #652]	; 0x28c
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001986:	2019      	movs	r0, #25
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001988:	639a      	str	r2, [r3, #56]	; 0x38
		delay(25);
6000198a:	f000 f895 	bl	60001ab8 <__delay_veneer>
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
6000198e:	4a18      	ldr	r2, [pc, #96]	; (600019f0 <usb_init+0xd4>)
60001990:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
60001994:	4c15      	ldr	r4, [pc, #84]	; (600019ec <usb_init+0xd0>)
	USBPHY1_PWD = 0;
60001996:	2100      	movs	r1, #0
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001998:	6390      	str	r0, [r2, #56]	; 0x38
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000199a:	200a      	movs	r0, #10
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000199c:	4b16      	ldr	r3, [pc, #88]	; (600019f8 <usb_init+0xdc>)
	USBPHY1_PWD = 0;
6000199e:	6011      	str	r1, [r2, #0]
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a0:	f44f 7220 	mov.w	r2, #640	; 0x280
	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
600019a4:	f8c4 01a8 	str.w	r0, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019a8:	4618      	mov	r0, r3
600019aa:	f000 f88d 	bl	60001ac8 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
	endpoint_queue_head[1].config = (64 << 16);
600019ae:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
600019b2:	4603      	mov	r3, r0
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019b4:	f44f 0081 	mov.w	r0, #4227072	; 0x408000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019b8:	f240 1143 	movw	r1, #323	; 0x143
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600019bc:	6018      	str	r0, [r3, #0]
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600019be:	f8c4 3158 	str.w	r3, [r4, #344]	; 0x158
	endpoint_queue_head[1].config = (64 << 16);
600019c2:	641a      	str	r2, [r3, #64]	; 0x40
600019c4:	4b0d      	ldr	r3, [pc, #52]	; (600019fc <usb_init+0xe0>)
600019c6:	4a0e      	ldr	r2, [pc, #56]	; (60001a00 <usb_init+0xe4>)
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600019c8:	f8c4 1148 	str.w	r1, [r4, #328]	; 0x148
600019cc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &usb_isr;
	attachInterruptVector(IRQ_USB1, &usb_isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
600019d4:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600019d8:	2301      	movs	r3, #1
	NVIC_ENABLE_IRQ(IRQ_USB1);
600019da:	f8c2 110c 	str.w	r1, [r2, #268]	; 0x10c
	USB1_USBCMD = USB_USBCMD_RS;
600019de:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	//transfer_log_head = 0;
	//transfer_log_count = 0;
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}
600019e2:	bd10      	pop	{r4, pc}
600019e4:	400d8000 	.word	0x400d8000
600019e8:	400fc000 	.word	0x400fc000
600019ec:	402e0000 	.word	0x402e0000
600019f0:	400d9000 	.word	0x400d9000
600019f4:	001e1c00 	.word	0x001e1c00
600019f8:	20000000 	.word	0x20000000
600019fc:	20000c00 	.word	0x20000c00
60001a00:	00001365 	.word	0x00001365

60001a04 <_reboot_Teensyduino_>:


FLASHMEM __attribute__((noinline)) void _reboot_Teensyduino_(void)
{
60001a04:	b508      	push	{r3, lr}
	if (!(HW_OCOTP_CFG5 & 0x02)) {
60001a06:	4b0e      	ldr	r3, [pc, #56]	; (60001a40 <_reboot_Teensyduino_+0x3c>)
60001a08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
60001a0a:	079b      	lsls	r3, r3, #30
60001a0c:	d400      	bmi.n	60001a10 <_reboot_Teensyduino_+0xc>
		asm("bkpt #251"); // run bootloader
60001a0e:	befb      	bkpt	0x00fb
	} else {
		__disable_irq(); // secure mode NXP ROM reboot
60001a10:	b672      	cpsid	i
		USB1_USBCMD = 0;
60001a12:	4b0c      	ldr	r3, [pc, #48]	; (60001a44 <_reboot_Teensyduino_+0x40>)
60001a14:	2000      	movs	r0, #0
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a16:	4a0c      	ldr	r2, [pc, #48]	; (60001a48 <_reboot_Teensyduino_+0x44>)
		USB1_USBCMD = 0;
60001a18:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		// TODO: wipe all RAM for security
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a1c:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a20:	490a      	ldr	r1, [pc, #40]	; (60001a4c <_reboot_Teensyduino_+0x48>)
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a22:	f5a3 235f 	sub.w	r3, r3, #913408	; 0xdf000
		IOMUXC_GPR_GPR16 = 0x00200003;
60001a26:	6411      	str	r1, [r2, #64]	; 0x40
		__asm__ volatile("mov sp, %0" : : "r" (0x20201000) : );
60001a28:	469d      	mov	sp, r3
		__asm__ volatile("dsb":::"memory");
60001a2a:	f3bf 8f4f 	dsb	sy
		volatile uint32_t * const p = (uint32_t *)0x20208000;
		*p = 0xEB120000;
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a2e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
		*p = 0xEB120000;
60001a32:	4807      	ldr	r0, [pc, #28]	; (60001a50 <_reboot_Teensyduino_+0x4c>)
60001a34:	4a07      	ldr	r2, [pc, #28]	; (60001a54 <_reboot_Teensyduino_+0x50>)
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a36:	69db      	ldr	r3, [r3, #28]
		*p = 0xEB120000;
60001a38:	6002      	str	r2, [r0, #0]
		((void (*)(volatile void *))(*(uint32_t *)(*(uint32_t *)0x0020001C + 8)))(p);
60001a3a:	689b      	ldr	r3, [r3, #8]
60001a3c:	4798      	blx	r3
	}
	__builtin_unreachable();
60001a3e:	bf00      	nop
60001a40:	401f4400 	.word	0x401f4400
60001a44:	402e0000 	.word	0x402e0000
60001a48:	400ac000 	.word	0x400ac000
60001a4c:	00200003 	.word	0x00200003
60001a50:	20208000 	.word	0x20208000
60001a54:	eb120000 	.word	0xeb120000

60001a58 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a58:	4b10      	ldr	r3, [pc, #64]	; (60001a9c <analog_init+0x44>)
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a5a:	20a0      	movs	r0, #160	; 0xa0
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a5c:	4a10      	ldr	r2, [pc, #64]	; (60001aa0 <analog_init+0x48>)
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a5e:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a60:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
{
60001a64:	b410      	push	{r4}
	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
60001a66:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a68:	f240 6437 	movw	r4, #1591	; 0x637
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001a6c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
60001a6e:	f441 7140 	orr.w	r1, r1, #768	; 0x300
60001a72:	66d9      	str	r1, [r3, #108]	; 0x6c
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001a74:	6454      	str	r4, [r2, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001a76:	6490      	str	r0, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) {
60001a78:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a7a:	061b      	lsls	r3, r3, #24
60001a7c:	d4fc      	bmi.n	60001a78 <analog_init+0x20>
		//yield();
	}
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a7e:	4a09      	ldr	r2, [pc, #36]	; (60001aa4 <analog_init+0x4c>)
60001a80:	f240 6137 	movw	r1, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a84:	23a0      	movs	r3, #160	; 0xa0
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001a86:	6451      	str	r1, [r2, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001a88:	6493      	str	r3, [r2, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) {
60001a8a:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001a8c:	f013 0380 	ands.w	r3, r3, #128	; 0x80
60001a90:	d1fb      	bne.n	60001a8a <analog_init+0x32>
		//yield();
	}
	calibrating = 0;
60001a92:	4a05      	ldr	r2, [pc, #20]	; (60001aa8 <analog_init+0x50>)
60001a94:	7013      	strb	r3, [r2, #0]
}
60001a96:	f85d 4b04 	ldr.w	r4, [sp], #4
60001a9a:	4770      	bx	lr
60001a9c:	400fc000 	.word	0x400fc000
60001aa0:	400c4000 	.word	0x400c4000
60001aa4:	400c8000 	.word	0x400c8000
60001aa8:	200015f9 	.word	0x200015f9

60001aac <_init>:
60001aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
60001aae:	bf00      	nop
60001ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
60001ab2:	bc08      	pop	{r3}
60001ab4:	469e      	mov	lr, r3
60001ab6:	4770      	bx	lr

60001ab8 <__delay_veneer>:
60001ab8:	f85f f000 	ldr.w	pc, [pc]	; 60001abc <__delay_veneer+0x4>
60001abc:	00000de9 	.word	0x00000de9

60001ac0 <__pwm_init_veneer>:
60001ac0:	f85f f000 	ldr.w	pc, [pc]	; 60001ac4 <__pwm_init_veneer+0x4>
60001ac4:	0000213d 	.word	0x0000213d

60001ac8 <__memset_veneer>:
60001ac8:	f85f f000 	ldr.w	pc, [pc]	; 60001acc <__memset_veneer+0x4>
60001acc:	0000284d 	.word	0x0000284d

60001ad0 <__main_veneer>:
60001ad0:	f85f f000 	ldr.w	pc, [pc]	; 60001ad4 <__main_veneer+0x4>
60001ad4:	00000fa9 	.word	0x00000fa9

60001ad8 <__set_arm_clock_veneer>:
60001ad8:	f85f f000 	ldr.w	pc, [pc]	; 60001adc <__set_arm_clock_veneer+0x4>
60001adc:	00000af9 	.word	0x00000af9

60001ae0 <__usb_init_serialnumber_veneer>:
60001ae0:	f85f f000 	ldr.w	pc, [pc]	; 60001ae4 <__usb_init_serialnumber_veneer+0x4>
60001ae4:	00001ad1 	.word	0x00001ad1

60001ae8 <____libc_init_array_veneer>:
60001ae8:	f85f f000 	ldr.w	pc, [pc]	; 60001aec <____libc_init_array_veneer+0x4>
60001aec:	00002921 	.word	0x00002921

60001af0 <__frame_dummy_init_array_entry>:
60001af0:	00000089 00000209                       ........

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <deregister_tm_clones>:
// Returns true if any motor is still running to the target position.
boolean MultiStepper::run()
{
    uint8_t i;
    boolean ret = false;
    for (i = 0; i < _num_steppers; i++)
      20:	4803      	ldr	r0, [pc, #12]	; (30 <_teensy_model_identifier+0xc>)
    {
	if ( _steppers[i]->distanceToGo() != 0)
      22:	4b04      	ldr	r3, [pc, #16]	; (34 <_teensy_model_identifier+0x10>)
      24:	4283      	cmp	r3, r0
      26:	d002      	beq.n	2e <_teensy_model_identifier+0xa>
      28:	4b03      	ldr	r3, [pc, #12]	; (38 <_teensy_model_identifier+0x14>)
	{
	    _steppers[i]->runSpeed();
      2a:	b103      	cbz	r3, 2e <_teensy_model_identifier+0xa>
      2c:	4718      	bx	r3
    for (i = 0; i < _num_steppers; i++)
      2e:	4770      	bx	lr
	    _steppers[i]->runSpeed();
      30:	20000ec0 	.word	0x20000ec0
    for (i = 0; i < _num_steppers; i++)
      34:	20000ec0 	.word	0x20000ec0
	    ret = true;
      38:	00000000 	.word	0x00000000

0000003c <register_tm_clones>:
    for (i = 0; i < _num_steppers; i++)
      3c:	4805      	ldr	r0, [pc, #20]	; (54 <register_tm_clones+0x18>)
	}
#endif
	
    }
    return ret;
}
      3e:	4b06      	ldr	r3, [pc, #24]	; (58 <register_tm_clones+0x1c>)
      40:	1a1b      	subs	r3, r3, r0
	// start the SRTC
	SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
	while (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)); // wait
	// start the RTC and sync it to the SRTC
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
}
      42:	0fd9      	lsrs	r1, r3, #31
      44:	eb01 01a3 	add.w	r1, r1, r3, asr #2
}
#endif

void AccelStepper::moveTo(long absolute)
{
    if (_targetPos != absolute)
      48:	1049      	asrs	r1, r1, #1
    {
	_targetPos = absolute;
	computeNewSpeed();
      4a:	d002      	beq.n	52 <register_tm_clones+0x16>
	if (_speed > 0)
	    move(stepsToStop);
	else
	    move(-stepsToStop);
    }
}
      4c:	4b03      	ldr	r3, [pc, #12]	; (5c <register_tm_clones+0x20>)
      4e:	b103      	cbz	r3, 52 <register_tm_clones+0x16>
	computeNewSpeed();
      50:	4718      	bx	r3
	_targetPos = absolute;
      52:	4770      	bx	lr
	computeNewSpeed();
      54:	20000ec0 	.word	0x20000ec0
}
      58:	20000ec0 	.word	0x20000ec0
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      5c:	00000000 	.word	0x00000000

00000060 <__do_global_dtors_aux>:
}
      60:	b510      	push	{r4, lr}
      62:	4c06      	ldr	r4, [pc, #24]	; (7c <__do_global_dtors_aux+0x1c>)
      64:	7823      	ldrb	r3, [r4, #0]
      66:	b943      	cbnz	r3, 7a <__do_global_dtors_aux+0x1a>
      68:	f7ff ffda 	bl	20 <deregister_tm_clones>
	bool irq = disableTimerInterrupt();
	MillisTimer *waiting = listWaiting;
	listWaiting = nullptr; // TODO: use STREX to avoid interrupt disable
	enableTimerInterrupt(irq);
	while (waiting) {
		MillisTimer *next = waiting->_next;
      6c:	4b04      	ldr	r3, [pc, #16]	; (80 <__do_global_dtors_aux+0x20>)
		waiting->addToActiveList();
      6e:	b113      	cbz	r3, 76 <__do_global_dtors_aux+0x16>
      70:	4804      	ldr	r0, [pc, #16]	; (84 <__do_global_dtors_aux+0x24>)
	while (waiting) {
      72:	f3af 8000 	nop.w
		waiting = next;
	}
}
      76:	2301      	movs	r3, #1
			event.triggerEvent(0, timer);
      78:	7023      	strb	r3, [r4, #0]
      7a:	bd10      	pop	{r4, pc}
      7c:	20001088 	.word	0x20001088
			timer->_ms--;
      80:	00000000 	.word	0x00000000
			break;
      84:	60006400 	.word	0x60006400

00000088 <frame_dummy>:
      88:	b508      	push	{r3, lr}
      8a:	4b04      	ldr	r3, [pc, #16]	; (9c <frame_dummy+0x14>)
      8c:	b11b      	cbz	r3, 96 <frame_dummy+0xe>
      8e:	4904      	ldr	r1, [pc, #16]	; (a0 <frame_dummy+0x18>)
      90:	4804      	ldr	r0, [pc, #16]	; (a4 <frame_dummy+0x1c>)
      92:	f3af 8000 	nop.w
	if(!(ch & 0x80)) {
      96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
}
      9a:	e7cf      	b.n	3c <register_tm_clones>
      9c:	00000000 	.word	0x00000000
      a0:	2000108c 	.word	0x2000108c
      a4:	60006400 	.word	0x60006400

000000a8 <AccelStepper::~AccelStepper()>:
    /// Checks to see if the motor is currently running to a target
    /// \return true if the speed is not zero or not at the target position
    bool    isRunning();

    /// Virtual destructor to prevent warnings during delete
    virtual ~AccelStepper() {};
      a8:	4770      	bx	lr
      aa:	bf00      	nop

000000ac <AccelStepper::~AccelStepper()>:
      ac:	b510      	push	{r4, lr}
      ae:	4604      	mov	r4, r0
      b0:	2154      	movs	r1, #84	; 0x54
      b2:	f000 ff81 	bl	fb8 <operator delete(void*, unsigned int)>
      b6:	4620      	mov	r0, r4
      b8:	bd10      	pop	{r4, pc}
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(mask);
	p->SM[submodule].CTRL = FLEXPWM_SMCTRL_FULL | FLEXPWM_SMCTRL_PRSC(prescale);
	p->SM[submodule].VAL1 = newdiv - 1;
	p->SM[submodule].VAL0 = (p->SM[submodule].VAL0 * newdiv) / olddiv;
	p->SM[submodule].VAL3 = (p->SM[submodule].VAL3 * newdiv) / olddiv;
	p->SM[submodule].VAL5 = (p->SM[submodule].VAL5 * newdiv) / olddiv;
      ba:	bf00      	nop

000000bc <setup>:
      bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
      c0:	2101      	movs	r1, #1
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(mask);
      c2:	200c      	movs	r0, #12
      c4:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 1ac <setup+0xf0>
      c8:	4f31      	ldr	r7, [pc, #196]	; (190 <setup+0xd4>)
      ca:	4e32      	ldr	r6, [pc, #200]	; (194 <setup+0xd8>)
      cc:	4d32      	ldr	r5, [pc, #200]	; (198 <setup+0xdc>)
      ce:	4c33      	ldr	r4, [pc, #204]	; (19c <setup+0xe0>)
}
      d0:	ed2d 8b02 	vpush	{d8}
	while (newdiv > 65535 && prescale < 7) {
      d4:	f000 ff30 	bl	f38 <pinMode>
      d8:	2101      	movs	r1, #1
      da:	200b      	movs	r0, #11
  pinMode(EN_PIN_R1, OUTPUT);
  digitalWrite(EN_PIN_P1,LOW);
  digitalWrite(EN_PIN_R1,LOW);

  // Set max speed and acceleration for each
  stepper1.setMaxSpeed(1000);
      dc:	eddf 8a30 	vldr	s17, [pc, #192]	; 1a0 <setup+0xe4>
  pinMode(EN_PIN_R2, OUTPUT);
      e0:	f000 ff2a 	bl	f38 <pinMode>
  digitalWrite(EN_PIN_P2,LOW);
      e4:	2100      	movs	r1, #0
      e6:	200c      	movs	r0, #12
  stepper1.setAcceleration(500);
      e8:	ed9f 8a2e 	vldr	s16, [pc, #184]	; 1a4 <setup+0xe8>
  digitalWrite(EN_PIN_P2,LOW);
      ec:	f000 fefa 	bl	ee4 <digitalWrite>
  digitalWrite(EN_PIN_R2,LOW);
      f0:	2100      	movs	r1, #0
      f2:	200b      	movs	r0, #11
      f4:	f000 fef6 	bl	ee4 <digitalWrite>
  pinMode(EN_PIN_P1, OUTPUT);
      f8:	2101      	movs	r1, #1
      fa:	2009      	movs	r0, #9
      fc:	f000 ff1c 	bl	f38 <pinMode>
  pinMode(EN_PIN_R1, OUTPUT);
     100:	2101      	movs	r1, #1
     102:	200a      	movs	r0, #10
     104:	f000 ff18 	bl	f38 <pinMode>
  digitalWrite(EN_PIN_P1,LOW);
     108:	2100      	movs	r1, #0
     10a:	2009      	movs	r0, #9
     10c:	f000 feea 	bl	ee4 <digitalWrite>
  digitalWrite(EN_PIN_R1,LOW);
     110:	2100      	movs	r1, #0
     112:	200a      	movs	r0, #10
     114:	f000 fee6 	bl	ee4 <digitalWrite>
  stepper1.setMaxSpeed(1000);
     118:	eeb0 0a68 	vmov.f32	s0, s17
     11c:	4640      	mov	r0, r8
     11e:	f000 fb15 	bl	74c <AccelStepper::setMaxSpeed(float)>
  stepper1.setAcceleration(500);
     122:	eeb0 0a48 	vmov.f32	s0, s16
     126:	4640      	mov	r0, r8
     128:	f000 fba2 	bl	870 <AccelStepper::setAcceleration(float)>

  stepper2.setMaxSpeed(2500);
     12c:	4638      	mov	r0, r7
     12e:	ed9f 0a1e 	vldr	s0, [pc, #120]	; 1a8 <setup+0xec>
     132:	f000 fb0b 	bl	74c <AccelStepper::setMaxSpeed(float)>
  stepper2.setAcceleration(500);
     136:	eeb0 0a48 	vmov.f32	s0, s16
     13a:	4638      	mov	r0, r7
     13c:	f000 fb98 	bl	870 <AccelStepper::setAcceleration(float)>

  stepper3.setMaxSpeed(1000);
     140:	eeb0 0a68 	vmov.f32	s0, s17
     144:	4630      	mov	r0, r6
     146:	f000 fb01 	bl	74c <AccelStepper::setMaxSpeed(float)>
  stepper3.setAcceleration(500);
     14a:	eeb0 0a48 	vmov.f32	s0, s16
     14e:	4630      	mov	r0, r6
     150:	f000 fb8e 	bl	870 <AccelStepper::setAcceleration(float)>

  stepper4.setMaxSpeed(1000);
     154:	eeb0 0a68 	vmov.f32	s0, s17
     158:	4628      	mov	r0, r5
     15a:	f000 faf7 	bl	74c <AccelStepper::setMaxSpeed(float)>
  stepper4.setAcceleration(500);
     15e:	eeb0 0a48 	vmov.f32	s0, s16
     162:	4628      	mov	r0, r5
     164:	f000 fb84 	bl	870 <AccelStepper::setAcceleration(float)>


  // Tell the MultiStepper object about each motor
  steppers.addStepper(stepper1);
     168:	4641      	mov	r1, r8
     16a:	4620      	mov	r0, r4
     16c:	f000 fc28 	bl	9c0 <MultiStepper::addStepper(AccelStepper&)>
  steppers.addStepper(stepper2);
     170:	4639      	mov	r1, r7
     172:	4620      	mov	r0, r4
     174:	f000 fc24 	bl	9c0 <MultiStepper::addStepper(AccelStepper&)>
  steppers.addStepper(stepper3);
     178:	4631      	mov	r1, r6
     17a:	4620      	mov	r0, r4
     17c:	f000 fc20 	bl	9c0 <MultiStepper::addStepper(AccelStepper&)>
  steppers.addStepper(stepper4);
     180:	4629      	mov	r1, r5
     182:	4620      	mov	r0, r4
}
     184:	ecbd 8b02 	vpop	{d8}
     188:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  steppers.addStepper(stepper4);
     18c:	f000 bc18 	b.w	9c0 <MultiStepper::addStepper(AccelStepper&)>
     190:	200014a8 	.word	0x200014a8
     194:	200014fc 	.word	0x200014fc
     198:	20001550 	.word	0x20001550
     19c:	200015a4 	.word	0x200015a4
     1a0:	447a0000 	.word	0x447a0000
     1a4:	43fa0000 	.word	0x43fa0000
     1a8:	451c4000 	.word	0x451c4000
     1ac:	20001454 	.word	0x20001454

000001b0 <loop>:

void loop() {
     1b0:	b510      	push	{r4, lr}
  positions[1] = -51200;  // target for stepper2
  positions[2] = 6400;    // target for stepper1
  positions[3] = -51200;  // target for stepper2

  // This call will block until both steppers have reached their targets
  steppers.moveTo(positions);
     1b2:	4c13      	ldr	r4, [pc, #76]	; (200 <loop+0x50>)
void loop() {
     1b4:	b084      	sub	sp, #16
  positions[0] = 6400;    // target for stepper1
     1b6:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
  positions[1] = -51200;  // target for stepper2
     1ba:	4b12      	ldr	r3, [pc, #72]	; (204 <loop+0x54>)
  steppers.moveTo(positions);
     1bc:	4669      	mov	r1, sp
     1be:	4620      	mov	r0, r4
  positions[1] = -51200;  // target for stepper2
     1c0:	e9cd 2300 	strd	r2, r3, [sp]
  positions[3] = -51200;  // target for stepper2
     1c4:	e9cd 2302 	strd	r2, r3, [sp, #8]
  steppers.moveTo(positions);
     1c8:	f000 fc0a 	bl	9e0 <MultiStepper::moveTo(long*)>
  steppers.runSpeedToPosition();
     1cc:	4620      	mov	r0, r4
     1ce:	f000 fc71 	bl	ab4 <MultiStepper::runSpeedToPosition()>

  delay(1000);
     1d2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     1d6:	f000 fe07 	bl	de8 <delay>

  // You can reverse them and send again, etc.
  positions[0] = 0;
     1da:	2300      	movs	r3, #0
  positions[1] = 0;
  positions[2] = 0;
  positions[3] = 0;

  steppers.moveTo(positions);
     1dc:	4669      	mov	r1, sp
     1de:	4620      	mov	r0, r4
  positions[1] = 0;
     1e0:	e9cd 3300 	strd	r3, r3, [sp]
  positions[3] = 0;
     1e4:	e9cd 3302 	strd	r3, r3, [sp, #8]
  steppers.moveTo(positions);
     1e8:	f000 fbfa 	bl	9e0 <MultiStepper::moveTo(long*)>
  steppers.runSpeedToPosition();
     1ec:	4620      	mov	r0, r4
     1ee:	f000 fc61 	bl	ab4 <MultiStepper::runSpeedToPosition()>

  delay(1000);
     1f2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     1f6:	f000 fdf7 	bl	de8 <delay>
}
     1fa:	b004      	add	sp, #16
     1fc:	bd10      	pop	{r4, pc}
     1fe:	bf00      	nop
     200:	200015a4 	.word	0x200015a4
     204:	ffff3800 	.word	0xffff3800

00000208 <_GLOBAL__sub_I_stepper1>:
     208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
AccelStepper stepper1(AccelStepper::DRIVER, STEP_PIN_R2, DIR_PIN_R2);
     20c:	2401      	movs	r4, #1
}
     20e:	b084      	sub	sp, #16
AccelStepper stepper1(AccelStepper::DRIVER, STEP_PIN_R2, DIR_PIN_R2);
     210:	2605      	movs	r6, #5
     212:	2504      	movs	r5, #4
     214:	f8df a098 	ldr.w	sl, [pc, #152]	; 2b0 <_GLOBAL__sub_I_stepper1+0xa8>
     218:	2302      	movs	r3, #2
     21a:	f8df 8098 	ldr.w	r8, [pc, #152]	; 2b4 <_GLOBAL__sub_I_stepper1+0xac>
     21e:	4621      	mov	r1, r4
     220:	4f21      	ldr	r7, [pc, #132]	; (2a8 <_GLOBAL__sub_I_stepper1+0xa0>)
     222:	2203      	movs	r2, #3
AccelStepper stepper2(AccelStepper::DRIVER, STEP_PIN_P2, DIR_PIN_P2);
     224:	f8df 9090 	ldr.w	r9, [pc, #144]	; 2b8 <_GLOBAL__sub_I_stepper1+0xb0>
AccelStepper stepper1(AccelStepper::DRIVER, STEP_PIN_R2, DIR_PIN_R2);
     228:	4650      	mov	r0, sl
     22a:	9500      	str	r5, [sp, #0]
     22c:	e9cd 6401 	strd	r6, r4, [sp, #4]
     230:	f000 fabe 	bl	7b0 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
     234:	4642      	mov	r2, r8
     236:	4639      	mov	r1, r7
     238:	4650      	mov	r0, sl
     23a:	f002 f835 	bl	22a8 <__aeabi_atexit>
AccelStepper stepper3(AccelStepper::DRIVER, STEP_PIN_R1, DIR_PIN_R1);
     23e:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2bc <_GLOBAL__sub_I_stepper1+0xb4>
AccelStepper stepper2(AccelStepper::DRIVER, STEP_PIN_P2, DIR_PIN_P2);
     242:	2317      	movs	r3, #23
     244:	4621      	mov	r1, r4
     246:	2216      	movs	r2, #22
     248:	4648      	mov	r0, r9
     24a:	9500      	str	r5, [sp, #0]
     24c:	e9cd 6401 	strd	r6, r4, [sp, #4]
     250:	f000 faae 	bl	7b0 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
     254:	4642      	mov	r2, r8
     256:	4639      	mov	r1, r7
     258:	4648      	mov	r0, r9
     25a:	f002 f825 	bl	22a8 <__aeabi_atexit>
AccelStepper stepper4(AccelStepper::DRIVER, STEP_PIN_P1, DIR_PIN_P1);
     25e:	f8df 9060 	ldr.w	r9, [pc, #96]	; 2c0 <_GLOBAL__sub_I_stepper1+0xb8>
AccelStepper stepper3(AccelStepper::DRIVER, STEP_PIN_R1, DIR_PIN_R1);
     262:	462b      	mov	r3, r5
     264:	4632      	mov	r2, r6
     266:	4621      	mov	r1, r4
     268:	4650      	mov	r0, sl
     26a:	9500      	str	r5, [sp, #0]
     26c:	e9cd 6401 	strd	r6, r4, [sp, #4]
     270:	f000 fa9e 	bl	7b0 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
     274:	4642      	mov	r2, r8
     276:	4639      	mov	r1, r7
     278:	4650      	mov	r0, sl
     27a:	f002 f815 	bl	22a8 <__aeabi_atexit>
AccelStepper stepper4(AccelStepper::DRIVER, STEP_PIN_P1, DIR_PIN_P1);
     27e:	4621      	mov	r1, r4
     280:	2315      	movs	r3, #21
     282:	2214      	movs	r2, #20
     284:	4648      	mov	r0, r9
     286:	9500      	str	r5, [sp, #0]
     288:	e9cd 6401 	strd	r6, r4, [sp, #4]
     28c:	f000 fa90 	bl	7b0 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>
     290:	4642      	mov	r2, r8
     292:	4639      	mov	r1, r7
     294:	4648      	mov	r0, r9
     296:	f002 f807 	bl	22a8 <__aeabi_atexit>
MultiStepper steppers;
     29a:	4804      	ldr	r0, [pc, #16]	; (2ac <_GLOBAL__sub_I_stepper1+0xa4>)
}
     29c:	b004      	add	sp, #16
     29e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
MultiStepper steppers;
     2a2:	f000 bb89 	b.w	9b8 <MultiStepper::MultiStepper()>
     2a6:	bf00      	nop
     2a8:	000000a9 	.word	0x000000a9
     2ac:	200015a4 	.word	0x200015a4
     2b0:	20001454 	.word	0x20001454
     2b4:	200006f0 	.word	0x200006f0
     2b8:	200014a8 	.word	0x200014a8
     2bc:	200014fc 	.word	0x200014fc
     2c0:	20001550 	.word	0x20001550

000002c4 <AccelStepper::computeNewSpeed()>:
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
     2c4:	ed90 6a08 	vldr	s12, [r0, #32]
     2c8:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
     2cc:	ee26 6a06 	vmul.f32	s12, s12, s12
     2d0:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
     2d4:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     2d8:	ee37 7b07 	vadd.f64	d7, d7, d7
{
     2dc:	b410      	push	{r4}
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
     2de:	ee86 5b07 	vdiv.f64	d5, d6, d7
    return _targetPos - _currentPos;
     2e2:	e9d0 1406 	ldrd	r1, r4, [r0, #24]
    if (distanceTo == 0 && stepsToStop <= 1)
     2e6:	ebb4 0c01 	subs.w	ip, r4, r1
    long stepsToStop = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
     2ea:	eefd 7bc5 	vcvt.s32.f64	s15, d5
     2ee:	ee17 2a90 	vmov	r2, s15
    if (distanceTo == 0 && stepsToStop <= 1)
     2f2:	d10b      	bne.n	30c <AccelStepper::computeNewSpeed()+0x48>
     2f4:	2a01      	cmp	r2, #1
     2f6:	dc09      	bgt.n	30c <AccelStepper::computeNewSpeed()+0x48>
	_stepInterval = 0;
     2f8:	2300      	movs	r3, #0
	_speed = 0.0;
     2fa:	2100      	movs	r1, #0
}
     2fc:	f85d 4b04 	ldr.w	r4, [sp], #4
	return _stepInterval;
     300:	461a      	mov	r2, r3
	_stepInterval = 0;
     302:	6083      	str	r3, [r0, #8]
	_speed = 0.0;
     304:	6201      	str	r1, [r0, #32]
	_n = 0;
     306:	6443      	str	r3, [r0, #68]	; 0x44
}
     308:	4610      	mov	r0, r2
     30a:	4770      	bx	lr
    if (distanceTo > 0)
     30c:	f1bc 0f00 	cmp.w	ip, #0
	if (_n > 0)
     310:	6c43      	ldr	r3, [r0, #68]	; 0x44
    if (distanceTo > 0)
     312:	dd27      	ble.n	364 <AccelStepper::computeNewSpeed()+0xa0>
	if (_n > 0)
     314:	2b00      	cmp	r3, #0
     316:	dd52      	ble.n	3be <AccelStepper::computeNewSpeed()+0xfa>
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
     318:	4562      	cmp	r2, ip
     31a:	da4a      	bge.n	3b2 <AccelStepper::computeNewSpeed()+0xee>
     31c:	7901      	ldrb	r1, [r0, #4]
     31e:	2900      	cmp	r1, #0
     320:	d047      	beq.n	3b2 <AccelStepper::computeNewSpeed()+0xee>
	_cn = _cn - ((2.0 * _cn) / ((4.0 * _n) + 1)); // Equation 13
     322:	ee07 3a90 	vmov	s15, r3
     326:	eeb1 4b00 	vmov.f64	d4, #16	; 0x40800000  4.0
     32a:	eeb7 5b00 	vmov.f64	d5, #112	; 0x3f800000  1.0
     32e:	ed90 6a13 	vldr	s12, [r0, #76]	; 0x4c
     332:	eeb8 3be7 	vcvt.f64.s32	d3, s15
  return a < b ? std::forward<A>(a) : std::forward<B>(b);
}
// Returns the maximum of 2 input numbers.
template<class A, class B>
constexpr auto max(A&& a, B&& b) -> decltype(a < b ? std::forward<A>(a) : std::forward<B>(b)) {
  return a >= b ? std::forward<A>(a) : std::forward<B>(b);
     336:	edd0 7a14 	vldr	s15, [r0, #80]	; 0x50
     33a:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     33e:	eea3 5b04 	vfma.f64	d5, d3, d4
     342:	ee36 3b06 	vadd.f64	d3, d6, d6
     346:	ee83 4b05 	vdiv.f64	d4, d3, d5
     34a:	ee36 6b44 	vsub.f64	d6, d6, d4
     34e:	eeb7 6bc6 	vcvt.f32.f64	s12, d6
	_cn = max(_cn, _cmin); 
     352:	eeb4 6a67 	vcmp.f32	s12, s15
     356:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     35a:	fe66 7a27 	vselge.f32	s15, s12, s15
     35e:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
     362:	e00d      	b.n	380 <AccelStepper::computeNewSpeed()+0xbc>
    else if (distanceTo < 0)
     364:	d120      	bne.n	3a8 <AccelStepper::computeNewSpeed()+0xe4>
    if (_n == 0)
     366:	bb43      	cbnz	r3, 3ba <AccelStepper::computeNewSpeed()+0xf6>
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
     368:	f1bc 0f00 	cmp.w	ip, #0
	_cn = _c0;
     36c:	edd0 7a12 	vldr	s15, [r0, #72]	; 0x48
     370:	f04f 0300 	mov.w	r3, #0
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
     374:	bfd4      	ite	le
     376:	2100      	movle	r1, #0
     378:	2101      	movgt	r1, #1
	_cn = _c0;
     37a:	edc0 7a13 	vstr	s15, [r0, #76]	; 0x4c
	_direction = (distanceTo > 0) ? DIRECTION_CW : DIRECTION_CCW;
     37e:	7101      	strb	r1, [r0, #4]
    _stepInterval = _cn;
     380:	eebc 7ae7 	vcvt.u32.f32	s14, s15
    _n++;
     384:	3301      	adds	r3, #1
    _speed = 1000000.0 / _cn;
     386:	eddf 6a18 	vldr	s13, [pc, #96]	; 3e8 <AccelStepper::computeNewSpeed()+0x124>
    _n++;
     38a:	6443      	str	r3, [r0, #68]	; 0x44
    _stepInterval = _cn;
     38c:	ee17 2a10 	vmov	r2, s14
    _speed = 1000000.0 / _cn;
     390:	ee86 7aa7 	vdiv.f32	s14, s13, s15
    _stepInterval = _cn;
     394:	6082      	str	r2, [r0, #8]
    if (_direction == DIRECTION_CCW)
     396:	b909      	cbnz	r1, 39c <AccelStepper::computeNewSpeed()+0xd8>
	_speed = -_speed;
     398:	eeb1 7a47 	vneg.f32	s14, s14
     39c:	ed80 7a08 	vstr	s14, [r0, #32]
}
     3a0:	4610      	mov	r0, r2
     3a2:	f85d 4b04 	ldr.w	r4, [sp], #4
     3a6:	4770      	bx	lr
	if (_n > 0)
     3a8:	2b00      	cmp	r3, #0
     3aa:	dd11      	ble.n	3d0 <AccelStepper::computeNewSpeed()+0x10c>
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
     3ac:	1b09      	subs	r1, r1, r4
     3ae:	4291      	cmp	r1, r2
     3b0:	dc16      	bgt.n	3e0 <AccelStepper::computeNewSpeed()+0x11c>
		_n = -stepsToStop; // Start deceleration
     3b2:	4253      	negs	r3, r2
     3b4:	6443      	str	r3, [r0, #68]	; 0x44
    if (_n == 0)
     3b6:	2b00      	cmp	r3, #0
     3b8:	d0d6      	beq.n	368 <AccelStepper::computeNewSpeed()+0xa4>
	    if ((stepsToStop >= distanceTo) || _direction == DIRECTION_CCW)
     3ba:	7901      	ldrb	r1, [r0, #4]
     3bc:	e7b1      	b.n	322 <AccelStepper::computeNewSpeed()+0x5e>
	    if ((stepsToStop < distanceTo) && _direction == DIRECTION_CW)
     3be:	4562      	cmp	r2, ip
     3c0:	dad1      	bge.n	366 <AccelStepper::computeNewSpeed()+0xa2>
     3c2:	2b00      	cmp	r3, #0
     3c4:	d0d0      	beq.n	368 <AccelStepper::computeNewSpeed()+0xa4>
     3c6:	7901      	ldrb	r1, [r0, #4]
     3c8:	2900      	cmp	r1, #0
     3ca:	d0aa      	beq.n	322 <AccelStepper::computeNewSpeed()+0x5e>
		_n = -_n; // Start accceleration
     3cc:	425b      	negs	r3, r3
     3ce:	e7a8      	b.n	322 <AccelStepper::computeNewSpeed()+0x5e>
	else if (_n < 0)
     3d0:	d0ca      	beq.n	368 <AccelStepper::computeNewSpeed()+0xa4>
	    if ((stepsToStop < -distanceTo) && _direction == DIRECTION_CCW)
     3d2:	1b09      	subs	r1, r1, r4
     3d4:	4291      	cmp	r1, r2
     3d6:	7901      	ldrb	r1, [r0, #4]
     3d8:	dda3      	ble.n	322 <AccelStepper::computeNewSpeed()+0x5e>
     3da:	2900      	cmp	r1, #0
     3dc:	d1a1      	bne.n	322 <AccelStepper::computeNewSpeed()+0x5e>
     3de:	e7f5      	b.n	3cc <AccelStepper::computeNewSpeed()+0x108>
	    if ((stepsToStop >= -distanceTo) || _direction == DIRECTION_CW)
     3e0:	7901      	ldrb	r1, [r0, #4]
     3e2:	2900      	cmp	r1, #0
     3e4:	d09d      	beq.n	322 <AccelStepper::computeNewSpeed()+0x5e>
     3e6:	e7e4      	b.n	3b2 <AccelStepper::computeNewSpeed()+0xee>
     3e8:	49742400 	.word	0x49742400

000003ec <AccelStepper::step1(long)>:
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
     3ec:	7901      	ldrb	r1, [r0, #4]
     3ee:	6803      	ldr	r3, [r0, #0]
     3f0:	0049      	lsls	r1, r1, #1
     3f2:	695b      	ldr	r3, [r3, #20]
     3f4:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
{
     3f8:	b510      	push	{r4, lr}
     3fa:	4604      	mov	r4, r0
    setOutputPins(_direction ? 0b10 : 0b00); // Set direction first else get rogue pulses
     3fc:	4798      	blx	r3
    setOutputPins(_direction ? 0b11 : 0b01); // step HIGH
     3fe:	7922      	ldrb	r2, [r4, #4]
     400:	4620      	mov	r0, r4
     402:	6823      	ldr	r3, [r4, #0]
     404:	2a00      	cmp	r2, #0
     406:	695b      	ldr	r3, [r3, #20]
     408:	bf14      	ite	ne
     40a:	2103      	movne	r1, #3
     40c:	2101      	moveq	r1, #1
     40e:	4798      	blx	r3
// Wait for a number of microseconds.  During this time, interrupts remain
// active, but the rest of your program becomes effectively stalled.  For shorter
// delay, use delayNanoseconds().
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
     410:	490c      	ldr	r1, [pc, #48]	; (444 <AccelStepper::step1(long)+0x58>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     412:	4a0d      	ldr	r2, [pc, #52]	; (448 <AccelStepper::step1(long)+0x5c>)
     414:	4b0d      	ldr	r3, [pc, #52]	; (44c <AccelStepper::step1(long)+0x60>)
	uint32_t begin = ARM_DWT_CYCCNT;
     416:	6848      	ldr	r0, [r1, #4]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
     418:	6812      	ldr	r2, [r2, #0]
     41a:	fba3 3202 	umull	r3, r2, r3, r2
     41e:	6b63      	ldr	r3, [r4, #52]	; 0x34
     420:	0c92      	lsrs	r2, r2, #18
     422:	fb03 f202 	mul.w	r2, r3, r2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
     426:	684b      	ldr	r3, [r1, #4]
     428:	1a1b      	subs	r3, r3, r0
     42a:	429a      	cmp	r2, r3
     42c:	d8fb      	bhi.n	426 <AccelStepper::step1(long)+0x3a>
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
     42e:	7921      	ldrb	r1, [r4, #4]
     430:	4620      	mov	r0, r4
     432:	6823      	ldr	r3, [r4, #0]
     434:	0049      	lsls	r1, r1, #1
     436:	695b      	ldr	r3, [r3, #20]
     438:	f001 01fe 	and.w	r1, r1, #254	; 0xfe
}
     43c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setOutputPins(_direction ? 0b10 : 0b00); // step LOW
     440:	4718      	bx	r3
     442:	bf00      	nop
     444:	e0001000 	.word	0xe0001000
     448:	20000b0c 	.word	0x20000b0c
     44c:	431bde83 	.word	0x431bde83

00000450 <AccelStepper::step2(long)>:
    switch (step & 0x3)
     450:	f001 0103 	and.w	r1, r1, #3
	    setOutputPins(0b10);
     454:	6803      	ldr	r3, [r0, #0]
    switch (step & 0x3)
     456:	2902      	cmp	r1, #2
     458:	d006      	beq.n	468 <AccelStepper::step2(long)+0x18>
     45a:	2903      	cmp	r1, #3
     45c:	d00a      	beq.n	474 <AccelStepper::step2(long)+0x24>
     45e:	2901      	cmp	r1, #1
     460:	d005      	beq.n	46e <AccelStepper::step2(long)+0x1e>
	    setOutputPins(0b10);
     462:	2102      	movs	r1, #2
     464:	695b      	ldr	r3, [r3, #20]
     466:	4718      	bx	r3
	    setOutputPins(0b01);
     468:	2101      	movs	r1, #1
     46a:	695b      	ldr	r3, [r3, #20]
     46c:	4718      	bx	r3
	    setOutputPins(0b11);
     46e:	2103      	movs	r1, #3
     470:	695b      	ldr	r3, [r3, #20]
     472:	4718      	bx	r3
	    setOutputPins(0b00);
     474:	2100      	movs	r1, #0
     476:	695b      	ldr	r3, [r3, #20]
     478:	4718      	bx	r3
     47a:	bf00      	nop

0000047c <AccelStepper::step3(long)>:
    switch (step % 3)
     47c:	4b0b      	ldr	r3, [pc, #44]	; (4ac <AccelStepper::step3(long)+0x30>)
{
     47e:	4602      	mov	r2, r0
    switch (step % 3)
     480:	fb83 c301 	smull	ip, r3, r3, r1
     484:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
     488:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     48c:	1acb      	subs	r3, r1, r3
     48e:	2b01      	cmp	r3, #1
     490:	d003      	beq.n	49a <AccelStepper::step3(long)+0x1e>
     492:	2b02      	cmp	r3, #2
     494:	d001      	beq.n	49a <AccelStepper::step3(long)+0x1e>
     496:	b123      	cbz	r3, 4a2 <AccelStepper::step3(long)+0x26>
}
     498:	4770      	bx	lr
	    setOutputPins(0b010);
     49a:	6812      	ldr	r2, [r2, #0]
     49c:	4619      	mov	r1, r3
     49e:	6953      	ldr	r3, [r2, #20]
     4a0:	4718      	bx	r3
	    setOutputPins(0b100);
     4a2:	6803      	ldr	r3, [r0, #0]
     4a4:	2104      	movs	r1, #4
     4a6:	695b      	ldr	r3, [r3, #20]
     4a8:	4718      	bx	r3
     4aa:	bf00      	nop
     4ac:	55555556 	.word	0x55555556

000004b0 <AccelStepper::step4(long)>:
    switch (step & 0x3)
     4b0:	f001 0103 	and.w	r1, r1, #3
	    setOutputPins(0b0101);
     4b4:	6803      	ldr	r3, [r0, #0]
    switch (step & 0x3)
     4b6:	2902      	cmp	r1, #2
     4b8:	d006      	beq.n	4c8 <AccelStepper::step4(long)+0x18>
     4ba:	2903      	cmp	r1, #3
     4bc:	d00a      	beq.n	4d4 <AccelStepper::step4(long)+0x24>
     4be:	2901      	cmp	r1, #1
     4c0:	d005      	beq.n	4ce <AccelStepper::step4(long)+0x1e>
	    setOutputPins(0b0101);
     4c2:	2105      	movs	r1, #5
     4c4:	695b      	ldr	r3, [r3, #20]
     4c6:	4718      	bx	r3
	    setOutputPins(0b1010);
     4c8:	210a      	movs	r1, #10
     4ca:	695b      	ldr	r3, [r3, #20]
     4cc:	4718      	bx	r3
	    setOutputPins(0b0110);
     4ce:	2106      	movs	r1, #6
     4d0:	695b      	ldr	r3, [r3, #20]
     4d2:	4718      	bx	r3
	    setOutputPins(0b1001);
     4d4:	2109      	movs	r1, #9
     4d6:	695b      	ldr	r3, [r3, #20]
     4d8:	4718      	bx	r3
     4da:	bf00      	nop

000004dc <AccelStepper::step6(long)>:
    switch (step % 6)
     4dc:	4b14      	ldr	r3, [pc, #80]	; (530 <AccelStepper::step6(long)+0x54>)
     4de:	fb83 2301 	smull	r2, r3, r3, r1
     4e2:	eba3 73e1 	sub.w	r3, r3, r1, asr #31
     4e6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
     4ea:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
     4ee:	2905      	cmp	r1, #5
     4f0:	d81c      	bhi.n	52c <AccelStepper::step6(long)+0x50>
     4f2:	e8df f001 	tbb	[pc, r1]
     4f6:	0b07      	.short	0x0b07
     4f8:	0317130f 	.word	0x0317130f
	    setOutputPins(0b110);
     4fc:	6803      	ldr	r3, [r0, #0]
     4fe:	2106      	movs	r1, #6
     500:	695b      	ldr	r3, [r3, #20]
     502:	4718      	bx	r3
	    setOutputPins(0b100);
     504:	6803      	ldr	r3, [r0, #0]
     506:	2104      	movs	r1, #4
     508:	695b      	ldr	r3, [r3, #20]
     50a:	4718      	bx	r3
	    setOutputPins(0b101);
     50c:	6803      	ldr	r3, [r0, #0]
     50e:	2105      	movs	r1, #5
     510:	695b      	ldr	r3, [r3, #20]
     512:	4718      	bx	r3
	    setOutputPins(0b001);
     514:	6803      	ldr	r3, [r0, #0]
     516:	2101      	movs	r1, #1
     518:	695b      	ldr	r3, [r3, #20]
     51a:	4718      	bx	r3
	    setOutputPins(0b011);
     51c:	6803      	ldr	r3, [r0, #0]
     51e:	2103      	movs	r1, #3
     520:	695b      	ldr	r3, [r3, #20]
     522:	4718      	bx	r3
	    setOutputPins(0b010);
     524:	6803      	ldr	r3, [r0, #0]
     526:	2102      	movs	r1, #2
     528:	695b      	ldr	r3, [r3, #20]
     52a:	4718      	bx	r3
}
     52c:	4770      	bx	lr
     52e:	bf00      	nop
     530:	2aaaaaab 	.word	0x2aaaaaab

00000534 <AccelStepper::step8(long)>:
    switch (step & 0x7)
     534:	f001 0107 	and.w	r1, r1, #7
     538:	3901      	subs	r1, #1
     53a:	2906      	cmp	r1, #6
     53c:	d821      	bhi.n	582 <AccelStepper::step8(long)+0x4e>
     53e:	e8df f001 	tbb	[pc, r1]
     542:	0c08      	.short	0x0c08
     544:	1c181410 	.word	0x1c181410
     548:	04          	.byte	0x04
     549:	00          	.byte	0x00
	    setOutputPins(0b1001);
     54a:	6803      	ldr	r3, [r0, #0]
     54c:	2109      	movs	r1, #9
     54e:	695b      	ldr	r3, [r3, #20]
     550:	4718      	bx	r3
	    setOutputPins(0b0101);
     552:	6803      	ldr	r3, [r0, #0]
     554:	2105      	movs	r1, #5
     556:	695b      	ldr	r3, [r3, #20]
     558:	4718      	bx	r3
	    setOutputPins(0b0100);
     55a:	6803      	ldr	r3, [r0, #0]
     55c:	2104      	movs	r1, #4
     55e:	695b      	ldr	r3, [r3, #20]
     560:	4718      	bx	r3
	    setOutputPins(0b0110);
     562:	6803      	ldr	r3, [r0, #0]
     564:	2106      	movs	r1, #6
     566:	695b      	ldr	r3, [r3, #20]
     568:	4718      	bx	r3
	    setOutputPins(0b0010);
     56a:	6803      	ldr	r3, [r0, #0]
     56c:	2102      	movs	r1, #2
     56e:	695b      	ldr	r3, [r3, #20]
     570:	4718      	bx	r3
	    setOutputPins(0b1010);
     572:	6803      	ldr	r3, [r0, #0]
     574:	210a      	movs	r1, #10
     576:	695b      	ldr	r3, [r3, #20]
     578:	4718      	bx	r3
	    setOutputPins(0b1000);
     57a:	6803      	ldr	r3, [r0, #0]
     57c:	2108      	movs	r1, #8
     57e:	695b      	ldr	r3, [r3, #20]
     580:	4718      	bx	r3
	    setOutputPins(0b0001);
     582:	6803      	ldr	r3, [r0, #0]
     584:	2101      	movs	r1, #1
     586:	695b      	ldr	r3, [r3, #20]
     588:	4718      	bx	r3
     58a:	bf00      	nop

0000058c <AccelStepper::setOutputPins(unsigned char)>:
{
     58c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
     58e:	7b06      	ldrb	r6, [r0, #12]
{
     590:	460f      	mov	r7, r1
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
     592:	2e04      	cmp	r6, #4
     594:	d01b      	beq.n	5ce <AccelStepper::setOutputPins(unsigned char)+0x42>
     596:	2e08      	cmp	r6, #8
     598:	d019      	beq.n	5ce <AccelStepper::setOutputPins(unsigned char)+0x42>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
     59a:	2e06      	cmp	r6, #6
     59c:	bf18      	it	ne
     59e:	2e03      	cmpne	r6, #3
     5a0:	bf0c      	ite	eq
     5a2:	2601      	moveq	r6, #1
     5a4:	2600      	movne	r6, #0
     5a6:	3602      	adds	r6, #2
    for (i = 0; i < numpins; i++)
     5a8:	f100 040c 	add.w	r4, r0, #12
	digitalWrite(_pin[i], (mask & (1 << i)) ? (HIGH ^ _pinInverted[i]) : (LOW ^ _pinInverted[i]));
     5ac:	2500      	movs	r5, #0
     5ae:	fa47 f305 	asr.w	r3, r7, r5
     5b2:	f814 0f01 	ldrb.w	r0, [r4, #1]!
    for (i = 0; i < numpins; i++)
     5b6:	3501      	adds	r5, #1
	digitalWrite(_pin[i], (mask & (1 << i)) ? (HIGH ^ _pinInverted[i]) : (LOW ^ _pinInverted[i]));
     5b8:	07db      	lsls	r3, r3, #31
     5ba:	7921      	ldrb	r1, [r4, #4]
     5bc:	bf48      	it	mi
     5be:	f081 0101 	eormi.w	r1, r1, #1
     5c2:	f000 fc8f 	bl	ee4 <digitalWrite>
    for (i = 0; i < numpins; i++)
     5c6:	b2eb      	uxtb	r3, r5
     5c8:	429e      	cmp	r6, r3
     5ca:	d8f0      	bhi.n	5ae <AccelStepper::setOutputPins(unsigned char)+0x22>
}
     5cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	numpins = 4;
     5ce:	2604      	movs	r6, #4
     5d0:	e7ea      	b.n	5a8 <AccelStepper::setOutputPins(unsigned char)+0x1c>
     5d2:	bf00      	nop

000005d4 <AccelStepper::step0(long)>:
    if (_speed > 0)
     5d4:	edd0 7a08 	vldr	s15, [r0, #32]
     5d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     5dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     5e0:	dd01      	ble.n	5e6 <AccelStepper::step0(long)+0x12>
	_forward();
     5e2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     5e4:	4718      	bx	r3
	_backward();
     5e6:	6c03      	ldr	r3, [r0, #64]	; 0x40
     5e8:	4718      	bx	r3
     5ea:	bf00      	nop

000005ec <AccelStepper::disableOutputs()>:
    if (! _interface) return;
     5ec:	7b03      	ldrb	r3, [r0, #12]
     5ee:	b1ab      	cbz	r3, 61c <AccelStepper::disableOutputs()+0x30>
    setOutputPins(0); // Handles inversion automatically
     5f0:	6803      	ldr	r3, [r0, #0]
     5f2:	2100      	movs	r1, #0
{   
     5f4:	b510      	push	{r4, lr}
     5f6:	4604      	mov	r4, r0
    setOutputPins(0); // Handles inversion automatically
     5f8:	695b      	ldr	r3, [r3, #20]
     5fa:	4798      	blx	r3
    if (_enablePin != 0xff)
     5fc:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
     600:	28ff      	cmp	r0, #255	; 0xff
     602:	d100      	bne.n	606 <AccelStepper::disableOutputs()+0x1a>
}
     604:	bd10      	pop	{r4, pc}
        pinMode(_enablePin, OUTPUT);
     606:	2101      	movs	r1, #1
     608:	f000 fc96 	bl	f38 <pinMode>
        digitalWrite(_enablePin, LOW ^ _enableInverted);
     60c:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
     610:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
}
     614:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, LOW ^ _enableInverted);
     618:	f000 bc64 	b.w	ee4 <digitalWrite>
     61c:	4770      	bx	lr
     61e:	bf00      	nop

00000620 <AccelStepper::enableOutputs() [clone .part.0]>:
void    AccelStepper::enableOutputs()
     620:	b510      	push	{r4, lr}
     622:	4604      	mov	r4, r0
    pinMode(_pin[0], OUTPUT);
     624:	2101      	movs	r1, #1
     626:	7b40      	ldrb	r0, [r0, #13]
     628:	f000 fc86 	bl	f38 <pinMode>
    pinMode(_pin[1], OUTPUT);
     62c:	2101      	movs	r1, #1
     62e:	7ba0      	ldrb	r0, [r4, #14]
     630:	f000 fc82 	bl	f38 <pinMode>
    if (_interface == FULL4WIRE || _interface == HALF4WIRE)
     634:	7b23      	ldrb	r3, [r4, #12]
     636:	2b04      	cmp	r3, #4
     638:	d01f      	beq.n	67a <AccelStepper::enableOutputs() [clone .part.0]+0x5a>
     63a:	2b08      	cmp	r3, #8
     63c:	d01d      	beq.n	67a <AccelStepper::enableOutputs() [clone .part.0]+0x5a>
    else if (_interface == FULL3WIRE || _interface == HALF3WIRE)
     63e:	2b03      	cmp	r3, #3
     640:	d006      	beq.n	650 <AccelStepper::enableOutputs() [clone .part.0]+0x30>
     642:	2b06      	cmp	r3, #6
     644:	d004      	beq.n	650 <AccelStepper::enableOutputs() [clone .part.0]+0x30>
    if (_enablePin != 0xff)
     646:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
     64a:	28ff      	cmp	r0, #255	; 0xff
     64c:	d108      	bne.n	660 <AccelStepper::enableOutputs() [clone .part.0]+0x40>
}
     64e:	bd10      	pop	{r4, pc}
        pinMode(_pin[2], OUTPUT);
     650:	7be0      	ldrb	r0, [r4, #15]
     652:	2101      	movs	r1, #1
     654:	f000 fc70 	bl	f38 <pinMode>
    if (_enablePin != 0xff)
     658:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
     65c:	28ff      	cmp	r0, #255	; 0xff
     65e:	d0f6      	beq.n	64e <AccelStepper::enableOutputs() [clone .part.0]+0x2e>
        pinMode(_enablePin, OUTPUT);
     660:	2101      	movs	r1, #1
     662:	f000 fc69 	bl	f38 <pinMode>
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
     666:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
     66a:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
     66e:	f081 0101 	eor.w	r1, r1, #1
}
     672:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        digitalWrite(_enablePin, HIGH ^ _enableInverted);
     676:	f000 bc35 	b.w	ee4 <digitalWrite>
        pinMode(_pin[2], OUTPUT);
     67a:	7be0      	ldrb	r0, [r4, #15]
     67c:	2101      	movs	r1, #1
     67e:	f000 fc5b 	bl	f38 <pinMode>
        pinMode(_pin[3], OUTPUT);
     682:	2101      	movs	r1, #1
     684:	7c20      	ldrb	r0, [r4, #16]
     686:	f000 fc57 	bl	f38 <pinMode>
     68a:	e7dc      	b.n	646 <AccelStepper::enableOutputs() [clone .part.0]+0x26>

0000068c <AccelStepper::enableOutputs()>:
    if (! _interface) 
     68c:	7b03      	ldrb	r3, [r0, #12]
     68e:	b903      	cbnz	r3, 692 <AccelStepper::enableOutputs()+0x6>
}
     690:	4770      	bx	lr
     692:	f7ff bfc5 	b.w	620 <AccelStepper::enableOutputs() [clone .part.0]>
     696:	bf00      	nop

00000698 <AccelStepper::step(long)>:
    switch (_interface)
     698:	7b03      	ldrb	r3, [r0, #12]
     69a:	2b08      	cmp	r3, #8
     69c:	d809      	bhi.n	6b2 <AccelStepper::step(long)+0x1a>
     69e:	e8df f003 	tbb	[pc, r3]
     6a2:	1709      	.short	0x1709
     6a4:	08201d1a 	.word	0x08201d1a
     6a8:	0823      	.short	0x0823
     6aa:	05          	.byte	0x05
     6ab:	00          	.byte	0x00
	    step8(step);
     6ac:	6803      	ldr	r3, [r0, #0]
     6ae:	6b5b      	ldr	r3, [r3, #52]	; 0x34
     6b0:	4718      	bx	r3
}
     6b2:	4770      	bx	lr
            step0(step);
     6b4:	6803      	ldr	r3, [r0, #0]
     6b6:	4a0f      	ldr	r2, [pc, #60]	; (6f4 <AccelStepper::step(long)+0x5c>)
     6b8:	69db      	ldr	r3, [r3, #28]
     6ba:	4293      	cmp	r3, r2
     6bc:	d1f8      	bne.n	6b0 <AccelStepper::step(long)+0x18>
    if (_speed > 0)
     6be:	edd0 7a08 	vldr	s15, [r0, #32]
     6c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
     6c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     6ca:	dd10      	ble.n	6ee <AccelStepper::step(long)+0x56>
	_forward();
     6cc:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
     6ce:	4718      	bx	r3
	    step1(step);
     6d0:	6803      	ldr	r3, [r0, #0]
     6d2:	6a1b      	ldr	r3, [r3, #32]
     6d4:	4718      	bx	r3
	    step2(step);
     6d6:	6803      	ldr	r3, [r0, #0]
     6d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
     6da:	4718      	bx	r3
	    step3(step);
     6dc:	6803      	ldr	r3, [r0, #0]
     6de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
     6e0:	4718      	bx	r3
	    step4(step);
     6e2:	6803      	ldr	r3, [r0, #0]
     6e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
     6e6:	4718      	bx	r3
	    step6(step);
     6e8:	6803      	ldr	r3, [r0, #0]
     6ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
     6ec:	4718      	bx	r3
	_backward();
     6ee:	6c03      	ldr	r3, [r0, #64]	; 0x40
     6f0:	4718      	bx	r3
     6f2:	bf00      	nop
     6f4:	000005d5 	.word	0x000005d5

000006f8 <AccelStepper::moveTo(long)>:
    if (_targetPos != absolute)
     6f8:	69c2      	ldr	r2, [r0, #28]
     6fa:	428a      	cmp	r2, r1
     6fc:	d003      	beq.n	706 <AccelStepper::moveTo(long)+0xe>
	computeNewSpeed();
     6fe:	6802      	ldr	r2, [r0, #0]
	_targetPos = absolute;
     700:	61c1      	str	r1, [r0, #28]
	computeNewSpeed();
     702:	6913      	ldr	r3, [r2, #16]
     704:	4718      	bx	r3
}
     706:	4770      	bx	lr

00000708 <AccelStepper::runSpeed()>:
{
     708:	b538      	push	{r3, r4, r5, lr}
    if (!_stepInterval)
     70a:	6883      	ldr	r3, [r0, #8]
     70c:	b90b      	cbnz	r3, 712 <AccelStepper::runSpeed()+0xa>
	return false;
     70e:	2000      	movs	r0, #0
}
     710:	bd38      	pop	{r3, r4, r5, pc}
     712:	4604      	mov	r4, r0
    unsigned long time = micros();   
     714:	f000 fbbc 	bl	e90 <micros>
     718:	4605      	mov	r5, r0
    if (time - _lastStepTime >= _stepInterval)
     71a:	6b23      	ldr	r3, [r4, #48]	; 0x30
     71c:	68a2      	ldr	r2, [r4, #8]
     71e:	1ac3      	subs	r3, r0, r3
     720:	4293      	cmp	r3, r2
     722:	d3f4      	bcc.n	70e <AccelStepper::runSpeed()+0x6>
	if (_direction == DIRECTION_CW)
     724:	7923      	ldrb	r3, [r4, #4]
	    _currentPos += 1;
     726:	69a1      	ldr	r1, [r4, #24]
	if (_direction == DIRECTION_CW)
     728:	b943      	cbnz	r3, 73c <AccelStepper::runSpeed()+0x34>
	    _currentPos -= 1;
     72a:	3901      	subs	r1, #1
	step(_currentPos);
     72c:	6823      	ldr	r3, [r4, #0]
     72e:	4620      	mov	r0, r4
     730:	61a1      	str	r1, [r4, #24]
     732:	699b      	ldr	r3, [r3, #24]
     734:	4798      	blx	r3
	return true;
     736:	2001      	movs	r0, #1
	_lastStepTime = time; // Caution: does not account for costs in step()
     738:	6325      	str	r5, [r4, #48]	; 0x30
}
     73a:	bd38      	pop	{r3, r4, r5, pc}
	    _currentPos += 1;
     73c:	3101      	adds	r1, #1
     73e:	e7f5      	b.n	72c <AccelStepper::runSpeed()+0x24>

00000740 <AccelStepper::distanceToGo()>:
    return _targetPos - _currentPos;
     740:	e9d0 0206 	ldrd	r0, r2, [r0, #24]
}
     744:	1a10      	subs	r0, r2, r0
     746:	4770      	bx	lr

00000748 <AccelStepper::currentPosition()>:
}
     748:	6980      	ldr	r0, [r0, #24]
     74a:	4770      	bx	lr

0000074c <AccelStepper::setMaxSpeed(float)>:
    if (speed < 0.0)
     74c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    if (_maxSpeed != speed)
     750:	edd0 7a09 	vldr	s15, [r0, #36]	; 0x24
    if (speed < 0.0)
     754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
       speed = -speed;
     758:	bf48      	it	mi
     75a:	eeb1 0a40 	vnegmi.f32	s0, s0
    if (_maxSpeed != speed)
     75e:	eef4 7a40 	vcmp.f32	s15, s0
     762:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     766:	d01f      	beq.n	7a8 <AccelStepper::setMaxSpeed(float)+0x5c>
	_cmin = 1000000.0 / speed;
     768:	ed9f 7a10 	vldr	s14, [pc, #64]	; 7ac <AccelStepper::setMaxSpeed(float)+0x60>
	if (_n > 0)
     76c:	6c43      	ldr	r3, [r0, #68]	; 0x44
	_cmin = 1000000.0 / speed;
     76e:	eec7 7a00 	vdiv.f32	s15, s14, s0
	_maxSpeed = speed;
     772:	ed80 0a09 	vstr	s0, [r0, #36]	; 0x24
	if (_n > 0)
     776:	2b00      	cmp	r3, #0
	_cmin = 1000000.0 / speed;
     778:	edc0 7a14 	vstr	s15, [r0, #80]	; 0x50
	if (_n > 0)
     77c:	dd14      	ble.n	7a8 <AccelStepper::setMaxSpeed(float)+0x5c>
	    _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
     77e:	ed90 6a08 	vldr	s12, [r0, #32]
     782:	ed90 7a0a 	vldr	s14, [r0, #40]	; 0x28
     786:	ee26 6a06 	vmul.f32	s12, s12, s12
	    computeNewSpeed();
     78a:	6803      	ldr	r3, [r0, #0]
	    _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
     78c:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
	    computeNewSpeed();
     790:	691b      	ldr	r3, [r3, #16]
	    _n = (long)((_speed * _speed) / (2.0 * _acceleration)); // Equation 16
     792:	eeb7 6ac6 	vcvt.f64.f32	d6, s12
     796:	ee37 7b07 	vadd.f64	d7, d7, d7
     79a:	ee86 5b07 	vdiv.f64	d5, d6, d7
     79e:	eebd 5bc5 	vcvt.s32.f64	s10, d5
     7a2:	ed80 5a11 	vstr	s10, [r0, #68]	; 0x44
	    computeNewSpeed();
     7a6:	4718      	bx	r3
}
     7a8:	4770      	bx	lr
     7aa:	bf00      	nop
     7ac:	49742400 	.word	0x49742400

000007b0 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)>:
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
     7b0:	b510      	push	{r4, lr}
     7b2:	ed2d 8b02 	vpush	{d8}
    _pin[1] = pin2;
     7b6:	7383      	strb	r3, [r0, #14]
    _stepInterval = 0;
     7b8:	2300      	movs	r3, #0
    _pin[0] = pin1;
     7ba:	7342      	strb	r2, [r0, #13]
    _speed = 0.0;
     7bc:	2200      	movs	r2, #0
    _stepInterval = 0;
     7be:	6083      	str	r3, [r0, #8]
    _sqrt_twoa = 1.0;
     7c0:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
    _lastStepTime = 0;
     7c4:	6303      	str	r3, [r0, #48]	; 0x30
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
     7c6:	4604      	mov	r4, r0
    _n = 0;
     7c8:	6443      	str	r3, [r0, #68]	; 0x44
    _direction = DIRECTION_CCW;
     7ca:	7103      	strb	r3, [r0, #4]
	_pinInverted[i] = 0;
     7cc:	7443      	strb	r3, [r0, #17]
     7ce:	8243      	strh	r3, [r0, #18]
     7d0:	7503      	strb	r3, [r0, #20]
    _speed = 0.0;
     7d2:	6202      	str	r2, [r0, #32]
    _maxSpeed = 0.0;
     7d4:	6242      	str	r2, [r0, #36]	; 0x24
    _acceleration = 0.0;
     7d6:	6282      	str	r2, [r0, #40]	; 0x28
    _c0 = 0.0;
     7d8:	6482      	str	r2, [r0, #72]	; 0x48
    _cn = 0.0;
     7da:	64c2      	str	r2, [r0, #76]	; 0x4c
    _minPulseWidth = 1;
     7dc:	2201      	movs	r2, #1
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
     7de:	f89d c018 	ldrb.w	ip, [sp, #24]
    _interface = interface;
     7e2:	7301      	strb	r1, [r0, #12]
    _sqrt_twoa = 1.0;
     7e4:	ed80 8a0b 	vstr	s16, [r0, #44]	; 0x2c
    _cmin = 1.0;
     7e8:	ed80 8a14 	vstr	s16, [r0, #80]	; 0x50
    _minPulseWidth = 1;
     7ec:	6342      	str	r2, [r0, #52]	; 0x34
    _targetPos = 0;
     7ee:	e9c0 3306 	strd	r3, r3, [r0, #24]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
     7f2:	f89d 3010 	ldrb.w	r3, [sp, #16]
    _pin[2] = pin3;
     7f6:	73c3      	strb	r3, [r0, #15]
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
     7f8:	f89d 3014 	ldrb.w	r3, [sp, #20]
    _pin[3] = pin4;
     7fc:	7403      	strb	r3, [r0, #16]
    _enableInverted = false;
     7fe:	f44f 437f 	mov.w	r3, #65280	; 0xff00
     802:	8703      	strh	r3, [r0, #56]	; 0x38
AccelStepper::AccelStepper(uint8_t interface, uint8_t pin1, uint8_t pin2, uint8_t pin3, uint8_t pin4, bool enable)
     804:	4b15      	ldr	r3, [pc, #84]	; (85c <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xac>)
     806:	6003      	str	r3, [r0, #0]
    if (! _interface) 
     808:	b109      	cbz	r1, 80e <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x5e>
     80a:	4594      	cmp	ip, r2
     80c:	d012      	beq.n	834 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x84>
     80e:	2300      	movs	r3, #0
	_acceleration = acceleration;
     810:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     814:	4912      	ldr	r1, [pc, #72]	; (860 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0xb0>)
	computeNewSpeed();
     816:	4620      	mov	r0, r4
	_n = _n * (_acceleration / acceleration);
     818:	6463      	str	r3, [r4, #68]	; 0x44
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     81a:	64a1      	str	r1, [r4, #72]	; 0x48
	_acceleration = acceleration;
     81c:	62a2      	str	r2, [r4, #40]	; 0x28
	computeNewSpeed();
     81e:	f7ff fd51 	bl	2c4 <AccelStepper::computeNewSpeed()>
    setMaxSpeed(1);
     822:	4620      	mov	r0, r4
     824:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
     828:	f7ff ff90 	bl	74c <AccelStepper::setMaxSpeed(float)>
}
     82c:	4620      	mov	r0, r4
     82e:	ecbd 8b02 	vpop	{d8}
     832:	bd10      	pop	{r4, pc}
     834:	f7ff fef4 	bl	620 <AccelStepper::enableOutputs() [clone .part.0]>
    if (_acceleration != acceleration)
     838:	edd4 7a0a 	vldr	s15, [r4, #40]	; 0x28
     83c:	eef4 7a48 	vcmp.f32	s15, s16
     840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     844:	d0ed      	beq.n	822 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x72>
	_n = _n * (_acceleration / acceleration);
     846:	ed94 7a11 	vldr	s14, [r4, #68]	; 0x44
     84a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
     84e:	ee67 7a27 	vmul.f32	s15, s14, s15
     852:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     856:	ee17 3a90 	vmov	r3, s15
     85a:	e7d9      	b.n	810 <AccelStepper::AccelStepper(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, bool)+0x60>
     85c:	20000288 	.word	0x20000288
     860:	49696686 	.word	0x49696686

00000864 <AccelStepper::maxSpeed()>:
}
     864:	ed90 0a09 	vldr	s0, [r0, #36]	; 0x24
     868:	4770      	bx	lr
     86a:	bf00      	nop
     86c:	0000      	movs	r0, r0
	...

00000870 <AccelStepper::setAcceleration(float)>:
    if (acceleration == 0.0)
     870:	eeb5 0a40 	vcmp.f32	s0, #0.0
     874:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     878:	d047      	beq.n	90a <AccelStepper::setAcceleration(float)+0x9a>
    if (acceleration < 0.0)
     87a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
    if (_acceleration != acceleration)
     87e:	edd0 7a0a 	vldr	s15, [r0, #40]	; 0x28
{
     882:	b500      	push	{lr}
    if (acceleration < 0.0)
     884:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
     888:	ed2d 8b02 	vpush	{d8}
     88c:	eeb0 8a40 	vmov.f32	s16, s0
     890:	b083      	sub	sp, #12
      acceleration = -acceleration;
     892:	bf48      	it	mi
     894:	eeb1 8a40 	vnegmi.f32	s16, s0
    if (_acceleration != acceleration)
     898:	eef4 7a48 	vcmp.f32	s15, s16
     89c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     8a0:	d104      	bne.n	8ac <AccelStepper::setAcceleration(float)+0x3c>
}
     8a2:	b003      	add	sp, #12
     8a4:	ecbd 8b02 	vpop	{d8}
     8a8:	f85d fb04 	ldr.w	pc, [sp], #4
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     8ac:	eeb7 6ac8 	vcvt.f64.f32	d6, s16
     8b0:	eeb0 5b00 	vmov.f64	d5, #0	; 0x40000000  2.0
	_n = _n * (_acceleration / acceleration);
     8b4:	ee87 7a88 	vdiv.f32	s14, s15, s16
     8b8:	edd0 7a11 	vldr	s15, [r0, #68]	; 0x44
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     8bc:	ee85 0b06 	vdiv.f64	d0, d5, d6
	_n = _n * (_acceleration / acceleration);
     8c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     8c4:	ee67 7a87 	vmul.f32	s15, s15, s14
     8c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
     8cc:	edc0 7a11 	vstr	s15, [r0, #68]	; 0x44
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     8d0:	eeb5 0b40 	vcmp.f64	d0, #0.0
     8d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     8d8:	d418      	bmi.n	90c <AccelStepper::setAcceleration(float)+0x9c>
     8da:	eeb1 7bc0 	vsqrt.f64	d7, d0
	computeNewSpeed();
     8de:	6803      	ldr	r3, [r0, #0]
	_acceleration = acceleration;
     8e0:	ed80 8a0a 	vstr	s16, [r0, #40]	; 0x28
	computeNewSpeed();
     8e4:	691b      	ldr	r3, [r3, #16]
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     8e6:	ed9f 5b0e 	vldr	d5, [pc, #56]	; 920 <AccelStepper::setAcceleration(float)+0xb0>
     8ea:	ed9f 6b0f 	vldr	d6, [pc, #60]	; 928 <AccelStepper::setAcceleration(float)+0xb8>
     8ee:	ee27 7b05 	vmul.f64	d7, d7, d5
     8f2:	ee27 7b06 	vmul.f64	d7, d7, d6
     8f6:	eeb7 7bc7 	vcvt.f32.f64	s14, d7
     8fa:	ed80 7a12 	vstr	s14, [r0, #72]	; 0x48
}
     8fe:	b003      	add	sp, #12
     900:	ecbd 8b02 	vpop	{d8}
     904:	f85d eb04 	ldr.w	lr, [sp], #4
	computeNewSpeed();
     908:	4718      	bx	r3
     90a:	4770      	bx	lr
     90c:	9001      	str	r0, [sp, #4]
	_c0 = 0.676 * sqrt(2.0 / acceleration) * 1000000.0; // Equation 15
     90e:	f001 fca3 	bl	2258 <sqrt>
     912:	9801      	ldr	r0, [sp, #4]
     914:	eeb0 7b40 	vmov.f64	d7, d0
     918:	e7e1      	b.n	8de <AccelStepper::setAcceleration(float)+0x6e>
     91a:	bf00      	nop
     91c:	f3af 8000 	nop.w
     920:	c083126f 	.word	0xc083126f
     924:	3fe5a1ca 	.word	0x3fe5a1ca
     928:	00000000 	.word	0x00000000
     92c:	412e8480 	.word	0x412e8480

00000930 <AccelStepper::setSpeed(float)>:
    if (speed == _speed)
     930:	edd0 7a08 	vldr	s15, [r0, #32]
     934:	eef4 7a40 	vcmp.f32	s15, s0
     938:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     93c:	d023      	beq.n	986 <AccelStepper::setSpeed(float)+0x56>
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
     93e:	ed90 7a09 	vldr	s14, [r0, #36]	; 0x24
     942:	eef1 7a47 	vneg.f32	s15, s14
     946:	eeb4 0ae7 	vcmpe.f32	s0, s15
     94a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     94e:	d51e      	bpl.n	98e <AccelStepper::setSpeed(float)+0x5e>
    if (speed == 0.0)
     950:	eef5 7a40 	vcmp.f32	s15, #0.0
     954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     958:	d016      	beq.n	988 <AccelStepper::setSpeed(float)+0x58>
	_stepInterval = fabs(1000000.0 / speed);
     95a:	eeb7 5ae7 	vcvt.f64.f32	d5, s15
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
     95e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
	_stepInterval = fabs(1000000.0 / speed);
     962:	ed9f 4b13 	vldr	d4, [pc, #76]	; 9b0 <AccelStepper::setSpeed(float)+0x80>
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
     966:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	_stepInterval = fabs(1000000.0 / speed);
     96a:	ee84 6b05 	vdiv.f64	d6, d4, d5
	_direction = (speed > 0.0) ? DIRECTION_CW : DIRECTION_CCW;
     96e:	bfcc      	ite	gt
     970:	2301      	movgt	r3, #1
     972:	2300      	movle	r3, #0
     974:	7103      	strb	r3, [r0, #4]
	_stepInterval = fabs(1000000.0 / speed);
     976:	eeb0 6bc6 	vabs.f64	d6, d6
     97a:	eebc 6bc6 	vcvt.u32.f64	s12, d6
     97e:	ed80 6a02 	vstr	s12, [r0, #8]
    _speed = speed;
     982:	edc0 7a08 	vstr	s15, [r0, #32]
}
     986:	4770      	bx	lr
	_stepInterval = 0;
     988:	2300      	movs	r3, #0
     98a:	6083      	str	r3, [r0, #8]
     98c:	e7f9      	b.n	982 <AccelStepper::setSpeed(float)+0x52>
    speed = constrain(speed, -_maxSpeed, _maxSpeed);
     98e:	eeb4 7ac0 	vcmpe.f32	s14, s0
     992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     996:	bf54      	ite	pl
     998:	eef0 7a40 	vmovpl.f32	s15, s0
     99c:	eef0 7a47 	vmovmi.f32	s15, s14
    if (speed == 0.0)
     9a0:	eef5 7a40 	vcmp.f32	s15, #0.0
     9a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     9a8:	d1d7      	bne.n	95a <AccelStepper::setSpeed(float)+0x2a>
     9aa:	e7ed      	b.n	988 <AccelStepper::setSpeed(float)+0x58>
     9ac:	f3af 8000 	nop.w
     9b0:	00000000 	.word	0x00000000
     9b4:	412e8480 	.word	0x412e8480

000009b8 <MultiStepper::MultiStepper()>:
    : _num_steppers(0)
     9b8:	2200      	movs	r2, #0
     9ba:	f880 2028 	strb.w	r2, [r0, #40]	; 0x28
}
     9be:	4770      	bx	lr

000009c0 <MultiStepper::addStepper(AccelStepper&)>:
    if (_num_steppers >= MULTISTEPPER_MAX_STEPPERS)
     9c0:	f890 2028 	ldrb.w	r2, [r0, #40]	; 0x28
{
     9c4:	4603      	mov	r3, r0
    if (_num_steppers >= MULTISTEPPER_MAX_STEPPERS)
     9c6:	2a09      	cmp	r2, #9
     9c8:	d807      	bhi.n	9da <MultiStepper::addStepper(AccelStepper&)+0x1a>
    _steppers[_num_steppers++] = &stepper;
     9ca:	f102 0c01 	add.w	ip, r2, #1
    return true;
     9ce:	2001      	movs	r0, #1
    _steppers[_num_steppers++] = &stepper;
     9d0:	f883 c028 	strb.w	ip, [r3, #40]	; 0x28
     9d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return true;
     9d8:	4770      	bx	lr
	return false; // No room for more
     9da:	2000      	movs	r0, #0
}
     9dc:	4770      	bx	lr
     9de:	bf00      	nop

000009e0 <MultiStepper::moveTo(long*)>:
    for (i = 0; i < _num_steppers; i++)
     9e0:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     9e4:	2b00      	cmp	r3, #0
     9e6:	d062      	beq.n	aae <MultiStepper::moveTo(long*)+0xce>
{
     9e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    for (i = 0; i < _num_steppers; i++)
     9ec:	f04f 0800 	mov.w	r8, #0
     9f0:	4605      	mov	r5, r0
     9f2:	460f      	mov	r7, r1
     9f4:	4646      	mov	r6, r8
{
     9f6:	ed2d 8b02 	vpush	{d8}
    float longestTime = 0.0;
     9fa:	ed9f 8a2d 	vldr	s16, [pc, #180]	; ab0 <MultiStepper::moveTo(long*)+0xd0>
{
     9fe:	b082      	sub	sp, #8
	long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a00:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
    for (i = 0; i < _num_steppers; i++)
     a04:	f108 0801 	add.w	r8, r8, #1
	long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a08:	f857 4026 	ldr.w	r4, [r7, r6, lsl #2]
     a0c:	f7ff fe9c 	bl	748 <AccelStepper::currentPosition()>
     a10:	4603      	mov	r3, r0
	float thisTime = abs(thisDistance) / _steppers[i]->maxSpeed();
     a12:	f855 0026 	ldr.w	r0, [r5, r6, lsl #2]
	long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a16:	461e      	mov	r6, r3
	float thisTime = abs(thisDistance) / _steppers[i]->maxSpeed();
     a18:	f7ff ff24 	bl	864 <AccelStepper::maxSpeed()>
    for (i = 0; i < _num_steppers; i++)
     a1c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
	long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a20:	1ba0      	subs	r0, r4, r6
    for (i = 0; i < _num_steppers; i++)
     a22:	fa5f f688 	uxtb.w	r6, r8

  using ::abs;

#ifndef __CORRECT_ISO_CPP_STDLIB_H_PROTO
  inline long
  abs(long __i) { return __builtin_labs(__i); }
     a26:	ea80 74e0 	eor.w	r4, r0, r0, asr #31
     a2a:	eba4 74e0 	sub.w	r4, r4, r0, asr #31
	float thisTime = abs(thisDistance) / _steppers[i]->maxSpeed();
     a2e:	ee07 4a90 	vmov	s15, r4
     a32:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     a36:	ee87 7a80 	vdiv.f32	s14, s15, s0
	    longestTime = thisTime;
     a3a:	eeb4 7a48 	vcmp.f32	s14, s16
     a3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a42:	fe37 8a08 	vselgt.f32	s16, s14, s16
    for (i = 0; i < _num_steppers; i++)
     a46:	42b3      	cmp	r3, r6
     a48:	d8da      	bhi.n	a00 <MultiStepper::moveTo(long*)+0x20>
    if (longestTime > 0.0)
     a4a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
     a4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
     a52:	dd27      	ble.n	aa4 <MultiStepper::moveTo(long*)+0xc4>
	for (i = 0; i < _num_steppers; i++)
     a54:	b333      	cbz	r3, aa4 <MultiStepper::moveTo(long*)+0xc4>
     a56:	f04f 0800 	mov.w	r8, #0
     a5a:	4644      	mov	r4, r8
	    long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a5c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < _num_steppers; i++)
     a60:	f108 0801 	add.w	r8, r8, #1
	    long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a64:	f857 6024 	ldr.w	r6, [r7, r4, lsl #2]
     a68:	f7ff fe6e 	bl	748 <AccelStepper::currentPosition()>
     a6c:	4603      	mov	r3, r0
	    _steppers[i]->moveTo(absolute[i]); // New target position (resets speed)
     a6e:	f857 1024 	ldr.w	r1, [r7, r4, lsl #2]
     a72:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
	    long thisDistance = absolute[i] - _steppers[i]->currentPosition();
     a76:	1af6      	subs	r6, r6, r3
	    float thisSpeed = thisDistance / longestTime;
     a78:	ee07 6a90 	vmov	s15, r6
     a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
     a80:	ee87 0a88 	vdiv.f32	s0, s15, s16
     a84:	ed8d 0a01 	vstr	s0, [sp, #4]
	    _steppers[i]->moveTo(absolute[i]); // New target position (resets speed)
     a88:	f7ff fe36 	bl	6f8 <AccelStepper::moveTo(long)>
	    _steppers[i]->setSpeed(thisSpeed); // New speed
     a8c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
	for (i = 0; i < _num_steppers; i++)
     a90:	fa5f f488 	uxtb.w	r4, r8
	    _steppers[i]->setSpeed(thisSpeed); // New speed
     a94:	ed9d 0a01 	vldr	s0, [sp, #4]
     a98:	f7ff ff4a 	bl	930 <AccelStepper::setSpeed(float)>
	for (i = 0; i < _num_steppers; i++)
     a9c:	f895 3028 	ldrb.w	r3, [r5, #40]	; 0x28
     aa0:	42a3      	cmp	r3, r4
     aa2:	d8db      	bhi.n	a5c <MultiStepper::moveTo(long*)+0x7c>
}
     aa4:	b002      	add	sp, #8
     aa6:	ecbd 8b02 	vpop	{d8}
     aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     aae:	4770      	bx	lr
     ab0:	00000000 	.word	0x00000000

00000ab4 <MultiStepper::runSpeedToPosition()>:

// Blocks until all steppers reach their target position and are stopped
void    MultiStepper::runSpeedToPosition()
{ 
     ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     ab6:	4606      	mov	r6, r0
    for (i = 0; i < _num_steppers; i++)
     ab8:	f890 3028 	ldrb.w	r3, [r0, #40]	; 0x28
     abc:	b1db      	cbz	r3, af6 <MultiStepper::runSpeedToPosition()+0x42>
     abe:	2500      	movs	r5, #0
    boolean ret = false;
     ac0:	462f      	mov	r7, r5
     ac2:	462c      	mov	r4, r5
     ac4:	e004      	b.n	ad0 <MultiStepper::runSpeedToPosition()+0x1c>
    for (i = 0; i < _num_steppers; i++)
     ac6:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
     aca:	b2ec      	uxtb	r4, r5
     acc:	42a3      	cmp	r3, r4
     ace:	d910      	bls.n	af2 <MultiStepper::runSpeedToPosition()+0x3e>
	if ( _steppers[i]->distanceToGo() != 0)
     ad0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    for (i = 0; i < _num_steppers; i++)
     ad4:	3501      	adds	r5, #1
	if ( _steppers[i]->distanceToGo() != 0)
     ad6:	f7ff fe33 	bl	740 <AccelStepper::distanceToGo()>
     ada:	2800      	cmp	r0, #0
     adc:	d0f3      	beq.n	ac6 <MultiStepper::runSpeedToPosition()+0x12>
	    _steppers[i]->runSpeed();
     ade:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
    for (i = 0; i < _num_steppers; i++)
     ae2:	b2ec      	uxtb	r4, r5
	    _steppers[i]->runSpeed();
     ae4:	f7ff fe10 	bl	708 <AccelStepper::runSpeed()>
    for (i = 0; i < _num_steppers; i++)
     ae8:	f896 3028 	ldrb.w	r3, [r6, #40]	; 0x28
	    ret = true;
     aec:	2701      	movs	r7, #1
    for (i = 0; i < _num_steppers; i++)
     aee:	42a3      	cmp	r3, r4
     af0:	d8ee      	bhi.n	ad0 <MultiStepper::runSpeedToPosition()+0x1c>
    while (run())
     af2:	2f00      	cmp	r7, #0
     af4:	d1e2      	bne.n	abc <MultiStepper::runSpeedToPosition()+0x8>
	;
}
     af6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00000af8 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
     af8:	49a2      	ldr	r1, [pc, #648]	; (d84 <set_arm_clock+0x28c>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     afa:	4ba3      	ldr	r3, [pc, #652]	; (d88 <set_arm_clock+0x290>)
	if (frequency > 528000000) {
     afc:	4288      	cmp	r0, r1
{
     afe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t dcdc = DCDC_REG3;
     b02:	4ca2      	ldr	r4, [pc, #648]	; (d8c <set_arm_clock+0x294>)
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
     b04:	695e      	ldr	r6, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
     b06:	699a      	ldr	r2, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
     b08:	f8d4 800c 	ldr.w	r8, [r4, #12]
	if (frequency > 528000000) {
     b0c:	d91b      	bls.n	b46 <set_arm_clock+0x4e>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
     b0e:	4ba0      	ldr	r3, [pc, #640]	; (d90 <set_arm_clock+0x298>)
     b10:	4298      	cmp	r0, r3
     b12:	f240 8102 	bls.w	d1a <set_arm_clock+0x222>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     b16:	1ac3      	subs	r3, r0, r3
     b18:	499e      	ldr	r1, [pc, #632]	; (d94 <set_arm_clock+0x29c>)
     b1a:	0a1b      	lsrs	r3, r3, #8
     b1c:	fba1 1303 	umull	r1, r3, r1, r3
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b20:	f240 6127 	movw	r1, #1575	; 0x627
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
     b24:	09db      	lsrs	r3, r3, #7
     b26:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
     b2e:	f203 43e2 	addw	r3, r3, #1250	; 0x4e2
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b32:	428b      	cmp	r3, r1
     b34:	bf28      	it	cs
     b36:	460b      	movcs	r3, r1
     b38:	f5a3 7748 	sub.w	r7, r3, #800	; 0x320
     b3c:	4b96      	ldr	r3, [pc, #600]	; (d98 <set_arm_clock+0x2a0>)
     b3e:	fba3 3707 	umull	r3, r7, r3, r7
     b42:	08ff      	lsrs	r7, r7, #3
     b44:	e004      	b.n	b50 <set_arm_clock+0x58>
	} else if (frequency <= 24000000) {
     b46:	4f95      	ldr	r7, [pc, #596]	; (d9c <set_arm_clock+0x2a4>)
     b48:	42b8      	cmp	r0, r7
     b4a:	bf8c      	ite	hi
     b4c:	270e      	movhi	r7, #14
     b4e:	2706      	movls	r7, #6
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     b50:	498d      	ldr	r1, [pc, #564]	; (d88 <set_arm_clock+0x290>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b52:	f008 091f 	and.w	r9, r8, #31
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     b56:	f8d1 3080 	ldr.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b5a:	45b9      	cmp	r9, r7
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
     b5c:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
     b60:	f8c1 3080 	str.w	r3, [r1, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
     b64:	d20c      	bcs.n	b80 <set_arm_clock+0x88>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     b66:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     b6a:	f5a1 21f8 	sub.w	r1, r1, #507904	; 0x7c000
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     b6e:	ea48 0807 	orr.w	r8, r8, r7
		DCDC_REG3 = dcdc;
     b72:	f8c1 800c 	str.w	r8, [r1, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     b76:	680b      	ldr	r3, [r1, #0]
     b78:	2b00      	cmp	r3, #0
     b7a:	dafc      	bge.n	b76 <set_arm_clock+0x7e>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     b7c:	f008 091f 	and.w	r9, r8, #31
	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
     b80:	f016 7300 	ands.w	r3, r6, #33554432	; 0x2000000
     b84:	d124      	bne.n	bd0 <set_arm_clock+0xd8>
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
     b86:	4986      	ldr	r1, [pc, #536]	; (da0 <set_arm_clock+0x2a8>)
     b88:	690c      	ldr	r4, [r1, #16]
     b8a:	4986      	ldr	r1, [pc, #536]	; (da4 <set_arm_clock+0x2ac>)
     b8c:	43a1      	bics	r1, r4
     b8e:	f000 80ea 	beq.w	d66 <set_arm_clock+0x26e>
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     b92:	f482 5180 	eor.w	r1, r2, #4096	; 0x1000
     b96:	4634      	mov	r4, r6
     b98:	f44f 5580 	mov.w	r5, #4096	; 0x1000
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     b9c:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
     ba0:	d004      	beq.n	bac <set_arm_clock+0xb4>
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
     ba2:	f026 5660 	bic.w	r6, r6, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
     ba6:	431e      	orrs	r6, r3
			CCM_CBCDR = cbcdr;
     ba8:	4b77      	ldr	r3, [pc, #476]	; (d88 <set_arm_clock+0x290>)
     baa:	615e      	str	r6, [r3, #20]
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
     bac:	f411 5f40 	tst.w	r1, #12288	; 0x3000
     bb0:	d007      	beq.n	bc2 <set_arm_clock+0xca>
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
     bb2:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
			CCM_CBCMR = cbcmr;
     bb6:	4974      	ldr	r1, [pc, #464]	; (d88 <set_arm_clock+0x290>)
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
     bb8:	432a      	orrs	r2, r5
			CCM_CBCMR = cbcmr;
     bba:	618a      	str	r2, [r1, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
     bbc:	6c8b      	ldr	r3, [r1, #72]	; 0x48
     bbe:	071a      	lsls	r2, r3, #28
     bc0:	d4fc      	bmi.n	bbc <set_arm_clock+0xc4>
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
     bc2:	f046 7600 	orr.w	r6, r6, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
     bc6:	4a70      	ldr	r2, [pc, #448]	; (d88 <set_arm_clock+0x290>)
     bc8:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     bca:	6c93      	ldr	r3, [r2, #72]	; 0x48
     bcc:	069b      	lsls	r3, r3, #26
     bce:	d4fc      	bmi.n	bca <set_arm_clock+0xd2>
	while (frequency * div_arm * div_ahb < 648000000) {
     bd0:	4c75      	ldr	r4, [pc, #468]	; (da8 <set_arm_clock+0x2b0>)
     bd2:	42a0      	cmp	r0, r4
     bd4:	f200 80ce 	bhi.w	d74 <set_arm_clock+0x27c>
	uint32_t div_ahb = 1;
     bd8:	f04f 0c01 	mov.w	ip, #1
     bdc:	4601      	mov	r1, r0
	uint32_t div_arm = 1;
     bde:	4663      	mov	r3, ip
	while (frequency * div_arm * div_ahb < 648000000) {
     be0:	fb03 1201 	mla	r2, r3, r1, r1
			div_arm = div_arm + 1;
     be4:	f103 0e01 	add.w	lr, r3, #1
				div_ahb = div_ahb + 1;
     be8:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     bec:	42a2      	cmp	r2, r4
     bee:	d818      	bhi.n	c22 <set_arm_clock+0x12a>
		if (div_arm < 8) {
     bf0:	f1be 0f08 	cmp.w	lr, #8
				div_arm = 1;
     bf4:	f04f 0301 	mov.w	r3, #1
		if (div_arm < 8) {
     bf8:	f040 808d 	bne.w	d16 <set_arm_clock+0x21e>
			if (div_ahb < 5) {
     bfc:	f1bc 0f04 	cmp.w	ip, #4
     c00:	f200 8091 	bhi.w	d26 <set_arm_clock+0x22e>
	while (frequency * div_arm * div_ahb < 648000000) {
     c04:	180a      	adds	r2, r1, r0
     c06:	42a2      	cmp	r2, r4
     c08:	f200 80a4 	bhi.w	d54 <set_arm_clock+0x25c>
     c0c:	fb05 f100 	mul.w	r1, r5, r0
				div_ahb = div_ahb + 1;
     c10:	46ac      	mov	ip, r5
			div_arm = div_arm + 1;
     c12:	f103 0e01 	add.w	lr, r3, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     c16:	fb03 1201 	mla	r2, r3, r1, r1
				div_ahb = div_ahb + 1;
     c1a:	f10c 0501 	add.w	r5, ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     c1e:	42a2      	cmp	r2, r4
     c20:	d9e6      	bls.n	bf0 <set_arm_clock+0xf8>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     c22:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
     c26:	028c      	lsls	r4, r1, #10
     c28:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     c2c:	485f      	ldr	r0, [pc, #380]	; (dac <set_arm_clock+0x2b4>)
     c2e:	4410      	add	r0, r2
	if (mult > 108) mult = 108;
     c30:	4a5f      	ldr	r2, [pc, #380]	; (db0 <set_arm_clock+0x2b8>)
     c32:	4290      	cmp	r0, r2
     c34:	d97f      	bls.n	d36 <set_arm_clock+0x23e>
     c36:	f8df a1a4 	ldr.w	sl, [pc, #420]	; ddc <set_arm_clock+0x2e4>
     c3a:	226c      	movs	r2, #108	; 0x6c
     c3c:	485d      	ldr	r0, [pc, #372]	; (db4 <set_arm_clock+0x2bc>)
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     c3e:	4d58      	ldr	r5, [pc, #352]	; (da0 <set_arm_clock+0x2a8>)
	frequency = mult * 12000000 / div_arm / div_ahb;
     c40:	fbb0 f0fe 	udiv	r0, r0, lr
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     c44:	f8d5 e000 	ldr.w	lr, [r5]
	frequency = mult * 12000000 / div_arm / div_ahb;
     c48:	fbb0 f0fc 	udiv	r0, r0, ip
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
     c4c:	f8df c190 	ldr.w	ip, [pc, #400]	; de0 <set_arm_clock+0x2e8>
     c50:	ea0e 0c0c 	and.w	ip, lr, ip
     c54:	45d4      	cmp	ip, sl
     c56:	d009      	beq.n	c6c <set_arm_clock+0x174>
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
     c58:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
     c5c:	f44f 5c80 	mov.w	ip, #4096	; 0x1000
     c60:	f8c5 c000 	str.w	ip, [r5]
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
     c64:	602a      	str	r2, [r5, #0]
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
     c66:	682a      	ldr	r2, [r5, #0]
     c68:	2a00      	cmp	r2, #0
     c6a:	dafc      	bge.n	c66 <set_arm_clock+0x16e>
	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
     c6c:	4a46      	ldr	r2, [pc, #280]	; (d88 <set_arm_clock+0x290>)
     c6e:	6915      	ldr	r5, [r2, #16]
     c70:	f005 0507 	and.w	r5, r5, #7
     c74:	429d      	cmp	r5, r3
     c76:	d003      	beq.n	c80 <set_arm_clock+0x188>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
     c78:	6113      	str	r3, [r2, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
     c7a:	6c93      	ldr	r3, [r2, #72]	; 0x48
     c7c:	03dd      	lsls	r5, r3, #15
     c7e:	d4fc      	bmi.n	c7a <set_arm_clock+0x182>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     c80:	f411 5fe0 	tst.w	r1, #7168	; 0x1c00
     c84:	d009      	beq.n	c9a <set_arm_clock+0x1a2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
     c86:	f426 56e0 	bic.w	r6, r6, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     c8a:	f404 54e0 	and.w	r4, r4, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
     c8e:	4a3e      	ldr	r2, [pc, #248]	; (d88 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
     c90:	4326      	orrs	r6, r4
		CCM_CBCDR = cbcdr;
     c92:	6156      	str	r6, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
     c94:	6c93      	ldr	r3, [r2, #72]	; 0x48
     c96:	0799      	lsls	r1, r3, #30
     c98:	d4fc      	bmi.n	c94 <set_arm_clock+0x19c>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     c9a:	4947      	ldr	r1, [pc, #284]	; (db8 <set_arm_clock+0x2c0>)
	if (div_ipg > 4) div_ipg = 4;
     c9c:	4a47      	ldr	r2, [pc, #284]	; (dbc <set_arm_clock+0x2c4>)
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     c9e:	4401      	add	r1, r0
	if (div_ipg > 4) div_ipg = 4;
     ca0:	4291      	cmp	r1, r2
     ca2:	d83c      	bhi.n	d1e <set_arm_clock+0x226>
	uint32_t div_ipg = (frequency + 149999999) / 150000000;
     ca4:	4b46      	ldr	r3, [pc, #280]	; (dc0 <set_arm_clock+0x2c8>)
     ca6:	09c9      	lsrs	r1, r1, #7
     ca8:	fba3 3101 	umull	r3, r1, r3, r1
     cac:	0b09      	lsrs	r1, r1, #12
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
     cae:	1e4b      	subs	r3, r1, #1
     cb0:	021b      	lsls	r3, r3, #8
     cb2:	ea86 0203 	eor.w	r2, r6, r3
     cb6:	f412 7f40 	tst.w	r2, #768	; 0x300
     cba:	d006      	beq.n	cca <set_arm_clock+0x1d2>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
     cbc:	f426 7640 	bic.w	r6, r6, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     cc0:	f403 7340 	and.w	r3, r3, #768	; 0x300
		CCM_CBCDR = cbcdr;
     cc4:	4a30      	ldr	r2, [pc, #192]	; (d88 <set_arm_clock+0x290>)
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
     cc6:	4333      	orrs	r3, r6
		CCM_CBCDR = cbcdr;
     cc8:	6153      	str	r3, [r2, #20]
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
     cca:	4a2f      	ldr	r2, [pc, #188]	; (d88 <set_arm_clock+0x290>)
     ccc:	6953      	ldr	r3, [r2, #20]
     cce:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
     cd2:	6153      	str	r3, [r2, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
     cd4:	6c93      	ldr	r3, [r2, #72]	; 0x48
     cd6:	069b      	lsls	r3, r3, #26
     cd8:	d4fc      	bmi.n	cd4 <set_arm_clock+0x1dc>
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     cda:	4b3a      	ldr	r3, [pc, #232]	; (dc4 <set_arm_clock+0x2cc>)
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     cdc:	454f      	cmp	r7, r9
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     cde:	fba3 2300 	umull	r2, r3, r3, r0
     ce2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
     ce6:	ea4f 4393 	mov.w	r3, r3, lsr #18
	F_BUS_ACTUAL = frequency / div_ipg;
     cea:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     cee:	fbb2 f3f3 	udiv	r3, r2, r3
	F_CPU_ACTUAL = frequency;
     cf2:	4a35      	ldr	r2, [pc, #212]	; (dc8 <set_arm_clock+0x2d0>)
     cf4:	6010      	str	r0, [r2, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
     cf6:	4a35      	ldr	r2, [pc, #212]	; (dcc <set_arm_clock+0x2d4>)
     cf8:	6011      	str	r1, [r2, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
     cfa:	4a35      	ldr	r2, [pc, #212]	; (dd0 <set_arm_clock+0x2d8>)
     cfc:	6013      	str	r3, [r2, #0]
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
     cfe:	d208      	bcs.n	d12 <set_arm_clock+0x21a>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
     d00:	f028 081f 	bic.w	r8, r8, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
     d04:	4a21      	ldr	r2, [pc, #132]	; (d8c <set_arm_clock+0x294>)
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
     d06:	ea48 0707 	orr.w	r7, r8, r7
		DCDC_REG3 = dcdc;
     d0a:	60d7      	str	r7, [r2, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
     d0c:	6813      	ldr	r3, [r2, #0]
     d0e:	2b00      	cmp	r3, #0
     d10:	dafc      	bge.n	d0c <set_arm_clock+0x214>
	}

	return frequency;
}
     d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     d16:	4673      	mov	r3, lr
     d18:	e762      	b.n	be0 <set_arm_clock+0xe8>
     d1a:	2712      	movs	r7, #18
     d1c:	e718      	b.n	b50 <set_arm_clock+0x58>
     d1e:	f44f 7340 	mov.w	r3, #768	; 0x300
	if (div_ipg > 4) div_ipg = 4;
     d22:	2104      	movs	r1, #4
     d24:	e7c5      	b.n	cb2 <set_arm_clock+0x1ba>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d26:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d2a:	4820      	ldr	r0, [pc, #128]	; (dac <set_arm_clock+0x2b4>)
     d2c:	2307      	movs	r3, #7
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d2e:	028c      	lsls	r4, r1, #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d30:	4410      	add	r0, r2
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d32:	ea86 2181 	eor.w	r1, r6, r1, lsl #10
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d36:	4a27      	ldr	r2, [pc, #156]	; (dd4 <set_arm_clock+0x2dc>)
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
     d38:	f8df a0a8 	ldr.w	sl, [pc, #168]	; de4 <set_arm_clock+0x2ec>
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
     d3c:	fba2 2000 	umull	r2, r0, r2, r0
     d40:	0d02      	lsrs	r2, r0, #20
	frequency = mult * 12000000 / div_arm / div_ahb;
     d42:	4825      	ldr	r0, [pc, #148]	; (dd8 <set_arm_clock+0x2e0>)
     d44:	2a36      	cmp	r2, #54	; 0x36
     d46:	bf38      	it	cc
     d48:	2236      	movcc	r2, #54	; 0x36
     d4a:	fb02 f000 	mul.w	r0, r2, r0
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
     d4e:	ea42 0a0a 	orr.w	sl, r2, sl
     d52:	e774      	b.n	c3e <set_arm_clock+0x146>
	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
     d54:	ea4f 248c 	mov.w	r4, ip, lsl #10
     d58:	2300      	movs	r3, #0
     d5a:	ea86 218c 	eor.w	r1, r6, ip, lsl #10
				div_arm = 1;
     d5e:	f04f 0e01 	mov.w	lr, #1
				div_ahb = div_ahb + 1;
     d62:	46ac      	mov	ip, r5
     d64:	e762      	b.n	c2c <set_arm_clock+0x134>
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
     d66:	461d      	mov	r5, r3
     d68:	f086 54c0 	eor.w	r4, r6, #402653184	; 0x18000000
     d6c:	4611      	mov	r1, r2
     d6e:	f04f 53c0 	mov.w	r3, #402653184	; 0x18000000
     d72:	e713      	b.n	b9c <set_arm_clock+0xa4>
	while (frequency * div_arm * div_ahb < 648000000) {
     d74:	2400      	movs	r4, #0
	uint32_t div_ahb = 1;
     d76:	f04f 0c01 	mov.w	ip, #1
	while (frequency * div_arm * div_ahb < 648000000) {
     d7a:	4602      	mov	r2, r0
     d7c:	4631      	mov	r1, r6
     d7e:	4623      	mov	r3, r4
	uint32_t div_arm = 1;
     d80:	46e6      	mov	lr, ip
     d82:	e753      	b.n	c2c <set_arm_clock+0x134>
     d84:	1f78a400 	.word	0x1f78a400
     d88:	400fc000 	.word	0x400fc000
     d8c:	40080000 	.word	0x40080000
     d90:	23c34600 	.word	0x23c34600
     d94:	004cb223 	.word	0x004cb223
     d98:	51eb851f 	.word	0x51eb851f
     d9c:	016e3600 	.word	0x016e3600
     da0:	400d8000 	.word	0x400d8000
     da4:	80003040 	.word	0x80003040
     da8:	269fb1ff 	.word	0x269fb1ff
     dac:	005b8d80 	.word	0x005b8d80
     db0:	4df67eff 	.word	0x4df67eff
     db4:	4d3f6400 	.word	0x4d3f6400
     db8:	08f0d17f 	.word	0x08f0d17f
     dbc:	2cb4177f 	.word	0x2cb4177f
     dc0:	00e5109f 	.word	0x00e5109f
     dc4:	431bde83 	.word	0x431bde83
     dc8:	20000b0c 	.word	0x20000b0c
     dcc:	20000b08 	.word	0x20000b08
     dd0:	20001450 	.word	0x20001450
     dd4:	165e9f81 	.word	0x165e9f81
     dd8:	00b71b00 	.word	0x00b71b00
     ddc:	8000206c 	.word	0x8000206c
     de0:	8001307f 	.word	0x8001307f
     de4:	80002000 	.word	0x80002000

00000de8 <delay>:
// or delayNanoseconds().
void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
     de8:	b900      	cbnz	r0, dec <delay+0x4>
     dea:	4770      	bx	lr
{
     dec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     df0:	2101      	movs	r1, #1
     df2:	4681      	mov	r9, r0
     df4:	4c21      	ldr	r4, [pc, #132]	; (e7c <delay+0x94>)
     df6:	4d22      	ldr	r5, [pc, #136]	; (e80 <delay+0x98>)
     df8:	4e22      	ldr	r6, [pc, #136]	; (e84 <delay+0x9c>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     dfa:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
     dfe:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     e00:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     e02:	e844 1300 	strex	r3, r1, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     e06:	2b00      	cmp	r3, #0
     e08:	d1f7      	bne.n	dfa <delay+0x12>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     e0a:	491f      	ldr	r1, [pc, #124]	; (e88 <delay+0xa0>)
     e0c:	684b      	ldr	r3, [r1, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
     e0e:	f44f 7b7a 	mov.w	fp, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e12:	f8df a078 	ldr.w	sl, [pc, #120]	; e8c <delay+0xa4>
	uint32_t ccdelta = cyccnt - scc;
     e16:	1a1b      	subs	r3, r3, r0
     e18:	2701      	movs	r7, #1
	uint32_t usec = 1000*smc + frac;
     e1a:	fb0b f802 	mul.w	r8, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e1e:	f8da 2000 	ldr.w	r2, [sl]
     e22:	fba3 3202 	umull	r3, r2, r3, r2
	uint32_t usec = 1000*smc + frac;
     e26:	455a      	cmp	r2, fp
     e28:	bf94      	ite	ls
     e2a:	4490      	addls	r8, r2
     e2c:	44d8      	addhi	r8, fp
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     e2e:	e854 3f00 	ldrex	r3, [r4]
		smc = systick_millis_count;
     e32:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
     e34:	6830      	ldr	r0, [r6, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     e36:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
     e3a:	2b00      	cmp	r3, #0
     e3c:	d1f7      	bne.n	e2e <delay+0x46>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     e3e:	684b      	ldr	r3, [r1, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e40:	f8da c000 	ldr.w	ip, [sl]
	uint32_t ccdelta = cyccnt - scc;
     e44:	1a1b      	subs	r3, r3, r0
	uint32_t usec = 1000*smc + frac;
     e46:	fb0b f202 	mul.w	r2, fp, r2
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     e4a:	fba3 3c0c 	umull	r3, ip, r3, ip
	uint32_t usec = 1000*smc + frac;
     e4e:	f5bc 7f7a 	cmp.w	ip, #1000	; 0x3e8
     e52:	bf94      	ite	ls
     e54:	4462      	addls	r2, ip
     e56:	f502 727a 	addhi.w	r2, r2, #1000	; 0x3e8
		while ((micros() - start) >= 1000) {
     e5a:	eba2 0208 	sub.w	r2, r2, r8
     e5e:	f5b2 7f7a 	cmp.w	r2, #1000	; 0x3e8
     e62:	d306      	bcc.n	e72 <delay+0x8a>
			if (--msec == 0) return;
     e64:	f1b9 0901 	subs.w	r9, r9, #1
			start += 1000;
     e68:	f508 787a 	add.w	r8, r8, #1000	; 0x3e8
			if (--msec == 0) return;
     e6c:	d1df      	bne.n	e2e <delay+0x46>
}
     e6e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		yield();
     e72:	f000 ffb9 	bl	1de8 <yield>
		while ((micros() - start) >= 1000) {
     e76:	4904      	ldr	r1, [pc, #16]	; (e88 <delay+0xa0>)
     e78:	e7d9      	b.n	e2e <delay+0x46>
     e7a:	bf00      	nop
     e7c:	200015d8 	.word	0x200015d8
     e80:	200015d4 	.word	0x200015d4
     e84:	200015d0 	.word	0x200015d0
     e88:	e0001000 	.word	0xe0001000
     e8c:	20001450 	.word	0x20001450

00000e90 <micros>:
{
     e90:	b430      	push	{r4, r5}
     e92:	4b0f      	ldr	r3, [pc, #60]	; (ed0 <micros+0x40>)
     e94:	f04f 0c01 	mov.w	ip, #1
     e98:	4d0e      	ldr	r5, [pc, #56]	; (ed4 <micros+0x44>)
     e9a:	4c0f      	ldr	r4, [pc, #60]	; (ed8 <micros+0x48>)
   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
     e9c:	e853 2f00 	ldrex	r2, [r3]
		smc = systick_millis_count;
     ea0:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
     ea2:	6821      	ldr	r1, [r4, #0]
   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
     ea4:	e843 c200 	strex	r2, ip, [r3]
	} while ( __STREXW(1, &systick_safe_read));
     ea8:	2a00      	cmp	r2, #0
     eaa:	d1f7      	bne.n	e9c <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
     eac:	4b0b      	ldr	r3, [pc, #44]	; (edc <micros+0x4c>)
     eae:	685b      	ldr	r3, [r3, #4]
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     eb0:	4a0b      	ldr	r2, [pc, #44]	; (ee0 <micros+0x50>)
	uint32_t ccdelta = cyccnt - scc;
     eb2:	1a5b      	subs	r3, r3, r1
	uint32_t usec = 1000*smc + frac;
     eb4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     eb8:	6812      	ldr	r2, [r2, #0]
	uint32_t usec = 1000*smc + frac;
     eba:	fb01 f000 	mul.w	r0, r1, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
     ebe:	fba3 3202 	umull	r3, r2, r3, r2
	return usec;
}
     ec2:	bc30      	pop	{r4, r5}
     ec4:	428a      	cmp	r2, r1
     ec6:	bf94      	ite	ls
     ec8:	1880      	addls	r0, r0, r2
     eca:	1840      	addhi	r0, r0, r1
     ecc:	4770      	bx	lr
     ece:	bf00      	nop
     ed0:	200015d8 	.word	0x200015d8
     ed4:	200015d4 	.word	0x200015d4
     ed8:	200015d0 	.word	0x200015d0
     edc:	e0001000 	.word	0xe0001000
     ee0:	20001450 	.word	0x20001450

00000ee4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
     ee4:	2827      	cmp	r0, #39	; 0x27
     ee6:	d816      	bhi.n	f16 <digitalWrite+0x32>
	p = digital_pin_to_info_PGM + pin;
     ee8:	0102      	lsls	r2, r0, #4
     eea:	4b10      	ldr	r3, [pc, #64]	; (f2c <digitalWrite+0x48>)
     eec:	eb03 1000 	add.w	r0, r3, r0, lsl #4
	pinmode = *(p->reg + 1);
     ef0:	589b      	ldr	r3, [r3, r2]
{
     ef2:	b410      	push	{r4}
	mask = p->mask;
     ef4:	68c2      	ldr	r2, [r0, #12]
	pinmode = *(p->reg + 1);
     ef6:	685c      	ldr	r4, [r3, #4]
	if (pinmode & mask) {
     ef8:	4214      	tst	r4, r2
     efa:	d005      	beq.n	f08 <digitalWrite+0x24>
		// pin is configured for output mode
		if (val) {
     efc:	b961      	cbnz	r1, f18 <digitalWrite+0x34>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
     efe:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x22) = mask; // clear register
     f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
}
     f06:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     f08:	6883      	ldr	r3, [r0, #8]
		if (val) {
     f0a:	b151      	cbz	r1, f22 <digitalWrite+0x3e>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     f0c:	4a08      	ldr	r2, [pc, #32]	; (f30 <digitalWrite+0x4c>)
}
     f0e:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     f12:	601a      	str	r2, [r3, #0]
}
     f14:	4770      	bx	lr
     f16:	4770      	bx	lr
     f18:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->reg + 0x21) = mask; // set register
     f1c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
}
     f20:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     f22:	4a04      	ldr	r2, [pc, #16]	; (f34 <digitalWrite+0x50>)
}
     f24:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     f28:	601a      	str	r2, [r3, #0]
}
     f2a:	4770      	bx	lr
     f2c:	200002c0 	.word	0x200002c0
     f30:	0001f038 	.word	0x0001f038
     f34:	00013038 	.word	0x00013038

00000f38 <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
     f38:	2827      	cmp	r0, #39	; 0x27
     f3a:	d829      	bhi.n	f90 <pinMode+0x58>
	p = digital_pin_to_info_PGM + pin;
     f3c:	4b16      	ldr	r3, [pc, #88]	; (f98 <pinMode+0x60>)
     f3e:	0102      	lsls	r2, r0, #4
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     f40:	2901      	cmp	r1, #1
	p = digital_pin_to_info_PGM + pin;
     f42:	eb03 1000 	add.w	r0, r3, r0, lsl #4
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     f46:	589a      	ldr	r2, [r3, r2]
{
     f48:	b410      	push	{r4}
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     f4a:	6853      	ldr	r3, [r2, #4]
     f4c:	68c4      	ldr	r4, [r0, #12]
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
     f4e:	d00e      	beq.n	f6e <pinMode+0x36>
     f50:	2904      	cmp	r1, #4
     f52:	d00c      	beq.n	f6e <pinMode+0x36>
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
     f54:	ea23 0304 	bic.w	r3, r3, r4
     f58:	6053      	str	r3, [r2, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
     f5a:	6883      	ldr	r3, [r0, #8]
		if (mode == INPUT) {
     f5c:	b1a9      	cbz	r1, f8a <pinMode+0x52>
		} else if (mode == INPUT_PULLUP) {
     f5e:	2902      	cmp	r1, #2
     f60:	d017      	beq.n	f92 <pinMode+0x5a>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
     f62:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
     f64:	bf0c      	ite	eq
     f66:	4a0d      	ldreq	r2, [pc, #52]	; (f9c <pinMode+0x64>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
     f68:	4a0d      	ldrne	r2, [pc, #52]	; (fa0 <pinMode+0x68>)
     f6a:	601a      	str	r2, [r3, #0]
     f6c:	e007      	b.n	f7e <pinMode+0x46>
		*(p->reg + 1) |= p->mask; // TODO: atomic
     f6e:	4323      	orrs	r3, r4
		if (mode == OUTPUT) {
     f70:	2901      	cmp	r1, #1
		*(p->reg + 1) |= p->mask; // TODO: atomic
     f72:	6053      	str	r3, [r2, #4]
			*(p->pad) = IOMUXC_PAD_DSE(7);
     f74:	6883      	ldr	r3, [r0, #8]
		if (mode == OUTPUT) {
     f76:	d008      	beq.n	f8a <pinMode+0x52>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
     f78:	f640 0238 	movw	r2, #2104	; 0x838
     f7c:	601a      	str	r2, [r3, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
     f7e:	6843      	ldr	r3, [r0, #4]
     f80:	2215      	movs	r2, #21
}
     f82:	f85d 4b04 	ldr.w	r4, [sp], #4
	*(p->mux) = 5 | 0x10;
     f86:	601a      	str	r2, [r3, #0]
}
     f88:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7);
     f8a:	2238      	movs	r2, #56	; 0x38
     f8c:	601a      	str	r2, [r3, #0]
     f8e:	e7f6      	b.n	f7e <pinMode+0x46>
     f90:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
     f92:	4a04      	ldr	r2, [pc, #16]	; (fa4 <pinMode+0x6c>)
     f94:	601a      	str	r2, [r3, #0]
     f96:	e7f2      	b.n	f7e <pinMode+0x46>
     f98:	200002c0 	.word	0x200002c0
     f9c:	00013038 	.word	0x00013038
     fa0:	00010038 	.word	0x00010038
     fa4:	0001f038 	.word	0x0001f038

00000fa8 <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
     fa8:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
     faa:	f7ff f887 	bl	bc <setup>
	while (1) {
		loop();
     fae:	f7ff f8ff 	bl	1b0 <loop>
		yield();
     fb2:	f000 ff19 	bl	1de8 <yield>
	while (1) {
     fb6:	e7fa      	b.n	fae <main+0x6>

00000fb8 <operator delete(void*, unsigned int)>:
	free(ptr);
}

void operator delete(void * ptr, size_t size __attribute__((unused)))
{
	free(ptr);
     fb8:	f001 b984 	b.w	22c4 <free>

00000fbc <unused_interrupt_vector>:
	__disable_irq();
     fbc:	b672      	cpsid	i
	asm volatile("mrs %0, ipsr\n" : "=r" (ipsr) :: "memory");
     fbe:	f3ef 8305 	mrs	r3, IPSR
	info->ipsr = ipsr;
     fc2:	4c52      	ldr	r4, [pc, #328]	; (110c <unused_interrupt_vector+0x150>)
     fc4:	f8c4 3084 	str.w	r3, [r4, #132]	; 0x84
	asm volatile("tst lr, #4\nite eq\nmrseq %0, msp\nmrsne %0, psp\n" : "=r" (stack) :: "memory");
     fc8:	f01e 0f04 	tst.w	lr, #4
     fcc:	bf0c      	ite	eq
     fce:	f3ef 8208 	mrseq	r2, MSP
     fd2:	f3ef 8209 	mrsne	r2, PSP
	info->cfsr = SCB_CFSR;
     fd6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
	p = (uint32_t *)info;
     fda:	4e4d      	ldr	r6, [pc, #308]	; (1110 <unused_interrupt_vector+0x154>)
	while (p < end) {
     fdc:	4d4d      	ldr	r5, [pc, #308]	; (1114 <unused_interrupt_vector+0x158>)
	info->cfsr = SCB_CFSR;
     fde:	f8d3 0d28 	ldr.w	r0, [r3, #3368]	; 0xd28
	info->hfsr = SCB_HFSR;
     fe2:	f8d3 1d2c 	ldr.w	r1, [r3, #3372]	; 0xd2c
     fe6:	e9c4 0122 	strd	r0, r1, [r4, #136]	; 0x88
	info->mmfar = SCB_MMFAR;
     fea:	f8d3 1d34 	ldr.w	r1, [r3, #3380]	; 0xd34
	info->bfar = SCB_BFAR;
     fee:	f8d3 3d38 	ldr.w	r3, [r3, #3384]	; 0xd38
     ff2:	e9c4 1324 	strd	r1, r3, [r4, #144]	; 0x90
	info->ret = stack[6];
     ff6:	6993      	ldr	r3, [r2, #24]
     ff8:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
	info->xpsr = stack[7];
     ffc:	69d3      	ldr	r3, [r2, #28]
     ffe:	f8c4 309c 	str.w	r3, [r4, #156]	; 0x9c
	info->temp = tempmonGetTemp();
    1002:	f000 f8bd 	bl	1180 <tempmonGetTemp>
    1006:	ed84 0a28 	vstr	s0, [r4, #160]	; 0xa0
	info->time = rtc_get();
    100a:	f001 f911 	bl	2230 <rtc_get>
	info->len = sizeof(*info) / 4;
    100e:	210b      	movs	r1, #11
	crc = 0xFFFFFFFF;
    1010:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	info->time = rtc_get();
    1014:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
	info->len = sizeof(*info) / 4;
    1018:	460b      	mov	r3, r1
    101a:	f8c4 1080 	str.w	r1, [r4, #128]	; 0x80
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    101e:	493e      	ldr	r1, [pc, #248]	; (1118 <unused_interrupt_vector+0x15c>)
		crc ^= *p++;
    1020:	1d30      	adds	r0, r6, #4
    1022:	405a      	eors	r2, r3
    1024:	2420      	movs	r4, #32
		for (i=0; i < 32; i++) crc = (crc >> 1) ^ (crc & 1)*0xEDB88320;
    1026:	f002 0301 	and.w	r3, r2, #1
    102a:	3c01      	subs	r4, #1
    102c:	fb01 f303 	mul.w	r3, r1, r3
    1030:	ea83 0252 	eor.w	r2, r3, r2, lsr #1
    1034:	d1f7      	bne.n	1026 <unused_interrupt_vector+0x6a>
	while (p < end) {
    1036:	42a8      	cmp	r0, r5
    1038:	d002      	beq.n	1040 <unused_interrupt_vector+0x84>
		crc ^= *p++;
    103a:	6873      	ldr	r3, [r6, #4]
    103c:	4606      	mov	r6, r0
    103e:	e7ef      	b.n	1020 <unused_interrupt_vector+0x64>
	info->crc = crc;
    1040:	4b32      	ldr	r3, [pc, #200]	; (110c <unused_interrupt_vector+0x150>)
    1042:	f8c3 20a8 	str.w	r2, [r3, #168]	; 0xa8
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    1046:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    104a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    104e:	4930      	ldr	r1, [pc, #192]	; (1110 <unused_interrupt_vector+0x154>)
    1050:	4a32      	ldr	r2, [pc, #200]	; (111c <unused_interrupt_vector+0x160>)
    1052:	f8c3 1f70 	str.w	r1, [r3, #3952]	; 0xf70
    1056:	f8c3 2f70 	str.w	r2, [r3, #3952]	; 0xf70
		location += 32;
	} while (location < end_addr);
	asm("dsb");
    105a:	f3bf 8f4f 	dsb	sy
	asm("isb");
    105e:	f3bf 8f6f 	isb	sy
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1062:	4a2f      	ldr	r2, [pc, #188]	; (1120 <unused_interrupt_vector+0x164>)
	PIT_MCR = PIT_MCR_MDIS;
    1064:	2502      	movs	r5, #2
    1066:	482f      	ldr	r0, [pc, #188]	; (1124 <unused_interrupt_vector+0x168>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    1068:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    106a:	492f      	ldr	r1, [pc, #188]	; (1128 <unused_interrupt_vector+0x16c>)
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
    106c:	f443 5340 	orr.w	r3, r3, #12288	; 0x3000
    1070:	66d3      	str	r3, [r2, #108]	; 0x6c
	PIT_MCR = PIT_MCR_MDIS;
    1072:	6005      	str	r5, [r0, #0]
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1074:	69d3      	ldr	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1076:	482d      	ldr	r0, [pc, #180]	; (112c <unused_interrupt_vector+0x170>)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
    1078:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    107c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    1080:	61d3      	str	r3, [r2, #28]
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1082:	680b      	ldr	r3, [r1, #0]
    1084:	4283      	cmp	r3, r0
    1086:	d83d      	bhi.n	1104 <unused_interrupt_vector+0x148>
	PIT_MCR = 0;
    1088:	4d26      	ldr	r5, [pc, #152]	; (1124 <unused_interrupt_vector+0x168>)
    108a:	2100      	movs	r1, #0
	NVIC_ICER0 = 0xFFFFFFFF;
    108c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1090:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
	PIT_MCR = 0;
    1094:	6029      	str	r1, [r5, #0]
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    1096:	2601      	movs	r6, #1
	PIT_TCTRL0 = 0;
    1098:	f8c5 1108 	str.w	r1, [r5, #264]	; 0x108
	PIT_LDVAL0 = 2400000; // 2400000 = 100ms
    109c:	4924      	ldr	r1, [pc, #144]	; (1130 <unused_interrupt_vector+0x174>)
    109e:	f8c5 1100 	str.w	r1, [r5, #256]	; 0x100
	PIT_TCTRL0 = PIT_TCTRL_TEN;
    10a2:	f8c5 6108 	str.w	r6, [r5, #264]	; 0x108
	NVIC_ICER0 = 0xFFFFFFFF;
    10a6:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ICER1 = 0xFFFFFFFF;
    10aa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
	NVIC_ICER2 = 0xFFFFFFFF;
    10ae:	f8c3 2188 	str.w	r2, [r3, #392]	; 0x188
	NVIC_ICER3 = 0xFFFFFFFF;
    10b2:	f8c3 218c 	str.w	r2, [r3, #396]	; 0x18c
	NVIC_ICER4 = 0xFFFFFFFF;
    10b6:	f8c3 2190 	str.w	r2, [r3, #400]	; 0x190
	count = 0;
    10ba:	e001      	b.n	10c0 <unused_interrupt_vector+0x104>
		usb_isr();
    10bc:	f000 f952 	bl	1364 <usb_isr>
		if (PIT_TFLG0) {
    10c0:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    10c4:	2b00      	cmp	r3, #0
    10c6:	d0f9      	beq.n	10bc <unused_interrupt_vector+0x100>
			if (++count >= 80) break;  // reboot after 8 seconds
    10c8:	3401      	adds	r4, #1
			PIT_TFLG0 = 1;
    10ca:	f8c5 610c 	str.w	r6, [r5, #268]	; 0x10c
			if (++count >= 80) break;  // reboot after 8 seconds
    10ce:	2c4f      	cmp	r4, #79	; 0x4f
    10d0:	d9f4      	bls.n	10bc <unused_interrupt_vector+0x100>
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    10d2:	4b18      	ldr	r3, [pc, #96]	; (1134 <unused_interrupt_vector+0x178>)
	USB1_USBCMD = USB_USBCMD_RST;
    10d4:	2002      	movs	r0, #2
    10d6:	4918      	ldr	r1, [pc, #96]	; (1138 <unused_interrupt_vector+0x17c>)
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    10d8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
	USB1_USBCMD = USB_USBCMD_RST;
    10dc:	f8c1 0140 	str.w	r0, [r1, #320]	; 0x140
	USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST;
    10e0:	635a      	str	r2, [r3, #52]	; 0x34
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    10e2:	f8d5 310c 	ldr.w	r3, [r5, #268]	; 0x10c
    10e6:	b93b      	cbnz	r3, 10f8 <unused_interrupt_vector+0x13c>
	SRC_GPR5 = 0x0BAD00F1;
    10e8:	4814      	ldr	r0, [pc, #80]	; (113c <unused_interrupt_vector+0x180>)
    10ea:	4915      	ldr	r1, [pc, #84]	; (1140 <unused_interrupt_vector+0x184>)
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    10ec:	4a0d      	ldr	r2, [pc, #52]	; (1124 <unused_interrupt_vector+0x168>)
	SRC_GPR5 = 0x0BAD00F1;
    10ee:	6301      	str	r1, [r0, #48]	; 0x30
	while (PIT_TFLG0 == 0) /* wait 0.1 second for PC to know USB unplugged */
    10f0:	f8d2 310c 	ldr.w	r3, [r2, #268]	; 0x10c
    10f4:	2b00      	cmp	r3, #0
    10f6:	d0fa      	beq.n	10ee <unused_interrupt_vector+0x132>
	SCB_AIRCR = 0x05FA0004;
    10f8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    10fc:	4a11      	ldr	r2, [pc, #68]	; (1144 <unused_interrupt_vector+0x188>)
    10fe:	f8c3 2d0c 	str.w	r2, [r3, #3340]	; 0xd0c
	while (1) ;
    1102:	e7fe      	b.n	1102 <unused_interrupt_vector+0x146>
  	if (F_CPU_ACTUAL > 198000000) set_arm_clock(198000000);
    1104:	f7ff fcf8 	bl	af8 <set_arm_clock>
    1108:	e7be      	b.n	1088 <unused_interrupt_vector+0xcc>
    110a:	bf00      	nop
    110c:	2027ff00 	.word	0x2027ff00
    1110:	2027ff80 	.word	0x2027ff80
    1114:	2027ffa8 	.word	0x2027ffa8
    1118:	edb88320 	.word	0xedb88320
    111c:	2027ffa0 	.word	0x2027ffa0
    1120:	400fc000 	.word	0x400fc000
    1124:	40084000 	.word	0x40084000
    1128:	20000b0c 	.word	0x20000b0c
    112c:	0bcd3d80 	.word	0x0bcd3d80
    1130:	00249f00 	.word	0x00249f00
    1134:	400d9000 	.word	0x400d9000
    1138:	402e0000 	.word	0x402e0000
    113c:	400f8000 	.word	0x400f8000
    1140:	0bad00f1 	.word	0x0bad00f1
    1144:	05fa0004 	.word	0x05fa0004

00001148 <_sbrk>:
char *__brkval = (char *)&_heap_start;

__attribute__((weak))
void * _sbrk(int incr)
{
        char *prev = __brkval;
    1148:	490a      	ldr	r1, [pc, #40]	; (1174 <_sbrk+0x2c>)
    114a:	680a      	ldr	r2, [r1, #0]
        if (incr != 0) {
    114c:	b138      	cbz	r0, 115e <_sbrk+0x16>
{
    114e:	b508      	push	{r3, lr}
                if (prev + incr > (char *)&_heap_end) {
    1150:	1813      	adds	r3, r2, r0
    1152:	4809      	ldr	r0, [pc, #36]	; (1178 <_sbrk+0x30>)
    1154:	4283      	cmp	r3, r0
    1156:	d804      	bhi.n	1162 <_sbrk+0x1a>
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    1158:	4610      	mov	r0, r2
                __brkval = prev + incr;
    115a:	600b      	str	r3, [r1, #0]
}
    115c:	bd08      	pop	{r3, pc}
    115e:	4610      	mov	r0, r2
    1160:	4770      	bx	lr
                        errno = ENOMEM;
    1162:	f001 fbd7 	bl	2914 <__errno>
    1166:	230c      	movs	r3, #12
                        return (void *)-1;
    1168:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
                        errno = ENOMEM;
    116c:	6003      	str	r3, [r0, #0]
}
    116e:	4610      	mov	r0, r2
    1170:	bd08      	pop	{r3, pc}
    1172:	bf00      	nop
    1174:	20000b10 	.word	0x20000b10
    1178:	20280000 	.word	0x20280000

0000117c <Panic_Temp_isr>:
  unused_interrupt_vector();
    117c:	f7ff bf1e 	b.w	fbc <unused_interrupt_vector>

00001180 <tempmonGetTemp>:
float tempmonGetTemp(void)
{
    uint32_t nmeas;
    float tmeas;

    while (!(TEMPMON_TEMPSENSE0 & 0x4U))
    1180:	4a12      	ldr	r2, [pc, #72]	; (11cc <tempmonGetTemp+0x4c>)
    1182:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    1186:	075b      	lsls	r3, r3, #29
    1188:	d5fb      	bpl.n	1182 <tempmonGetTemp+0x2>
    {
    }

    /* ready to read temperature code value */
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    118a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
    /* Calculate temperature */
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    118e:	4810      	ldr	r0, [pc, #64]	; (11d0 <tempmonGetTemp+0x50>)
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    1190:	f3c3 230b 	ubfx	r3, r3, #8, #12
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    1194:	490f      	ldr	r1, [pc, #60]	; (11d4 <tempmonGetTemp+0x54>)
    1196:	ed90 7a00 	vldr	s14, [r0]
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    119a:	ee07 3a90 	vmov	s15, r3
    tmeas = s_hotTemp - (((float)nmeas - (float)s_hotCount) * s_hot_ROOM / s_roomC_hotC);
    119e:	ed91 6a00 	vldr	s12, [r1]
    11a2:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    11a6:	4a0c      	ldr	r2, [pc, #48]	; (11d8 <tempmonGetTemp+0x58>)
    11a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    11ac:	4b0b      	ldr	r3, [pc, #44]	; (11dc <tempmonGetTemp+0x5c>)
    11ae:	edd2 6a00 	vldr	s13, [r2]
    11b2:	ee77 7ac7 	vsub.f32	s15, s15, s14
    11b6:	ed93 7a00 	vldr	s14, [r3]
    11ba:	eeb8 7a47 	vcvt.f32.u32	s14, s14
    11be:	ee67 7a86 	vmul.f32	s15, s15, s12
    11c2:	ee87 0aa6 	vdiv.f32	s0, s15, s13

    return tmeas;
}
    11c6:	ee37 0a40 	vsub.f32	s0, s14, s0
    11ca:	4770      	bx	lr
    11cc:	400d8100 	.word	0x400d8100
    11d0:	20001440 	.word	0x20001440
    11d4:	20001448 	.word	0x20001448
    11d8:	2000144c 	.word	0x2000144c
    11dc:	20001444 	.word	0x20001444

000011e0 <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    11e0:	6b83      	ldr	r3, [r0, #56]	; 0x38
{
    11e2:	b4f0      	push	{r4, r5, r6, r7}
	if (endpoint->callback_function) {
    11e4:	b11b      	cbz	r3, 11ee <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    11e6:	6853      	ldr	r3, [r2, #4]
    11e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    11ec:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    11ee:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    11f0:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    11f2:	b33c      	cbz	r4, 1244 <schedule_transfer+0x64>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    11f4:	4b1a      	ldr	r3, [pc, #104]	; (1260 <schedule_transfer+0x80>)
		last->next = (uint32_t)transfer;
    11f6:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    11f8:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    11fc:	420c      	tst	r4, r1
    11fe:	d11d      	bne.n	123c <schedule_transfer+0x5c>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    1200:	4e18      	ldr	r6, [pc, #96]	; (1264 <schedule_transfer+0x84>)
    1202:	6877      	ldr	r7, [r6, #4]
    1204:	e004      	b.n	1210 <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1206:	6874      	ldr	r4, [r6, #4]
    1208:	1be4      	subs	r4, r4, r7
    120a:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    120e:	d20b      	bcs.n	1228 <schedule_transfer+0x48>
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    1210:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1214:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    1218:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    121c:	f8d3 51b8 	ldr.w	r5, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    1220:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    1224:	0464      	lsls	r4, r4, #17
    1226:	d5ee      	bpl.n	1206 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    1228:	400d      	ands	r5, r1
    122a:	d107      	bne.n	123c <schedule_transfer+0x5c>
		//ret |= 0x02;
		endpoint->next = (uint32_t)transfer;
		endpoint->status = 0;
		USB1_ENDPTPRIME |= epmask;
    122c:	4c0c      	ldr	r4, [pc, #48]	; (1260 <schedule_transfer+0x80>)
		endpoint->status = 0;
    122e:	e9c0 2502 	strd	r2, r5, [r0, #8]
		USB1_ENDPTPRIME |= epmask;
    1232:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1236:	430b      	orrs	r3, r1
    1238:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
	USB1_ENDPTPRIME |= epmask;
	endpoint->first_transfer = transfer;
end:
	endpoint->last_transfer = transfer;
    123c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    123e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    1240:	bcf0      	pop	{r4, r5, r6, r7}
    1242:	4770      	bx	lr
	USB1_ENDPTPRIME |= epmask;
    1244:	4d06      	ldr	r5, [pc, #24]	; (1260 <schedule_transfer+0x80>)
	endpoint->status = 0;
    1246:	e9c0 2402 	strd	r2, r4, [r0, #8]
	USB1_ENDPTPRIME |= epmask;
    124a:	f8d5 31b0 	ldr.w	r3, [r5, #432]	; 0x1b0
    124e:	430b      	orrs	r3, r1
    1250:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    1254:	6302      	str	r2, [r0, #48]	; 0x30
	endpoint->last_transfer = transfer;
    1256:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    1258:	b662      	cpsie	i
}
    125a:	bcf0      	pop	{r4, r5, r6, r7}
    125c:	4770      	bx	lr
    125e:	bf00      	nop
    1260:	402e0000 	.word	0x402e0000
    1264:	e0001000 	.word	0xe0001000

00001268 <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    1268:	b570      	push	{r4, r5, r6, lr}
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    126a:	6b05      	ldr	r5, [r0, #48]	; 0x30
	if (first == NULL) return;
    126c:	b19d      	cbz	r5, 1296 <run_callbacks+0x2e>
    126e:	4606      	mov	r6, r0
    1270:	462a      	mov	r2, r5

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
    1272:	2400      	movs	r4, #0
    1274:	e003      	b.n	127e <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    1276:	6812      	ldr	r2, [r2, #0]
		count++;
    1278:	3401      	adds	r4, #1
		if ((uint32_t)t == 1) {
    127a:	2a01      	cmp	r2, #1
    127c:	d00c      	beq.n	1298 <run_callbacks+0x30>
		if (t->status & (1<<7)) {
    127e:	6853      	ldr	r3, [r2, #4]
    1280:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    1284:	d0f7      	beq.n	1276 <run_callbacks+0xe>
			ep->first_transfer = t;
    1286:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    1288:	b12c      	cbz	r4, 1296 <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
    128a:	4628      	mov	r0, r5
		ep->callback_function(first);
    128c:	6bb3      	ldr	r3, [r6, #56]	; 0x38
		transfer_t *next = (transfer_t *)first->next;
    128e:	682d      	ldr	r5, [r5, #0]
		ep->callback_function(first);
    1290:	4798      	blx	r3
	while (count) {
    1292:	3c01      	subs	r4, #1
    1294:	d1f9      	bne.n	128a <run_callbacks+0x22>
		first = next;
		count--;
	}
}
    1296:	bd70      	pop	{r4, r5, r6, pc}
			ep->last_transfer = NULL;
    1298:	e9c6 330c 	strd	r3, r3, [r6, #48]	; 0x30
			break;
    129c:	e7f4      	b.n	1288 <run_callbacks+0x20>
    129e:	bf00      	nop

000012a0 <endpoint0_transmit.constprop.0>:
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    12a0:	b430      	push	{r4, r5}
	if (len > 0) {
    12a2:	b9d9      	cbnz	r1, 12dc <endpoint0_transmit.constprop.0+0x3c>
    12a4:	4c1f      	ldr	r4, [pc, #124]	; (1324 <endpoint0_transmit.constprop.0+0x84>)
	endpoint0_transfer_ack.next = 1;
    12a6:	4b20      	ldr	r3, [pc, #128]	; (1328 <endpoint0_transmit.constprop.0+0x88>)
	endpoint0_transfer_ack.pointer0 = 0;
    12a8:	2100      	movs	r1, #0
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12aa:	4a20      	ldr	r2, [pc, #128]	; (132c <endpoint0_transmit.constprop.0+0x8c>)
	endpoint0_transfer_ack.next = 1;
    12ac:	2501      	movs	r5, #1
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12ae:	f04f 1001 	mov.w	r0, #65537	; 0x10001
	endpoint0_transfer_ack.pointer0 = 0;
    12b2:	6099      	str	r1, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    12b4:	601d      	str	r5, [r3, #0]
	endpoint_queue_head[0].status = 0;
    12b6:	e9c4 3102 	strd	r3, r1, [r4, #8]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    12ba:	2480      	movs	r4, #128	; 0x80
    12bc:	605c      	str	r4, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    12be:	f8c2 01bc 	str.w	r0, [r2, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    12c2:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    12c6:	481a      	ldr	r0, [pc, #104]	; (1330 <endpoint0_transmit.constprop.0+0x90>)
	USB1_ENDPTPRIME |= (1<<0);
    12c8:	432b      	orrs	r3, r5
    12ca:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    12ce:	6001      	str	r1, [r0, #0]
	while (USB1_ENDPTPRIME) ;
    12d0:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    12d4:	2b00      	cmp	r3, #0
    12d6:	d1fb      	bne.n	12d0 <endpoint0_transmit.constprop.0+0x30>
}
    12d8:	bc30      	pop	{r4, r5}
    12da:	4770      	bx	lr
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    12dc:	0409      	lsls	r1, r1, #16
		endpoint0_transfer_data.next = 1;
    12de:	4b15      	ldr	r3, [pc, #84]	; (1334 <endpoint0_transmit.constprop.0+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    12e0:	4c10      	ldr	r4, [pc, #64]	; (1324 <endpoint0_transmit.constprop.0+0x84>)
		endpoint0_transfer_data.next = 1;
    12e2:	2501      	movs	r5, #1
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    12e4:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    12e8:	6098      	str	r0, [r3, #8]
		USB1_ENDPTPRIME |= (1<<16);
    12ea:	4a10      	ldr	r2, [pc, #64]	; (132c <endpoint0_transmit.constprop.0+0x8c>)
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    12ec:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    12ee:	f500 5180 	add.w	r1, r0, #4096	; 0x1000
		endpoint0_transfer_data.next = 1;
    12f2:	601d      	str	r5, [r3, #0]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    12f4:	60d9      	str	r1, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    12f6:	f500 5100 	add.w	r1, r0, #8192	; 0x2000
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    12fa:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.pointer2 = addr + 8192;
    12fc:	6119      	str	r1, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    12fe:	f500 5140 	add.w	r1, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1302:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1306:	6159      	str	r1, [r3, #20]
		endpoint_queue_head[1].status = 0;
    1308:	2100      	movs	r1, #0
		endpoint0_transfer_data.pointer4 = addr + 16384;
    130a:	6198      	str	r0, [r3, #24]
		endpoint_queue_head[1].status = 0;
    130c:	64e1      	str	r1, [r4, #76]	; 0x4c
		USB1_ENDPTPRIME |= (1<<16);
    130e:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    1312:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1316:	f8c2 31b0 	str.w	r3, [r2, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    131a:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    131e:	2b00      	cmp	r3, #0
    1320:	d1fb      	bne.n	131a <endpoint0_transmit.constprop.0+0x7a>
    1322:	e7c0      	b.n	12a6 <endpoint0_transmit.constprop.0+0x6>
    1324:	20000000 	.word	0x20000000
    1328:	20000ec0 	.word	0x20000ec0
    132c:	402e0000 	.word	0x402e0000
    1330:	20001400 	.word	0x20001400
    1334:	20000ee0 	.word	0x20000ee0

00001338 <usb_stop_sof_interrupts>:
	sof_usage &= ~(1 << interface);
    1338:	4908      	ldr	r1, [pc, #32]	; (135c <usb_stop_sof_interrupts+0x24>)
    133a:	2201      	movs	r2, #1
    133c:	780b      	ldrb	r3, [r1, #0]
    133e:	fa02 f000 	lsl.w	r0, r2, r0
    1342:	ea23 0000 	bic.w	r0, r3, r0
    1346:	7008      	strb	r0, [r1, #0]
	if (sof_usage == 0) {
    1348:	b930      	cbnz	r0, 1358 <usb_stop_sof_interrupts+0x20>
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    134a:	4a05      	ldr	r2, [pc, #20]	; (1360 <usb_stop_sof_interrupts+0x28>)
    134c:	f8d2 3148 	ldr.w	r3, [r2, #328]	; 0x148
    1350:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    1354:	f8c2 3148 	str.w	r3, [r2, #328]	; 0x148
}
    1358:	4770      	bx	lr
    135a:	bf00      	nop
    135c:	200015fc 	.word	0x200015fc
    1360:	402e0000 	.word	0x402e0000

00001364 <usb_isr>:
{
    1364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t status = USB1_USBSTS;
    1368:	4c97      	ldr	r4, [pc, #604]	; (15c8 <usb_isr+0x264>)
{
    136a:	b083      	sub	sp, #12
	uint32_t status = USB1_USBSTS;
    136c:	f8d4 7144 	ldr.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1370:	07fb      	lsls	r3, r7, #31
	USB1_USBSTS = status;
    1372:	f8c4 7144 	str.w	r7, [r4, #324]	; 0x144
	if (status & USB_USBSTS_UI) {
    1376:	d553      	bpl.n	1420 <usb_isr+0xbc>
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    1378:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    137c:	2a00      	cmp	r2, #0
    137e:	d04a      	beq.n	1416 <usb_isr+0xb2>
    1380:	4e92      	ldr	r6, [pc, #584]	; (15cc <usb_isr+0x268>)
    1382:	f8df a260 	ldr.w	sl, [pc, #608]	; 15e4 <usb_isr+0x280>
		uint32_t addr = (uint32_t)data;
    1386:	f8df 9274 	ldr.w	r9, [pc, #628]	; 15fc <usb_isr+0x298>
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    138a:	f8df b274 	ldr.w	fp, [pc, #628]	; 1600 <usb_isr+0x29c>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    138e:	f8df 8274 	ldr.w	r8, [pc, #628]	; 1604 <usb_isr+0x2a0>
			USB1_ENDPTSETUPSTAT = setupstatus;
    1392:	f8c4 21ac 	str.w	r2, [r4, #428]	; 0x1ac
				s.word2 = endpoint_queue_head[0].setup1;
    1396:	e9d6 200a 	ldrd	r2, r0, [r6, #40]	; 0x28
				USB1_USBCMD |= USB_USBCMD_SUTW;
    139a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    139e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    13a2:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    13a6:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    13aa:	049d      	lsls	r5, r3, #18
    13ac:	d5f5      	bpl.n	139a <usb_isr+0x36>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    13ae:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    13b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    13b6:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    13ba:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    13be:	f8c4 31b4 	str.w	r3, [r4, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    13c2:	f8d4 51b4 	ldr.w	r5, [r4, #436]	; 0x1b4
    13c6:	f015 1501 	ands.w	r5, r5, #65537	; 0x10001
    13ca:	d1fa      	bne.n	13c2 <usb_isr+0x5e>
			endpoint0_notify_mask = 0;
    13cc:	b293      	uxth	r3, r2
	setup.bothwords = setupdata;
    13ce:	4684      	mov	ip, r0
			endpoint0_notify_mask = 0;
    13d0:	f8ca 5000 	str.w	r5, [sl]
	switch (setup.wRequestAndType) {
    13d4:	f5b3 6f08 	cmp.w	r3, #2176	; 0x880
    13d8:	f000 81cf 	beq.w	177a <usb_isr+0x416>
    13dc:	f200 80db 	bhi.w	1596 <usb_isr+0x232>
    13e0:	f240 3102 	movw	r1, #770	; 0x302
    13e4:	428b      	cmp	r3, r1
    13e6:	f000 81e7 	beq.w	17b8 <usb_isr+0x454>
    13ea:	f200 809a 	bhi.w	1522 <usb_isr+0x1be>
    13ee:	2b82      	cmp	r3, #130	; 0x82
    13f0:	f000 81cb 	beq.w	178a <usb_isr+0x426>
    13f4:	f5b3 7f81 	cmp.w	r3, #258	; 0x102
    13f8:	f040 808a 	bne.w	1510 <usb_isr+0x1ac>
		if (endpoint > 7) break;
    13fc:	f010 0f78 	tst.w	r0, #120	; 0x78
    1400:	b283      	uxth	r3, r0
    1402:	f000 8203 	beq.w	180c <usb_isr+0x4a8>
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    1406:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    140a:	f8c4 31c0 	str.w	r3, [r4, #448]	; 0x1c0
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    140e:	f8d4 21ac 	ldr.w	r2, [r4, #428]	; 0x1ac
		while (setupstatus) {
    1412:	2a00      	cmp	r2, #0
    1414:	d1bd      	bne.n	1392 <usb_isr+0x2e>
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    1416:	4a6c      	ldr	r2, [pc, #432]	; (15c8 <usb_isr+0x264>)
    1418:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    141c:	2b00      	cmp	r3, #0
    141e:	d142      	bne.n	14a6 <usb_isr+0x142>
	if (status & USB_USBSTS_URI) { // page 3164
    1420:	067e      	lsls	r6, r7, #25
    1422:	d516      	bpl.n	1452 <usb_isr+0xee>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    1424:	4b68      	ldr	r3, [pc, #416]	; (15c8 <usb_isr+0x264>)
    1426:	f8d3 21ac 	ldr.w	r2, [r3, #428]	; 0x1ac
    142a:	f8c3 21ac 	str.w	r2, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    142e:	f8d3 21bc 	ldr.w	r2, [r3, #444]	; 0x1bc
    1432:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    1436:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    143a:	2c00      	cmp	r4, #0
    143c:	d1fb      	bne.n	1436 <usb_isr+0xd2>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    143e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    1442:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    1446:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
		usb_serial_reset();
    144a:	f000 fc3f 	bl	1ccc <usb_serial_reset>
		endpointN_notify_mask = 0;
    144e:	4b60      	ldr	r3, [pc, #384]	; (15d0 <usb_isr+0x26c>)
    1450:	601c      	str	r4, [r3, #0]
	if (status & USB_USBSTS_TI0) {
    1452:	01fc      	lsls	r4, r7, #7
    1454:	d503      	bpl.n	145e <usb_isr+0xfa>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    1456:	4b5f      	ldr	r3, [pc, #380]	; (15d4 <usb_isr+0x270>)
    1458:	681b      	ldr	r3, [r3, #0]
    145a:	b103      	cbz	r3, 145e <usb_isr+0xfa>
    145c:	4798      	blx	r3
	if (status & USB_USBSTS_TI1) {
    145e:	01b8      	lsls	r0, r7, #6
    1460:	d503      	bpl.n	146a <usb_isr+0x106>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    1462:	4b5d      	ldr	r3, [pc, #372]	; (15d8 <usb_isr+0x274>)
    1464:	681b      	ldr	r3, [r3, #0]
    1466:	b103      	cbz	r3, 146a <usb_isr+0x106>
    1468:	4798      	blx	r3
	if (status & USB_USBSTS_PCI) {
    146a:	0779      	lsls	r1, r7, #29
    146c:	d508      	bpl.n	1480 <usb_isr+0x11c>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    146e:	4b56      	ldr	r3, [pc, #344]	; (15c8 <usb_isr+0x264>)
    1470:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    1474:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    1478:	d047      	beq.n	150a <usb_isr+0x1a6>
			usb_high_speed = 1;
    147a:	4b58      	ldr	r3, [pc, #352]	; (15dc <usb_isr+0x278>)
    147c:	2201      	movs	r2, #1
    147e:	701a      	strb	r2, [r3, #0]
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    1480:	4b51      	ldr	r3, [pc, #324]	; (15c8 <usb_isr+0x264>)
    1482:	f8d3 3148 	ldr.w	r3, [r3, #328]	; 0x148
    1486:	061a      	lsls	r2, r3, #24
    1488:	d50a      	bpl.n	14a0 <usb_isr+0x13c>
    148a:	063b      	lsls	r3, r7, #24
    148c:	d508      	bpl.n	14a0 <usb_isr+0x13c>
		if (usb_reboot_timer) {
    148e:	4a54      	ldr	r2, [pc, #336]	; (15e0 <usb_isr+0x27c>)
    1490:	7813      	ldrb	r3, [r2, #0]
    1492:	b12b      	cbz	r3, 14a0 <usb_isr+0x13c>
			if (--usb_reboot_timer == 0) {
    1494:	3b01      	subs	r3, #1
    1496:	b2db      	uxtb	r3, r3
    1498:	7013      	strb	r3, [r2, #0]
    149a:	2b00      	cmp	r3, #0
    149c:	f000 8272 	beq.w	1984 <usb_isr+0x620>
}
    14a0:	b003      	add	sp, #12
    14a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			if (completestatus & endpoint0_notify_mask) {
    14a6:	494f      	ldr	r1, [pc, #316]	; (15e4 <usb_isr+0x280>)
			USB1_ENDPTCOMPLETE = completestatus;
    14a8:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			if (completestatus & endpoint0_notify_mask) {
    14ac:	6808      	ldr	r0, [r1, #0]
    14ae:	4203      	tst	r3, r0
    14b0:	f040 81d1 	bne.w	1856 <usb_isr+0x4f2>
			completestatus &= endpointN_notify_mask;
    14b4:	4a46      	ldr	r2, [pc, #280]	; (15d0 <usb_isr+0x26c>)
    14b6:	6814      	ldr	r4, [r2, #0]
			if (completestatus) {
    14b8:	401c      	ands	r4, r3
    14ba:	d0b1      	beq.n	1420 <usb_isr+0xbc>
				while (tx) {
    14bc:	ea5f 4814 	movs.w	r8, r4, lsr #16
    14c0:	d010      	beq.n	14e4 <usb_isr+0x180>
    14c2:	4e42      	ldr	r6, [pc, #264]	; (15cc <usb_isr+0x268>)
					tx &= ~(1<<p);
    14c4:	f04f 0901 	mov.w	r9, #1
					int p=__builtin_ctz(tx);
    14c8:	fa98 f5a8 	rbit	r5, r8
    14cc:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    14d0:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					tx &= ~(1<<p);
    14d4:	fa09 f505 	lsl.w	r5, r9, r5
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    14d8:	3040      	adds	r0, #64	; 0x40
    14da:	f7ff fec5 	bl	1268 <run_callbacks>
				while (tx) {
    14de:	ea38 0805 	bics.w	r8, r8, r5
    14e2:	d1f1      	bne.n	14c8 <usb_isr+0x164>
				uint32_t rx = completestatus & 0xffff;
    14e4:	b2a4      	uxth	r4, r4
				while(rx) {
    14e6:	2c00      	cmp	r4, #0
    14e8:	d09a      	beq.n	1420 <usb_isr+0xbc>
    14ea:	4e38      	ldr	r6, [pc, #224]	; (15cc <usb_isr+0x268>)
					rx &= ~(1<<p);
    14ec:	f04f 0801 	mov.w	r8, #1
					int p=__builtin_ctz(rx);
    14f0:	fa94 f5a4 	rbit	r5, r4
    14f4:	fab5 f585 	clz	r5, r5
					run_callbacks(endpoint_queue_head + p * 2);
    14f8:	eb06 10c5 	add.w	r0, r6, r5, lsl #7
					rx &= ~(1<<p);
    14fc:	fa08 f505 	lsl.w	r5, r8, r5
					run_callbacks(endpoint_queue_head + p * 2);
    1500:	f7ff feb2 	bl	1268 <run_callbacks>
				while(rx) {
    1504:	43ac      	bics	r4, r5
    1506:	d1f3      	bne.n	14f0 <usb_isr+0x18c>
    1508:	e78a      	b.n	1420 <usb_isr+0xbc>
			usb_high_speed = 0;
    150a:	4a34      	ldr	r2, [pc, #208]	; (15dc <usb_isr+0x278>)
    150c:	7013      	strb	r3, [r2, #0]
    150e:	e7b7      	b.n	1480 <usb_isr+0x11c>
	switch (setup.wRequestAndType) {
    1510:	2b80      	cmp	r3, #128	; 0x80
    1512:	f47f af78 	bne.w	1406 <usb_isr+0xa2>
		reply_buffer[0] = 0;
    1516:	4834      	ldr	r0, [pc, #208]	; (15e8 <usb_isr+0x284>)
		endpoint0_transmit(reply_buffer, 2, 0);
    1518:	2102      	movs	r1, #2
		reply_buffer[0] = 0;
    151a:	8005      	strh	r5, [r0, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    151c:	f7ff fec0 	bl	12a0 <endpoint0_transmit.constprop.0>
		return;
    1520:	e775      	b.n	140e <usb_isr+0xaa>
	switch (setup.wRequestAndType) {
    1522:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
    1526:	f000 810b 	beq.w	1740 <usb_isr+0x3dc>
    152a:	f5a3 63d0 	sub.w	r3, r3, #1664	; 0x680
    152e:	2b01      	cmp	r3, #1
    1530:	f63f af69 	bhi.w	1406 <usb_isr+0xa2>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1534:	4b2d      	ldr	r3, [pc, #180]	; (15ec <usb_isr+0x288>)
    1536:	685d      	ldr	r5, [r3, #4]
    1538:	2d00      	cmp	r5, #0
    153a:	f43f af64 	beq.w	1406 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    153e:	fa1f fc8c 	uxth.w	ip, ip
    1542:	ea4f 4e12 	mov.w	lr, r2, lsr #16
    1546:	e004      	b.n	1552 <usb_isr+0x1ee>
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    1548:	691d      	ldr	r5, [r3, #16]
    154a:	330c      	adds	r3, #12
    154c:	2d00      	cmp	r5, #0
    154e:	f43f af5a 	beq.w	1406 <usb_isr+0xa2>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    1552:	881a      	ldrh	r2, [r3, #0]
    1554:	4572      	cmp	r2, lr
    1556:	d1f7      	bne.n	1548 <usb_isr+0x1e4>
    1558:	885a      	ldrh	r2, [r3, #2]
    155a:	4562      	cmp	r2, ip
    155c:	d1f4      	bne.n	1548 <usb_isr+0x1e4>
				if ((setup.wValue >> 8) == 3) {
    155e:	ea4f 221e 	mov.w	r2, lr, lsr #8
    1562:	2a03      	cmp	r2, #3
    1564:	f000 81a5 	beq.w	18b2 <usb_isr+0x54e>
					datalen = list->length;
    1568:	891a      	ldrh	r2, [r3, #8]
				if (datalen > setup.wLength) datalen = setup.wLength;
    156a:	0c00      	lsrs	r0, r0, #16
    156c:	4282      	cmp	r2, r0
    156e:	bf28      	it	cs
    1570:	4602      	movcs	r2, r0
				if (setup.wValue == 0x200) {
    1572:	f5be 7f00 	cmp.w	lr, #512	; 0x200
    1576:	f040 81a1 	bne.w	18bc <usb_isr+0x558>
					if (usb_high_speed) src = usb_config_descriptor_480;
    157a:	4b18      	ldr	r3, [pc, #96]	; (15dc <usb_isr+0x278>)
    157c:	491c      	ldr	r1, [pc, #112]	; (15f0 <usb_isr+0x28c>)
    157e:	7818      	ldrb	r0, [r3, #0]
    1580:	4b1c      	ldr	r3, [pc, #112]	; (15f4 <usb_isr+0x290>)
					memcpy(usb_descriptor_buffer, src, datalen);
    1582:	9201      	str	r2, [sp, #4]
    1584:	2800      	cmp	r0, #0
    1586:	bf18      	it	ne
    1588:	4619      	movne	r1, r3
    158a:	481b      	ldr	r0, [pc, #108]	; (15f8 <usb_isr+0x294>)
    158c:	f000 fccc 	bl	1f28 <memcpy>
    1590:	4d19      	ldr	r5, [pc, #100]	; (15f8 <usb_isr+0x294>)
    1592:	9a01      	ldr	r2, [sp, #4]
    1594:	e1e1      	b.n	195a <usb_isr+0x5f6>
	switch (setup.wRequestAndType) {
    1596:	f242 2121 	movw	r1, #8737	; 0x2221
    159a:	428b      	cmp	r3, r1
    159c:	d07c      	beq.n	1698 <usb_isr+0x334>
    159e:	d933      	bls.n	1608 <usb_isr+0x2a4>
    15a0:	f242 3121 	movw	r1, #8993	; 0x2321
    15a4:	428b      	cmp	r3, r1
    15a6:	f000 8081 	beq.w	16ac <usb_isr+0x348>
    15aa:	f64f 01c0 	movw	r1, #63680	; 0xf8c0
    15ae:	428b      	cmp	r3, r1
    15b0:	f47f af29 	bne.w	1406 <usb_isr+0xa2>
		if ((setup.wIndex & 0xFF00) != 0) break; // 1=Genre, 4=Compat ID, 5=Properties
    15b4:	f410 4f7f 	tst.w	r0, #65280	; 0xff00
    15b8:	b283      	uxth	r3, r0
    15ba:	f47f af24 	bne.w	1406 <usb_isr+0xa2>
		setup.wIndex |= 0xEE00; // alter wIndex and treat as normal USB descriptor
    15be:	f443 436e 	orr.w	r3, r3, #60928	; 0xee00
    15c2:	f363 0c0f 	bfi	ip, r3, #0, #16
    15c6:	e7b5      	b.n	1534 <usb_isr+0x1d0>
    15c8:	402e0000 	.word	0x402e0000
    15cc:	20000000 	.word	0x20000000
    15d0:	20001404 	.word	0x20001404
    15d4:	200015e8 	.word	0x200015e8
    15d8:	200015ec 	.word	0x200015ec
    15dc:	20001601 	.word	0x20001601
    15e0:	20001602 	.word	0x20001602
    15e4:	20001400 	.word	0x20001400
    15e8:	20001408 	.word	0x20001408
    15ec:	20000540 	.word	0x20000540
    15f0:	60001b2c 	.word	0x60001b2c
    15f4:	60001b90 	.word	0x60001b90
    15f8:	20200000 	.word	0x20200000
    15fc:	200013f8 	.word	0x200013f8
    1600:	b8c6cf5d 	.word	0xb8c6cf5d
    1604:	402e01c0 	.word	0x402e01c0
	switch (setup.wRequestAndType) {
    1608:	f5b3 6f10 	cmp.w	r3, #2304	; 0x900
    160c:	d066      	beq.n	16dc <usb_isr+0x378>
    160e:	f242 0121 	movw	r1, #8225	; 0x2021
    1612:	428b      	cmp	r3, r1
    1614:	f47f aef7 	bne.w	1406 <usb_isr+0xa2>
		if (setup.wLength != 7) break;
    1618:	0c03      	lsrs	r3, r0, #16
    161a:	2b07      	cmp	r3, #7
    161c:	f47f aef3 	bne.w	1406 <usb_isr+0xa2>
		endpoint0_transfer_data.next = 1;
    1620:	4bb2      	ldr	r3, [pc, #712]	; (18ec <usb_isr+0x588>)
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1622:	49b3      	ldr	r1, [pc, #716]	; (18f0 <usb_isr+0x58c>)
		endpoint_queue_head[0].status = 0;
    1624:	60f5      	str	r5, [r6, #12]
		endpoint0_transfer_data.pointer1 = addr + 4096;
    1626:	60d9      	str	r1, [r3, #12]
		endpoint0_setupdata.bothwords = setupdata;
    1628:	49b2      	ldr	r1, [pc, #712]	; (18f4 <usb_isr+0x590>)
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    162a:	60b3      	str	r3, [r6, #8]
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    162c:	f8c3 9008 	str.w	r9, [r3, #8]
		endpoint0_setupdata.bothwords = setupdata;
    1630:	e9c1 2000 	strd	r2, r0, [r1]
		endpoint0_transfer_data.next = 1;
    1634:	2201      	movs	r2, #1
    1636:	601a      	str	r2, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    1638:	4aaf      	ldr	r2, [pc, #700]	; (18f8 <usb_isr+0x594>)
    163a:	605a      	str	r2, [r3, #4]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    163c:	4aaf      	ldr	r2, [pc, #700]	; (18fc <usb_isr+0x598>)
    163e:	611a      	str	r2, [r3, #16]
		USB1_ENDPTPRIME |= (1<<0);
    1640:	f8d4 11b0 	ldr.w	r1, [r4, #432]	; 0x1b0
    1644:	f041 0101 	orr.w	r1, r1, #1
    1648:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
		endpoint0_transfer_data.pointer3 = addr + 12288;
    164c:	f502 5180 	add.w	r1, r2, #4096	; 0x1000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1650:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    1654:	6159      	str	r1, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    1656:	619a      	str	r2, [r3, #24]
		while (USB1_ENDPTPRIME) ;
    1658:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    165c:	2b00      	cmp	r3, #0
    165e:	d1fb      	bne.n	1658 <usb_isr+0x2f4>
	endpoint0_transfer_ack.next = 1;
    1660:	4aa7      	ldr	r2, [pc, #668]	; (1900 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1662:	64f3      	str	r3, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    1664:	6093      	str	r3, [r2, #8]
	endpoint0_transfer_ack.next = 1;
    1666:	2301      	movs	r3, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1668:	64b2      	str	r2, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    166a:	6013      	str	r3, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    166c:	f248 0380 	movw	r3, #32896	; 0x8080
    1670:	6053      	str	r3, [r2, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1672:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1676:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    167a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    167e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1682:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1686:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    168a:	f8ca 3000 	str.w	r3, [sl]
	while (USB1_ENDPTPRIME) ;
    168e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1692:	2b00      	cmp	r3, #0
    1694:	d1fb      	bne.n	168e <usb_isr+0x32a>
    1696:	e6ba      	b.n	140e <usb_isr+0xaa>
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    1698:	b280      	uxth	r0, r0
    169a:	b938      	cbnz	r0, 16ac <usb_isr+0x348>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    169c:	4b99      	ldr	r3, [pc, #612]	; (1904 <usb_isr+0x5a0>)
			usb_cdc_line_rtsdtr = setup.wValue;
    169e:	f3c2 4207 	ubfx	r2, r2, #16, #8
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    16a2:	6819      	ldr	r1, [r3, #0]
    16a4:	4b98      	ldr	r3, [pc, #608]	; (1908 <usb_isr+0x5a4>)
    16a6:	6019      	str	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    16a8:	4b98      	ldr	r3, [pc, #608]	; (190c <usb_isr+0x5a8>)
    16aa:	701a      	strb	r2, [r3, #0]
	endpoint0_transfer_ack.next = 1;
    16ac:	4b94      	ldr	r3, [pc, #592]	; (1900 <usb_isr+0x59c>)
	endpoint0_transfer_ack.pointer0 = 0;
    16ae:	2200      	movs	r2, #0
    16b0:	609a      	str	r2, [r3, #8]
	endpoint_queue_head[1].status = 0;
    16b2:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    16b4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    16b6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    16b8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    16ba:	2280      	movs	r2, #128	; 0x80
    16bc:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    16be:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    16c2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    16c6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16ca:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    16ce:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    16d2:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    16d6:	2b00      	cmp	r3, #0
    16d8:	d1fb      	bne.n	16d2 <usb_isr+0x36e>
    16da:	e698      	b.n	140e <usb_isr+0xaa>
		usb_configuration = setup.wValue;
    16dc:	f3c2 4207 	ubfx	r2, r2, #16, #8
    16e0:	4b8b      	ldr	r3, [pc, #556]	; (1910 <usb_isr+0x5ac>)
    16e2:	701a      	strb	r2, [r3, #0]
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    16e4:	4b8b      	ldr	r3, [pc, #556]	; (1914 <usb_isr+0x5b0>)
    16e6:	f8c4 31c8 	str.w	r3, [r4, #456]	; 0x1c8
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    16ea:	4b8b      	ldr	r3, [pc, #556]	; (1918 <usb_isr+0x5b4>)
    16ec:	f8c4 31cc 	str.w	r3, [r4, #460]	; 0x1cc
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    16f0:	4b8a      	ldr	r3, [pc, #552]	; (191c <usb_isr+0x5b8>)
    16f2:	f8c4 31d0 	str.w	r3, [r4, #464]	; 0x1d0
		usb_serial_configure();
    16f6:	f000 faeb 	bl	1cd0 <usb_serial_configure>
		memset(endpoint_queue_head + 2, 0, sizeof(endpoint_t) * 2);
    16fa:	2280      	movs	r2, #128	; 0x80
    16fc:	4629      	mov	r1, r5
    16fe:	4888      	ldr	r0, [pc, #544]	; (1920 <usb_isr+0x5bc>)
    1700:	f001 f8a4 	bl	284c <memset>
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    1704:	4b87      	ldr	r3, [pc, #540]	; (1924 <usb_isr+0x5c0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1706:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[2].pointer4 = 0xB8C6CF5D;
    1708:	f8c6 b0a0 	str.w	fp, [r6, #160]	; 0xa0
		endpoint_queue_head[3].pointer4 = 0x74D59319;
    170c:	f8c6 30e0 	str.w	r3, [r6, #224]	; 0xe0
	endpoint0_transfer_ack.next = 1;
    1710:	4b7b      	ldr	r3, [pc, #492]	; (1900 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    1712:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1714:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.next = 1;
    1716:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1718:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.pointer0 = 0;
    171a:	609d      	str	r5, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    171c:	601a      	str	r2, [r3, #0]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    171e:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1722:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1726:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    172a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    172e:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    1732:	f8ca 5000 	str.w	r5, [sl]
	while (USB1_ENDPTPRIME) ;
    1736:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    173a:	2b00      	cmp	r3, #0
    173c:	d1fb      	bne.n	1736 <usb_isr+0x3d2>
    173e:	e666      	b.n	140e <usb_isr+0xaa>
	endpoint0_transfer_ack.next = 1;
    1740:	4b6f      	ldr	r3, [pc, #444]	; (1900 <usb_isr+0x59c>)
    1742:	2101      	movs	r1, #1
	endpoint_queue_head[1].status = 0;
    1744:	64f5      	str	r5, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.next = 1;
    1746:	6019      	str	r1, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1748:	2180      	movs	r1, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    174a:	609d      	str	r5, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    174c:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    174e:	6059      	str	r1, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1750:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    1754:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1758:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    175c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1760:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1764:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1768:	2b00      	cmp	r3, #0
    176a:	d1fb      	bne.n	1764 <usb_isr+0x400>
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    176c:	0c13      	lsrs	r3, r2, #16
    176e:	065b      	lsls	r3, r3, #25
    1770:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    1774:	f8c4 3154 	str.w	r3, [r4, #340]	; 0x154
		return;
    1778:	e649      	b.n	140e <usb_isr+0xaa>
		reply_buffer[0] = usb_configuration;
    177a:	4b65      	ldr	r3, [pc, #404]	; (1910 <usb_isr+0x5ac>)
		endpoint0_transmit(reply_buffer, 1, 0);
    177c:	2101      	movs	r1, #1
		reply_buffer[0] = usb_configuration;
    177e:	486a      	ldr	r0, [pc, #424]	; (1928 <usb_isr+0x5c4>)
    1780:	781b      	ldrb	r3, [r3, #0]
    1782:	7003      	strb	r3, [r0, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    1784:	f7ff fd8c 	bl	12a0 <endpoint0_transmit.constprop.0>
		return;
    1788:	e641      	b.n	140e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    178a:	b283      	uxth	r3, r0
		if (endpoint > 7) break;
    178c:	f010 0078 	ands.w	r0, r0, #120	; 0x78
    1790:	f47f ae39 	bne.w	1406 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    1794:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    1798:	f858 1022 	ldr.w	r1, [r8, r2, lsl #2]
		reply_buffer[0] = 0;
    179c:	4a62      	ldr	r2, [pc, #392]	; (1928 <usb_isr+0x5c4>)
    179e:	8010      	strh	r0, [r2, #0]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    17a0:	0618      	lsls	r0, r3, #24
    17a2:	f100 809e 	bmi.w	18e2 <usb_isr+0x57e>
    17a6:	07cb      	lsls	r3, r1, #31
    17a8:	d501      	bpl.n	17ae <usb_isr+0x44a>
			reply_buffer[0] = 1;
    17aa:	2301      	movs	r3, #1
    17ac:	7013      	strb	r3, [r2, #0]
		endpoint0_transmit(reply_buffer, 2, 0);
    17ae:	2102      	movs	r1, #2
    17b0:	485d      	ldr	r0, [pc, #372]	; (1928 <usb_isr+0x5c4>)
    17b2:	f7ff fd75 	bl	12a0 <endpoint0_transmit.constprop.0>
		return;
    17b6:	e62a      	b.n	140e <usb_isr+0xaa>
		if (endpoint > 7) break;
    17b8:	f010 0f78 	tst.w	r0, #120	; 0x78
    17bc:	b283      	uxth	r3, r0
    17be:	f47f ae22 	bne.w	1406 <usb_isr+0xa2>
		endpoint = setup.wIndex & 0x7F;
    17c2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    17c6:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    17ca:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    17ce:	bf14      	ite	ne
    17d0:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    17d4:	f043 0301 	orreq.w	r3, r3, #1
    17d8:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    17dc:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    17de:	4b48      	ldr	r3, [pc, #288]	; (1900 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    17e0:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    17e2:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    17e4:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    17e6:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    17e8:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    17ea:	2280      	movs	r2, #128	; 0x80
    17ec:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    17ee:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    17f2:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    17f6:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    17fa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    17fe:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    1802:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1806:	2b00      	cmp	r3, #0
    1808:	d1fb      	bne.n	1802 <usb_isr+0x49e>
    180a:	e600      	b.n	140e <usb_isr+0xaa>
		endpoint = setup.wIndex & 0x7F;
    180c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
		if (dir) {
    1810:	f013 0f80 	tst.w	r3, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    1814:	f858 3022 	ldr.w	r3, [r8, r2, lsl #2]
    1818:	bf14      	ite	ne
    181a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    181e:	f023 0301 	biceq.w	r3, r3, #1
    1822:	f848 3022 	str.w	r3, [r8, r2, lsl #2]
	endpoint0_transfer_ack.pointer0 = 0;
    1826:	2200      	movs	r2, #0
	endpoint0_transfer_ack.next = 1;
    1828:	4b35      	ldr	r3, [pc, #212]	; (1900 <usb_isr+0x59c>)
	endpoint_queue_head[1].status = 0;
    182a:	64f2      	str	r2, [r6, #76]	; 0x4c
	endpoint0_transfer_ack.pointer0 = 0;
    182c:	609a      	str	r2, [r3, #8]
	endpoint0_transfer_ack.next = 1;
    182e:	2201      	movs	r2, #1
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    1830:	64b3      	str	r3, [r6, #72]	; 0x48
	endpoint0_transfer_ack.next = 1;
    1832:	601a      	str	r2, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    1834:	2280      	movs	r2, #128	; 0x80
    1836:	605a      	str	r2, [r3, #4]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    1838:	f04f 1301 	mov.w	r3, #65537	; 0x10001
    183c:	f8c4 31bc 	str.w	r3, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    1840:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    1848:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	while (USB1_ENDPTPRIME) ;
    184c:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    1850:	2b00      	cmp	r3, #0
    1852:	d1fb      	bne.n	184c <usb_isr+0x4e8>
    1854:	e5db      	b.n	140e <usb_isr+0xaa>
				endpoint0_notify_mask = 0;
    1856:	2000      	movs	r0, #0
    1858:	6008      	str	r0, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    185a:	4926      	ldr	r1, [pc, #152]	; (18f4 <usb_isr+0x590>)
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    185c:	880c      	ldrh	r4, [r1, #0]
	setup.bothwords = endpoint0_setupdata.bothwords;
    185e:	6848      	ldr	r0, [r1, #4]
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    1860:	f242 0121 	movw	r1, #8225	; 0x2021
    1864:	428c      	cmp	r4, r1
    1866:	f47f ae25 	bne.w	14b4 <usb_isr+0x150>
    186a:	b280      	uxth	r0, r0
    186c:	2800      	cmp	r0, #0
    186e:	f47f ae21 	bne.w	14b4 <usb_isr+0x150>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    1872:	492e      	ldr	r1, [pc, #184]	; (192c <usb_isr+0x5c8>)
    1874:	4c2e      	ldr	r4, [pc, #184]	; (1930 <usb_isr+0x5cc>)
    1876:	c903      	ldmia	r1, {r0, r1}
    1878:	80a1      	strh	r1, [r4, #4]
		if (usb_cdc_line_coding[0] == 134) {
    187a:	2886      	cmp	r0, #134	; 0x86
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    187c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    1880:	6020      	str	r0, [r4, #0]
    1882:	71a1      	strb	r1, [r4, #6]
		if (usb_cdc_line_coding[0] == 134) {
    1884:	f47f ae16 	bne.w	14b4 <usb_isr+0x150>
	__disable_irq();
    1888:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    188a:	482a      	ldr	r0, [pc, #168]	; (1934 <usb_isr+0x5d0>)
    188c:	7801      	ldrb	r1, [r0, #0]
    188e:	f041 0108 	orr.w	r1, r1, #8
    1892:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    1894:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    1898:	060d      	lsls	r5, r1, #24
    189a:	d405      	bmi.n	18a8 <usb_isr+0x544>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    189c:	2080      	movs	r0, #128	; 0x80
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    189e:	4301      	orrs	r1, r0
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    18a0:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    18a4:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	__enable_irq();
    18a8:	b662      	cpsie	i
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    18aa:	4a23      	ldr	r2, [pc, #140]	; (1938 <usb_isr+0x5d4>)
    18ac:	2150      	movs	r1, #80	; 0x50
    18ae:	7011      	strb	r1, [r2, #0]
    18b0:	e600      	b.n	14b4 <usb_isr+0x150>
				if (datalen > setup.wLength) datalen = setup.wLength;
    18b2:	0c00      	lsrs	r0, r0, #16
					datalen = *(list->addr);
    18b4:	782a      	ldrb	r2, [r5, #0]
    18b6:	4282      	cmp	r2, r0
    18b8:	bf28      	it	cs
    18ba:	4602      	movcs	r2, r0
				} else if (setup.wValue == 0x700) {
    18bc:	f5be 6fe0 	cmp.w	lr, #1792	; 0x700
    18c0:	d144      	bne.n	194c <usb_isr+0x5e8>
					if (usb_high_speed) src = usb_config_descriptor_12;
    18c2:	4b1e      	ldr	r3, [pc, #120]	; (193c <usb_isr+0x5d8>)
					memcpy(usb_descriptor_buffer, src, datalen);
    18c4:	4d1e      	ldr	r5, [pc, #120]	; (1940 <usb_isr+0x5dc>)
					if (usb_high_speed) src = usb_config_descriptor_12;
    18c6:	7818      	ldrb	r0, [r3, #0]
    18c8:	491e      	ldr	r1, [pc, #120]	; (1944 <usb_isr+0x5e0>)
    18ca:	4b1f      	ldr	r3, [pc, #124]	; (1948 <usb_isr+0x5e4>)
					memcpy(usb_descriptor_buffer, src, datalen);
    18cc:	9201      	str	r2, [sp, #4]
    18ce:	2800      	cmp	r0, #0
    18d0:	bf18      	it	ne
    18d2:	4619      	movne	r1, r3
    18d4:	4628      	mov	r0, r5
    18d6:	f000 fb27 	bl	1f28 <memcpy>
					usb_descriptor_buffer[1] = 7;
    18da:	2307      	movs	r3, #7
    18dc:	706b      	strb	r3, [r5, #1]
    18de:	9a01      	ldr	r2, [sp, #4]
    18e0:	e03b      	b.n	195a <usb_isr+0x5f6>
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    18e2:	03c9      	lsls	r1, r1, #15
    18e4:	f53f af61 	bmi.w	17aa <usb_isr+0x446>
    18e8:	e761      	b.n	17ae <usb_isr+0x44a>
    18ea:	bf00      	nop
    18ec:	20000ee0 	.word	0x20000ee0
    18f0:	200023f8 	.word	0x200023f8
    18f4:	20001080 	.word	0x20001080
    18f8:	00070080 	.word	0x00070080
    18fc:	200033f8 	.word	0x200033f8
    1900:	20000ec0 	.word	0x20000ec0
    1904:	200015d4 	.word	0x200015d4
    1908:	200015e4 	.word	0x200015e4
    190c:	200015ff 	.word	0x200015ff
    1910:	20001600 	.word	0x20001600
    1914:	00cc0002 	.word	0x00cc0002
    1918:	000200c8 	.word	0x000200c8
    191c:	00c80002 	.word	0x00c80002
    1920:	20000080 	.word	0x20000080
    1924:	74d59319 	.word	0x74d59319
    1928:	20001408 	.word	0x20001408
    192c:	200013f8 	.word	0x200013f8
    1930:	200015dc 	.word	0x200015dc
    1934:	200015fc 	.word	0x200015fc
    1938:	20001602 	.word	0x20001602
    193c:	20001601 	.word	0x20001601
    1940:	20200000 	.word	0x20200000
    1944:	60001b90 	.word	0x60001b90
    1948:	60001b2c 	.word	0x60001b2c
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    194c:	4629      	mov	r1, r5
    194e:	4d10      	ldr	r5, [pc, #64]	; (1990 <usb_isr+0x62c>)
    1950:	9201      	str	r2, [sp, #4]
    1952:	4628      	mov	r0, r5
    1954:	f000 fae8 	bl	1f28 <memcpy>
    1958:	9a01      	ldr	r2, [sp, #4]
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    195a:	f025 031f 	bic.w	r3, r5, #31
	uint32_t end_addr = (uint32_t)addr + size;
    195e:	4415      	add	r5, r2
	asm("dsb");
    1960:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1964:	f04f 21e0 	mov.w	r1, #3758153728	; 0xe000e000
    1968:	f8c1 3f70 	str.w	r3, [r1, #3952]	; 0xf70
		location += 32;
    196c:	3320      	adds	r3, #32
	} while (location < end_addr);
    196e:	429d      	cmp	r5, r3
    1970:	d8fa      	bhi.n	1968 <usb_isr+0x604>
	asm("dsb");
    1972:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1976:	f3bf 8f6f 	isb	sy
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    197a:	4805      	ldr	r0, [pc, #20]	; (1990 <usb_isr+0x62c>)
    197c:	4611      	mov	r1, r2
    197e:	f7ff fc8f 	bl	12a0 <endpoint0_transmit.constprop.0>
				return;
    1982:	e544      	b.n	140e <usb_isr+0xaa>
				usb_stop_sof_interrupts(NUM_INTERFACE);
    1984:	2003      	movs	r0, #3
    1986:	f7ff fcd7 	bl	1338 <usb_stop_sof_interrupts>
				_reboot_Teensyduino_();
    198a:	f001 f99d 	bl	2cc8 <___reboot_Teensyduino__veneer>
    198e:	bf00      	nop
    1990:	20200000 	.word	0x20200000

00001994 <usb_config_rx>:
{
    1994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1998:	461f      	mov	r7, r3
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    199a:	1e83      	subs	r3, r0, #2
    199c:	2b02      	cmp	r3, #2
    199e:	d901      	bls.n	19a4 <usb_config_rx+0x10>
}
    19a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    19a4:	f8df 904c 	ldr.w	r9, [pc, #76]	; 19f4 <usb_config_rx+0x60>
    19a8:	4615      	mov	r5, r2
    19aa:	460c      	mov	r4, r1
	memset(qh, 0, sizeof(endpoint_t));
    19ac:	223c      	movs	r2, #60	; 0x3c
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    19ae:	eb09 18c0 	add.w	r8, r9, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    19b2:	4606      	mov	r6, r0
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    19b4:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
	memset(qh, 0, sizeof(endpoint_t));
    19b8:	2100      	movs	r1, #0
    19ba:	f108 0004 	add.w	r0, r8, #4
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    19be:	0424      	lsls	r4, r4, #16
	memset(qh, 0, sizeof(endpoint_t));
    19c0:	f000 ff44 	bl	284c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    19c4:	fab5 f285 	clz	r2, r5
	qh->next = 1; // Terminate bit = 1
    19c8:	2301      	movs	r3, #1
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    19ca:	0952      	lsrs	r2, r2, #5
    19cc:	ea44 7442 	orr.w	r4, r4, r2, lsl #29
	qh->config = config;
    19d0:	f849 400a 	str.w	r4, [r9, sl]
	qh->callback_function = callback;
    19d4:	f8c8 7038 	str.w	r7, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    19d8:	f8c8 3008 	str.w	r3, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << ep);
    19dc:	2f00      	cmp	r7, #0
    19de:	d0df      	beq.n	19a0 <usb_config_rx+0xc>
    19e0:	4a03      	ldr	r2, [pc, #12]	; (19f0 <usb_config_rx+0x5c>)
    19e2:	40b3      	lsls	r3, r6
    19e4:	6811      	ldr	r1, [r2, #0]
    19e6:	430b      	orrs	r3, r1
    19e8:	6013      	str	r3, [r2, #0]
}
    19ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    19ee:	bf00      	nop
    19f0:	20001404 	.word	0x20001404
    19f4:	20000000 	.word	0x20000000

000019f8 <usb_config_tx>:
{
    19f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    19fc:	460d      	mov	r5, r1
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    19fe:	1e81      	subs	r1, r0, #2
    1a00:	2902      	cmp	r1, #2
    1a02:	d901      	bls.n	1a08 <usb_config_tx+0x10>
}
    1a04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1a08:	01c7      	lsls	r7, r0, #7
    1a0a:	f8df 904c 	ldr.w	r9, [pc, #76]	; 1a58 <usb_config_tx+0x60>
    1a0e:	4692      	mov	sl, r2
    1a10:	4604      	mov	r4, r0
    1a12:	3740      	adds	r7, #64	; 0x40
	memset(qh, 0, sizeof(endpoint_t));
    1a14:	223c      	movs	r2, #60	; 0x3c
    1a16:	2100      	movs	r1, #0
    1a18:	461e      	mov	r6, r3
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    1a1a:	eb09 0807 	add.w	r8, r9, r7
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a1e:	042d      	lsls	r5, r5, #16
	memset(qh, 0, sizeof(endpoint_t));
    1a20:	f108 0004 	add.w	r0, r8, #4
    1a24:	f000 ff12 	bl	284c <memset>
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    1a28:	faba f28a 	clz	r2, sl
    1a2c:	0952      	lsrs	r2, r2, #5
    1a2e:	ea45 7242 	orr.w	r2, r5, r2, lsl #29
	qh->config = config;
    1a32:	f849 2007 	str.w	r2, [r9, r7]
	qh->next = 1; // Terminate bit = 1
    1a36:	2201      	movs	r2, #1
	qh->callback_function = callback;
    1a38:	f8c8 6038 	str.w	r6, [r8, #56]	; 0x38
	qh->next = 1; // Terminate bit = 1
    1a3c:	f8c8 2008 	str.w	r2, [r8, #8]
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    1a40:	2e00      	cmp	r6, #0
    1a42:	d0df      	beq.n	1a04 <usb_config_tx+0xc>
    1a44:	4b03      	ldr	r3, [pc, #12]	; (1a54 <usb_config_tx+0x5c>)
    1a46:	3410      	adds	r4, #16
    1a48:	6819      	ldr	r1, [r3, #0]
    1a4a:	40a2      	lsls	r2, r4
    1a4c:	430a      	orrs	r2, r1
    1a4e:	601a      	str	r2, [r3, #0]
}
    1a50:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1a54:	20001404 	.word	0x20001404
    1a58:	20000000 	.word	0x20000000

00001a5c <usb_prepare_transfer>:
	transfer->status = (len << 16) | (1<<7);
    1a5c:	0412      	lsls	r2, r2, #16
	transfer->pointer0 = addr;
    1a5e:	6081      	str	r1, [r0, #8]
	transfer->callback_param = param;
    1a60:	61c3      	str	r3, [r0, #28]
	transfer->pointer3 = addr + 12288;
    1a62:	f501 5340 	add.w	r3, r1, #12288	; 0x3000
	transfer->status = (len << 16) | (1<<7);
    1a66:	f042 0280 	orr.w	r2, r2, #128	; 0x80
{
    1a6a:	b410      	push	{r4}
	transfer->next = 1;
    1a6c:	2401      	movs	r4, #1
	transfer->status = (len << 16) | (1<<7);
    1a6e:	6042      	str	r2, [r0, #4]
	transfer->pointer2 = addr + 8192;
    1a70:	f501 5200 	add.w	r2, r1, #8192	; 0x2000
	transfer->next = 1;
    1a74:	6004      	str	r4, [r0, #0]
	transfer->pointer1 = addr + 4096;
    1a76:	f501 5480 	add.w	r4, r1, #4096	; 0x1000
	transfer->pointer4 = addr + 16384;
    1a7a:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
	transfer->pointer1 = addr + 4096;
    1a7e:	60c4      	str	r4, [r0, #12]
	transfer->pointer4 = addr + 16384;
    1a80:	6181      	str	r1, [r0, #24]
}
    1a82:	f85d 4b04 	ldr.w	r4, [sp], #4
	transfer->pointer3 = addr + 12288;
    1a86:	e9c0 2304 	strd	r2, r3, [r0, #16]
}
    1a8a:	4770      	bx	lr

00001a8c <usb_transmit>:

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1a8c:	1e83      	subs	r3, r0, #2
{
    1a8e:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1a90:	2b02      	cmp	r3, #2
    1a92:	d900      	bls.n	1a96 <usb_transmit+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}
    1a94:	4770      	bx	lr
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1a96:	4b06      	ldr	r3, [pc, #24]	; (1ab0 <usb_transmit+0x24>)
	uint32_t mask = 1 << (endpoint_number + 16);
    1a98:	f100 0110 	add.w	r1, r0, #16
    1a9c:	f04f 0c01 	mov.w	ip, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
    1aa0:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
	schedule_transfer(endpoint, mask, transfer);
    1aa4:	fa0c f101 	lsl.w	r1, ip, r1
    1aa8:	3040      	adds	r0, #64	; 0x40
    1aaa:	f7ff bb99 	b.w	11e0 <schedule_transfer>
    1aae:	bf00      	nop
    1ab0:	20000000 	.word	0x20000000

00001ab4 <usb_receive>:

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1ab4:	1e83      	subs	r3, r0, #2
{
    1ab6:	460a      	mov	r2, r1
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    1ab8:	2b02      	cmp	r3, #2
    1aba:	d900      	bls.n	1abe <usb_receive+0xa>
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
}
    1abc:	4770      	bx	lr
	uint32_t mask = 1 << endpoint_number;
    1abe:	2101      	movs	r1, #1
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
    1ac0:	4b02      	ldr	r3, [pc, #8]	; (1acc <usb_receive+0x18>)
	schedule_transfer(endpoint, mask, transfer);
    1ac2:	4081      	lsls	r1, r0
    1ac4:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    1ac8:	f7ff bb8a 	b.w	11e0 <schedule_transfer>
    1acc:	20000000 	.word	0x20000000

00001ad0 <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ad0:	4a12      	ldr	r2, [pc, #72]	; (1b1c <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    1ad2:	4b13      	ldr	r3, [pc, #76]	; (1b20 <usb_init_serialnumber+0x50>)
	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    1ad4:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    1ad8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	if (num < 10000000) num = num * 10;
    1adc:	4298      	cmp	r0, r3
{
    1ade:	b510      	push	{r4, lr}
    1ae0:	b084      	sub	sp, #16
	if (num < 10000000) num = num * 10;
    1ae2:	d202      	bcs.n	1aea <usb_init_serialnumber+0x1a>
    1ae4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    1ae8:	0040      	lsls	r0, r0, #1
	ultoa(num, buf, 10);
    1aea:	4c0e      	ldr	r4, [pc, #56]	; (1b24 <usb_init_serialnumber+0x54>)
    1aec:	a901      	add	r1, sp, #4
    1aee:	220a      	movs	r2, #10
    1af0:	f000 fab4 	bl	205c <ultoa>
	for (i=0; i<10; i++) {
    1af4:	a901      	add	r1, sp, #4
    1af6:	2300      	movs	r3, #0
    1af8:	4620      	mov	r0, r4
		char c = buf[i];
    1afa:	f811 2b01 	ldrb.w	r2, [r1], #1
	for (i=0; i<10; i++) {
    1afe:	3301      	adds	r3, #1
		if (!c) break;
    1b00:	b13a      	cbz	r2, 1b12 <usb_init_serialnumber+0x42>
	for (i=0; i<10; i++) {
    1b02:	2b0a      	cmp	r3, #10
		usb_string_serial_number_default.wString[i] = c;
    1b04:	f820 2f02 	strh.w	r2, [r0, #2]!
	for (i=0; i<10; i++) {
    1b08:	d1f7      	bne.n	1afa <usb_init_serialnumber+0x2a>
    1b0a:	2316      	movs	r3, #22
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1b0c:	7023      	strb	r3, [r4, #0]
}
    1b0e:	b004      	add	sp, #16
    1b10:	bd10      	pop	{r4, pc}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    1b12:	005b      	lsls	r3, r3, #1
    1b14:	b2db      	uxtb	r3, r3
    1b16:	7023      	strb	r3, [r4, #0]
}
    1b18:	b004      	add	sp, #16
    1b1a:	bd10      	pop	{r4, pc}
    1b1c:	401f4400 	.word	0x401f4400
    1b20:	00989680 	.word	0x00989680
    1b24:	20000b64 	.word	0x20000b64

00001b28 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    1b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1b2a:	4c14      	ldr	r4, [pc, #80]	; (1b7c <rx_queue_transfer+0x54>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b2c:	f04f 25e0 	mov.w	r5, #3758153728	; 0xe000e000
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b30:	4e13      	ldr	r6, [pc, #76]	; (1b80 <rx_queue_transfer+0x58>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b32:	f44f 3200 	mov.w	r2, #131072	; 0x20000
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    1b36:	eb04 2440 	add.w	r4, r4, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b3a:	4f12      	ldr	r7, [pc, #72]	; (1b84 <rx_queue_transfer+0x5c>)
    1b3c:	eb06 1640 	add.w	r6, r6, r0, lsl #5
{
    1b40:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
    1b42:	f8c5 218c 	str.w	r2, [r5, #396]	; 0x18c
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    1b46:	4621      	mov	r1, r4
    1b48:	883a      	ldrh	r2, [r7, #0]
    1b4a:	4630      	mov	r0, r6
    1b4c:	f7ff ff86 	bl	1a5c <usb_prepare_transfer>
	arm_dcache_delete(buffer, rx_packet_size);
    1b50:	883b      	ldrh	r3, [r7, #0]
	uint32_t end_addr = (uint32_t)addr + size;
    1b52:	4423      	add	r3, r4
	asm("dsb");
    1b54:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCIMVAC = location;
    1b58:	f8c5 4f5c 	str.w	r4, [r5, #3932]	; 0xf5c
		location += 32;
    1b5c:	3420      	adds	r4, #32
	} while (location < end_addr);
    1b5e:	42a3      	cmp	r3, r4
    1b60:	d8fa      	bhi.n	1b58 <rx_queue_transfer+0x30>
	asm("dsb");
    1b62:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1b66:	f3bf 8f6f 	isb	sy
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    1b6a:	2003      	movs	r0, #3
    1b6c:	4631      	mov	r1, r6
    1b6e:	f7ff ffa1 	bl	1ab4 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    1b72:	f44f 3300 	mov.w	r3, #131072	; 0x20000
    1b76:	f8c5 310c 	str.w	r3, [r5, #268]	; 0x10c
}
    1b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    1b7c:	20200080 	.word	0x20200080
    1b80:	20000f00 	.word	0x20000f00
    1b84:	200015f0 	.word	0x200015f0

00001b88 <rx_event>:

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1b88:	4b24      	ldr	r3, [pc, #144]	; (1c1c <rx_event+0x94>)
{
    1b8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1b8e:	881c      	ldrh	r4, [r3, #0]
    1b90:	6843      	ldr	r3, [r0, #4]
	int i = t->callback_param;
    1b92:	69c5      	ldr	r5, [r0, #28]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    1b94:	f3c3 430e 	ubfx	r3, r3, #16, #15
    1b98:	1ae4      	subs	r4, r4, r3
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    1b9a:	2c00      	cmp	r4, #0
    1b9c:	dd24      	ble.n	1be8 <rx_event+0x60>
		// received a packet with data
		uint32_t head = rx_head;
    1b9e:	4920      	ldr	r1, [pc, #128]	; (1c20 <rx_event+0x98>)
		if (head != rx_tail) {
    1ba0:	4820      	ldr	r0, [pc, #128]	; (1c24 <rx_event+0x9c>)
		uint32_t head = rx_head;
    1ba2:	780a      	ldrb	r2, [r1, #0]
		if (head != rx_tail) {
    1ba4:	7800      	ldrb	r0, [r0, #0]
		uint32_t head = rx_head;
    1ba6:	b2d3      	uxtb	r3, r2
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
    1ba8:	4e1f      	ldr	r6, [pc, #124]	; (1c28 <rx_event+0xa0>)
		if (head != rx_tail) {
    1baa:	4282      	cmp	r2, r0
			uint32_t ii = rx_list[head];
    1bac:	481f      	ldr	r0, [pc, #124]	; (1c2c <rx_event+0xa4>)
		if (head != rx_tail) {
    1bae:	d007      	beq.n	1bc0 <rx_event+0x38>
			uint32_t ii = rx_list[head];
    1bb0:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    1bb4:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    1bb8:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    1bbc:	4294      	cmp	r4, r2
    1bbe:	d918      	bls.n	1bf2 <rx_event+0x6a>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    1bc0:	3301      	adds	r3, #1
		rx_index[i] = 0;
    1bc2:	2200      	movs	r2, #0
		rx_count[i] = len;
    1bc4:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
    1bc8:	2b08      	cmp	r3, #8
		rx_index[i] = 0;
    1bca:	4e19      	ldr	r6, [pc, #100]	; (1c30 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    1bcc:	bf88      	it	hi
    1bce:	4613      	movhi	r3, r2
		rx_index[i] = 0;
    1bd0:	f826 2015 	strh.w	r2, [r6, r5, lsl #1]
		rx_list[head] = i;
		rx_head = head;
    1bd4:	bf98      	it	ls
    1bd6:	b2da      	uxtbls	r2, r3
		rx_list[head] = i;
    1bd8:	54c5      	strb	r5, [r0, r3]
		rx_available += len;
    1bda:	4b16      	ldr	r3, [pc, #88]	; (1c34 <rx_event+0xac>)
		rx_head = head;
    1bdc:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    1bde:	681a      	ldr	r2, [r3, #0]
    1be0:	4414      	add	r4, r2
    1be2:	601c      	str	r4, [r3, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    1be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		rx_queue_transfer(i);
    1be8:	4628      	mov	r0, r5
}
    1bea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_queue_transfer(i);
    1bee:	f7ff bf9b 	b.w	1b28 <rx_queue_transfer>
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1bf2:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    1bf6:	4910      	ldr	r1, [pc, #64]	; (1c38 <rx_event+0xb0>)
    1bf8:	4622      	mov	r2, r4
				rx_count[ii] = count + len;
    1bfa:	4427      	add	r7, r4
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    1bfc:	4408      	add	r0, r1
    1bfe:	eb01 2145 	add.w	r1, r1, r5, lsl #9
    1c02:	f000 f991 	bl	1f28 <memcpy>
				rx_available += len;
    1c06:	4a0b      	ldr	r2, [pc, #44]	; (1c34 <rx_event+0xac>)
				rx_queue_transfer(i);
    1c08:	4628      	mov	r0, r5
				rx_count[ii] = count + len;
    1c0a:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    1c0e:	6813      	ldr	r3, [r2, #0]
    1c10:	4423      	add	r3, r4
}
    1c12:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				rx_available += len;
    1c16:	6013      	str	r3, [r2, #0]
				rx_queue_transfer(i);
    1c18:	f7ff bf86 	b.w	1b28 <rx_queue_transfer>
    1c1c:	200015f0 	.word	0x200015f0
    1c20:	200015fa 	.word	0x200015fa
    1c24:	200015fb 	.word	0x200015fb
    1c28:	20001414 	.word	0x20001414
    1c2c:	20001434 	.word	0x20001434
    1c30:	20001424 	.word	0x20001424
    1c34:	20001410 	.word	0x20001410
    1c38:	20200080 	.word	0x20200080

00001c3c <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    1c3c:	4b1d      	ldr	r3, [pc, #116]	; (1cb4 <usb_serial_flush_callback+0x78>)
    1c3e:	781a      	ldrb	r2, [r3, #0]
    1c40:	2a00      	cmp	r2, #0
    1c42:	d136      	bne.n	1cb2 <usb_serial_flush_callback+0x76>
	if (!usb_configuration) return;
    1c44:	f002 03ff 	and.w	r3, r2, #255	; 0xff
    1c48:	4a1b      	ldr	r2, [pc, #108]	; (1cb8 <usb_serial_flush_callback+0x7c>)
    1c4a:	7812      	ldrb	r2, [r2, #0]
    1c4c:	b38a      	cbz	r2, 1cb2 <usb_serial_flush_callback+0x76>
{
    1c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_available == 0) return;
    1c52:	4d1a      	ldr	r5, [pc, #104]	; (1cbc <usb_serial_flush_callback+0x80>)
    1c54:	882a      	ldrh	r2, [r5, #0]
    1c56:	b352      	cbz	r2, 1cae <usb_serial_flush_callback+0x72>
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    1c58:	4e19      	ldr	r6, [pc, #100]	; (1cc0 <usb_serial_flush_callback+0x84>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    1c5a:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
	transfer_t *xfer = tx_transfer + tx_head;
    1c5e:	4f19      	ldr	r7, [pc, #100]	; (1cc4 <usb_serial_flush_callback+0x88>)
    1c60:	7832      	ldrb	r2, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1c62:	4c19      	ldr	r4, [pc, #100]	; (1cc8 <usb_serial_flush_callback+0x8c>)
	transfer_t *xfer = tx_transfer + tx_head;
    1c64:	eb07 1742 	add.w	r7, r7, r2, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    1c68:	eb04 24c2 	add.w	r4, r4, r2, lsl #11
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    1c6c:	4642      	mov	r2, r8
    1c6e:	4638      	mov	r0, r7
    1c70:	4621      	mov	r1, r4
    1c72:	f7ff fef3 	bl	1a5c <usb_prepare_transfer>
	uint32_t end_addr = (uint32_t)addr + size;
    1c76:	eb04 0208 	add.w	r2, r4, r8
	asm("dsb");
    1c7a:	f3bf 8f4f 	dsb	sy
		SCB_CACHE_DCCIMVAC = location;
    1c7e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    1c82:	f8c3 4f70 	str.w	r4, [r3, #3952]	; 0xf70
		location += 32;
    1c86:	3420      	adds	r4, #32
	} while (location < end_addr);
    1c88:	42a2      	cmp	r2, r4
    1c8a:	d8fa      	bhi.n	1c82 <usb_serial_flush_callback+0x46>
	asm("dsb");
    1c8c:	f3bf 8f4f 	dsb	sy
	asm("isb");
    1c90:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    1c94:	2004      	movs	r0, #4
    1c96:	4639      	mov	r1, r7
    1c98:	f7ff fef8 	bl	1a8c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    1c9c:	7833      	ldrb	r3, [r6, #0]
    1c9e:	3301      	adds	r3, #1
    1ca0:	b2db      	uxtb	r3, r3
    1ca2:	2b03      	cmp	r3, #3
    1ca4:	bf88      	it	hi
    1ca6:	2300      	movhi	r3, #0
    1ca8:	7033      	strb	r3, [r6, #0]
	tx_available = 0;
    1caa:	2300      	movs	r3, #0
    1cac:	802b      	strh	r3, [r5, #0]
}
    1cae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1cb2:	4770      	bx	lr
    1cb4:	200015fe 	.word	0x200015fe
    1cb8:	20001600 	.word	0x20001600
    1cbc:	200015f2 	.word	0x200015f2
    1cc0:	200015fd 	.word	0x200015fd
    1cc4:	20001000 	.word	0x20001000
    1cc8:	20201080 	.word	0x20201080

00001ccc <usb_serial_reset>:
}
    1ccc:	4770      	bx	lr
    1cce:	bf00      	nop

00001cd0 <usb_serial_configure>:
	if (usb_high_speed) {
    1cd0:	4b2d      	ldr	r3, [pc, #180]	; (1d88 <usb_serial_configure+0xb8>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1cd2:	2100      	movs	r1, #0
    1cd4:	2280      	movs	r2, #128	; 0x80
    1cd6:	482d      	ldr	r0, [pc, #180]	; (1d8c <usb_serial_configure+0xbc>)
{
    1cd8:	b570      	push	{r4, r5, r6, lr}
	if (usb_high_speed) {
    1cda:	781b      	ldrb	r3, [r3, #0]
	tx_head = 0;
    1cdc:	2400      	movs	r4, #0
		tx_packet_size = CDC_TX_SIZE_480;
    1cde:	4d2c      	ldr	r5, [pc, #176]	; (1d90 <usb_serial_configure+0xc0>)
	if (usb_high_speed) {
    1ce0:	428b      	cmp	r3, r1
		rx_packet_size = CDC_RX_SIZE_480;
    1ce2:	4e2c      	ldr	r6, [pc, #176]	; (1d94 <usb_serial_configure+0xc4>)
	if (usb_high_speed) {
    1ce4:	bf0c      	ite	eq
    1ce6:	2340      	moveq	r3, #64	; 0x40
    1ce8:	f44f 7300 	movne.w	r3, #512	; 0x200
		tx_packet_size = CDC_TX_SIZE_480;
    1cec:	802b      	strh	r3, [r5, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    1cee:	8033      	strh	r3, [r6, #0]
	memset(tx_transfer, 0, sizeof(tx_transfer));
    1cf0:	f000 fdac 	bl	284c <memset>
	tx_head = 0;
    1cf4:	4a28      	ldr	r2, [pc, #160]	; (1d98 <usb_serial_configure+0xc8>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1cf6:	4621      	mov	r1, r4
	tx_available = 0;
    1cf8:	4b28      	ldr	r3, [pc, #160]	; (1d9c <usb_serial_configure+0xcc>)
	tx_head = 0;
    1cfa:	7014      	strb	r4, [r2, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1cfc:	f44f 7280 	mov.w	r2, #256	; 0x100
    1d00:	4827      	ldr	r0, [pc, #156]	; (1da0 <usb_serial_configure+0xd0>)
	tx_available = 0;
    1d02:	801c      	strh	r4, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    1d04:	f000 fda2 	bl	284c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    1d08:	4a26      	ldr	r2, [pc, #152]	; (1da4 <usb_serial_configure+0xd4>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1d0a:	2110      	movs	r1, #16
	memset(rx_index, 0, sizeof(rx_index));
    1d0c:	4b26      	ldr	r3, [pc, #152]	; (1da8 <usb_serial_configure+0xd8>)
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1d0e:	2002      	movs	r0, #2
	memset(rx_count, 0, sizeof(rx_count));
    1d10:	e9c2 4400 	strd	r4, r4, [r2]
    1d14:	e9c2 4402 	strd	r4, r4, [r2, #8]
	rx_head = 0;
    1d18:	4a24      	ldr	r2, [pc, #144]	; (1dac <usb_serial_configure+0xdc>)
	memset(rx_index, 0, sizeof(rx_index));
    1d1a:	e9c3 4400 	strd	r4, r4, [r3]
	rx_head = 0;
    1d1e:	7014      	strb	r4, [r2, #0]
	rx_available = 0;
    1d20:	4a23      	ldr	r2, [pc, #140]	; (1db0 <usb_serial_configure+0xe0>)
	memset(rx_index, 0, sizeof(rx_index));
    1d22:	e9c3 4402 	strd	r4, r4, [r3, #8]
	rx_tail = 0;
    1d26:	4b23      	ldr	r3, [pc, #140]	; (1db4 <usb_serial_configure+0xe4>)
    1d28:	701c      	strb	r4, [r3, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1d2a:	4623      	mov	r3, r4
	rx_available = 0;
    1d2c:	6014      	str	r4, [r2, #0]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    1d2e:	4622      	mov	r2, r4
    1d30:	f7ff fe62 	bl	19f8 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    1d34:	4622      	mov	r2, r4
    1d36:	8831      	ldrh	r1, [r6, #0]
    1d38:	2003      	movs	r0, #3
    1d3a:	4b1f      	ldr	r3, [pc, #124]	; (1db8 <usb_serial_configure+0xe8>)
    1d3c:	f7ff fe2a 	bl	1994 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    1d40:	4623      	mov	r3, r4
    1d42:	2201      	movs	r2, #1
    1d44:	8829      	ldrh	r1, [r5, #0]
    1d46:	2004      	movs	r0, #4
    1d48:	f7ff fe56 	bl	19f8 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    1d4c:	4620      	mov	r0, r4
    1d4e:	3401      	adds	r4, #1
    1d50:	f7ff feea 	bl	1b28 <rx_queue_transfer>
    1d54:	2c08      	cmp	r4, #8
    1d56:	d1f9      	bne.n	1d4c <usb_serial_configure+0x7c>
	USB1_GPTIMER0CTRL = 0;
    1d58:	4b18      	ldr	r3, [pc, #96]	; (1dbc <usb_serial_configure+0xec>)
    1d5a:	2100      	movs	r1, #0
	USB1_GPTIMER0LD = microseconds - 1;
    1d5c:	224a      	movs	r2, #74	; 0x4a
	usb_timer0_callback = callback;
    1d5e:	4818      	ldr	r0, [pc, #96]	; (1dc0 <usb_serial_configure+0xf0>)
    1d60:	4c18      	ldr	r4, [pc, #96]	; (1dc4 <usb_serial_configure+0xf4>)
    1d62:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    1d64:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    1d68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1d6c:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1d70:	4915      	ldr	r1, [pc, #84]	; (1dc8 <usb_serial_configure+0xf8>)
	USB1_USBINTR |= USB_USBINTR_TIE0;
    1d72:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    1d76:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
	if (serialEvent) yield_active_check_flags |= YIELD_CHECK_USB_SERIAL;
    1d7a:	b121      	cbz	r1, 1d86 <usb_serial_configure+0xb6>
    1d7c:	4a13      	ldr	r2, [pc, #76]	; (1dcc <usb_serial_configure+0xfc>)
    1d7e:	7813      	ldrb	r3, [r2, #0]
    1d80:	f043 0301 	orr.w	r3, r3, #1
    1d84:	7013      	strb	r3, [r2, #0]
}
    1d86:	bd70      	pop	{r4, r5, r6, pc}
    1d88:	20001601 	.word	0x20001601
    1d8c:	20001000 	.word	0x20001000
    1d90:	200015f4 	.word	0x200015f4
    1d94:	200015f0 	.word	0x200015f0
    1d98:	200015fd 	.word	0x200015fd
    1d9c:	200015f2 	.word	0x200015f2
    1da0:	20000f00 	.word	0x20000f00
    1da4:	20001414 	.word	0x20001414
    1da8:	20001424 	.word	0x20001424
    1dac:	200015fa 	.word	0x200015fa
    1db0:	20001410 	.word	0x20001410
    1db4:	200015fb 	.word	0x200015fb
    1db8:	00001b89 	.word	0x00001b89
    1dbc:	402e0000 	.word	0x402e0000
    1dc0:	200015e8 	.word	0x200015e8
    1dc4:	00001c3d 	.word	0x00001c3d
    1dc8:	00000000 	.word	0x00000000
    1dcc:	20001603 	.word	0x20001603

00001dd0 <usb_serial_available>:
	uint32_t n = rx_available;
    1dd0:	4b04      	ldr	r3, [pc, #16]	; (1de4 <usb_serial_available+0x14>)
{
    1dd2:	b510      	push	{r4, lr}
	uint32_t n = rx_available;
    1dd4:	681c      	ldr	r4, [r3, #0]
	if (n == 0) yield();
    1dd6:	b10c      	cbz	r4, 1ddc <usb_serial_available+0xc>
}
    1dd8:	4620      	mov	r0, r4
    1dda:	bd10      	pop	{r4, pc}
	if (n == 0) yield();
    1ddc:	f000 f804 	bl	1de8 <yield>
}
    1de0:	4620      	mov	r0, r4
    1de2:	bd10      	pop	{r4, pc}
    1de4:	20001410 	.word	0x20001410

00001de8 <yield>:
uint8_t yield_active_check_flags = 0;


void yield(void) __attribute__ ((weak));
void yield(void)
{
    1de8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	const uint8_t check_flags = yield_active_check_flags;
    1dec:	4b2d      	ldr	r3, [pc, #180]	; (1ea4 <yield+0xbc>)
    1dee:	781e      	ldrb	r6, [r3, #0]
	if (!check_flags) return;	// nothing to do
    1df0:	b166      	cbz	r6, 1e0c <yield+0x24>

	// TODO: do nothing if called from interrupt

	static uint8_t running=0;
	if (running) return; // TODO: does this need to be atomic?
    1df2:	4f2d      	ldr	r7, [pc, #180]	; (1ea8 <yield+0xc0>)
    1df4:	783b      	ldrb	r3, [r7, #0]
    1df6:	b94b      	cbnz	r3, 1e0c <yield+0x24>
	running = 1;
    1df8:	2301      	movs	r3, #1

	// USB Serial - Add hack to minimize impact...
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1dfa:	07f1      	lsls	r1, r6, #31
	running = 1;
    1dfc:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_USB_SERIAL) {
    1dfe:	d443      	bmi.n	1e88 <yield+0xa0>
		if (SerialUSB2.available()) serialEventUSB2();
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (check_flags & YIELD_CHECK_HARDWARE_SERIAL) {
    1e00:	07b2      	lsls	r2, r6, #30
    1e02:	d426      	bmi.n	1e52 <yield+0x6a>
		HardwareSerialIMXRT::processSerialEventsList();
	}

	running = 0;
    1e04:	2300      	movs	r3, #0
    1e06:	703b      	strb	r3, [r7, #0]
	if (check_flags & YIELD_CHECK_EVENT_RESPONDER) {
    1e08:	0773      	lsls	r3, r6, #29
    1e0a:	d401      	bmi.n	1e10 <yield+0x28>
		EventResponder::runFromYield();
	}
};
    1e0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    1e10:	4b26      	ldr	r3, [pc, #152]	; (1eac <yield+0xc4>)
    1e12:	681a      	ldr	r2, [r3, #0]
    1e14:	2a00      	cmp	r2, #0
    1e16:	d0f9      	beq.n	1e0c <yield+0x24>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    1e18:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    1e1c:	2a00      	cmp	r2, #0
    1e1e:	d1f5      	bne.n	1e0c <yield+0x24>
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1e20:	f3ef 8510 	mrs	r5, PRIMASK
		__disable_irq();
    1e24:	b672      	cpsid	i
		EventResponder *first = firstYield;
    1e26:	6818      	ldr	r0, [r3, #0]
		if (first == nullptr) {
    1e28:	2800      	cmp	r0, #0
    1e2a:	d034      	beq.n	1e96 <yield+0xae>
		if (runningFromYield) {
    1e2c:	4c20      	ldr	r4, [pc, #128]	; (1eb0 <yield+0xc8>)
    1e2e:	7821      	ldrb	r1, [r4, #0]
    1e30:	2900      	cmp	r1, #0
    1e32:	d130      	bne.n	1e96 <yield+0xae>
		runningFromYield = true;
    1e34:	2201      	movs	r2, #1
    1e36:	7022      	strb	r2, [r4, #0]
		firstYield = first->_next;
    1e38:	6942      	ldr	r2, [r0, #20]
    1e3a:	601a      	str	r2, [r3, #0]
		if (firstYield) {
    1e3c:	2a00      	cmp	r2, #0
    1e3e:	d02e      	beq.n	1e9e <yield+0xb6>
			firstYield->_prev = nullptr;
    1e40:	6191      	str	r1, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    1e42:	b905      	cbnz	r5, 1e46 <yield+0x5e>
    1e44:	b662      	cpsie	i
		first->_triggered = false;
    1e46:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    1e48:	6883      	ldr	r3, [r0, #8]
		first->_triggered = false;
    1e4a:	7745      	strb	r5, [r0, #29]
		(*(first->_function))(*first);
    1e4c:	4798      	blx	r3
		runningFromYield = false;
    1e4e:	7025      	strb	r5, [r4, #0]
    1e50:	e7dc      	b.n	1e0c <yield+0x24>
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1e52:	f8df 8064 	ldr.w	r8, [pc, #100]	; 1eb8 <yield+0xd0>
    1e56:	f898 3000 	ldrb.w	r3, [r8]
    1e5a:	2b00      	cmp	r3, #0
    1e5c:	d0d2      	beq.n	1e04 <yield+0x1c>
    1e5e:	2500      	movs	r5, #0
    1e60:	f8df 9058 	ldr.w	r9, [pc, #88]	; 1ebc <yield+0xd4>
    1e64:	462b      	mov	r3, r5
			s_serials_with_serial_events[i]->doYieldCode();
    1e66:	f859 4023 	ldr.w	r4, [r9, r3, lsl #2]
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1e6a:	3501      	adds	r5, #1
	static HardwareSerialIMXRT 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    1e6c:	6823      	ldr	r3, [r4, #0]
    1e6e:	4620      	mov	r0, r4
    1e70:	691b      	ldr	r3, [r3, #16]
    1e72:	4798      	blx	r3
    1e74:	b110      	cbz	r0, 1e7c <yield+0x94>
    1e76:	6963      	ldr	r3, [r4, #20]
    1e78:	689b      	ldr	r3, [r3, #8]
    1e7a:	4798      	blx	r3
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    1e7c:	f898 2000 	ldrb.w	r2, [r8]
    1e80:	b2eb      	uxtb	r3, r5
    1e82:	429a      	cmp	r2, r3
    1e84:	d8ef      	bhi.n	1e66 <yield+0x7e>
    1e86:	e7bd      	b.n	1e04 <yield+0x1c>
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
	// Returns the number of bytes which have been received from your PC and
	// can be fetched using Serial.read() or Serial.readBytes().
        virtual int available() { return usb_serial_available(); }
    1e88:	f7ff ffa2 	bl	1dd0 <usb_serial_available>
		if (Serial.available()) serialEvent();
    1e8c:	2800      	cmp	r0, #0
    1e8e:	d0b7      	beq.n	1e00 <yield+0x18>
    1e90:	f3af 8000 	nop.w
    1e94:	e7b4      	b.n	1e00 <yield+0x18>
		if (doit) __enable_irq();
    1e96:	2d00      	cmp	r5, #0
    1e98:	d1b8      	bne.n	1e0c <yield+0x24>
    1e9a:	b662      	cpsie	i
    1e9c:	e7b6      	b.n	1e0c <yield+0x24>
			lastYield = nullptr;
    1e9e:	4b05      	ldr	r3, [pc, #20]	; (1eb4 <yield+0xcc>)
    1ea0:	601a      	str	r2, [r3, #0]
    1ea2:	e7ce      	b.n	1e42 <yield+0x5a>
    1ea4:	20001603 	.word	0x20001603
    1ea8:	200015f8 	.word	0x200015f8
    1eac:	200013cc 	.word	0x200013cc
    1eb0:	200015f6 	.word	0x200015f6
    1eb4:	200013d8 	.word	0x200013d8
    1eb8:	200015f7 	.word	0x200015f7
    1ebc:	200013dc 	.word	0x200013dc

00001ec0 <EventResponder::runFromInterrupt()>:
{
    1ec0:	b570      	push	{r4, r5, r6, lr}
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1ec2:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1ec6:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1ec8:	4c0c      	ldr	r4, [pc, #48]	; (1efc <EventResponder::runFromInterrupt()+0x3c>)
    1eca:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1ecc:	b180      	cbz	r0, 1ef0 <EventResponder::runFromInterrupt()+0x30>
				lastInterrupt = nullptr;
    1ece:	4e0c      	ldr	r6, [pc, #48]	; (1f00 <EventResponder::runFromInterrupt()+0x40>)
				firstInterrupt->_prev = nullptr;
    1ed0:	2500      	movs	r5, #0
			firstInterrupt = first->_next;
    1ed2:	6943      	ldr	r3, [r0, #20]
    1ed4:	6023      	str	r3, [r4, #0]
			if (firstInterrupt) {
    1ed6:	b173      	cbz	r3, 1ef6 <EventResponder::runFromInterrupt()+0x36>
				firstInterrupt->_prev = nullptr;
    1ed8:	619d      	str	r5, [r3, #24]
		if (doit) __enable_irq();
    1eda:	b902      	cbnz	r2, 1ede <EventResponder::runFromInterrupt()+0x1e>
    1edc:	b662      	cpsie	i
			(*(first->_function))(*first);
    1ede:	6883      	ldr	r3, [r0, #8]
			first->_triggered = false;
    1ee0:	7745      	strb	r5, [r0, #29]
			(*(first->_function))(*first);
    1ee2:	4798      	blx	r3
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    1ee4:	f3ef 8210 	mrs	r2, PRIMASK
		__disable_irq();
    1ee8:	b672      	cpsid	i
		EventResponder *first = firstInterrupt;
    1eea:	6820      	ldr	r0, [r4, #0]
		if (first) {
    1eec:	2800      	cmp	r0, #0
    1eee:	d1f0      	bne.n	1ed2 <EventResponder::runFromInterrupt()+0x12>
		if (doit) __enable_irq();
    1ef0:	b902      	cbnz	r2, 1ef4 <EventResponder::runFromInterrupt()+0x34>
    1ef2:	b662      	cpsie	i
}
    1ef4:	bd70      	pop	{r4, r5, r6, pc}
				lastInterrupt = nullptr;
    1ef6:	6033      	str	r3, [r6, #0]
    1ef8:	e7ef      	b.n	1eda <EventResponder::runFromInterrupt()+0x1a>
    1efa:	bf00      	nop
    1efc:	200013d4 	.word	0x200013d4
    1f00:	200013d0 	.word	0x200013d0

00001f04 <pendablesrvreq_isr>:
	EventResponder::runFromInterrupt();
    1f04:	f7ff bfdc 	b.w	1ec0 <EventResponder::runFromInterrupt()>

00001f08 <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    1f08:	4904      	ldr	r1, [pc, #16]	; (1f1c <systick_isr+0x14>)
	systick_millis_count++;
    1f0a:	4a05      	ldr	r2, [pc, #20]	; (1f20 <systick_isr+0x18>)
	systick_cycle_count = ARM_DWT_CYCCNT;
    1f0c:	6849      	ldr	r1, [r1, #4]
    1f0e:	4b05      	ldr	r3, [pc, #20]	; (1f24 <systick_isr+0x1c>)
    1f10:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    1f12:	6813      	ldr	r3, [r2, #0]
    1f14:	3301      	adds	r3, #1
    1f16:	6013      	str	r3, [r2, #0]
}
    1f18:	4770      	bx	lr
    1f1a:	bf00      	nop
    1f1c:	e0001000 	.word	0xe0001000
    1f20:	200015d4 	.word	0x200015d4
    1f24:	200015d0 	.word	0x200015d0

00001f28 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    1f28:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    1f2a:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    1f2e:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    1f32:	d16d      	bne.n	2010 <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1f34:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    1f36:	d341      	bcc.n	1fbc <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1f38:	f851 3b04 	ldr.w	r3, [r1], #4
    1f3c:	f840 3b04 	str.w	r3, [r0], #4
    1f40:	f851 3b04 	ldr.w	r3, [r1], #4
    1f44:	f840 3b04 	str.w	r3, [r0], #4
    1f48:	f851 3b04 	ldr.w	r3, [r1], #4
    1f4c:	f840 3b04 	str.w	r3, [r0], #4
    1f50:	f851 3b04 	ldr.w	r3, [r1], #4
    1f54:	f840 3b04 	str.w	r3, [r0], #4
    1f58:	f851 3b04 	ldr.w	r3, [r1], #4
    1f5c:	f840 3b04 	str.w	r3, [r0], #4
    1f60:	f851 3b04 	ldr.w	r3, [r1], #4
    1f64:	f840 3b04 	str.w	r3, [r0], #4
    1f68:	f851 3b04 	ldr.w	r3, [r1], #4
    1f6c:	f840 3b04 	str.w	r3, [r0], #4
    1f70:	f851 3b04 	ldr.w	r3, [r1], #4
    1f74:	f840 3b04 	str.w	r3, [r0], #4
    1f78:	f851 3b04 	ldr.w	r3, [r1], #4
    1f7c:	f840 3b04 	str.w	r3, [r0], #4
    1f80:	f851 3b04 	ldr.w	r3, [r1], #4
    1f84:	f840 3b04 	str.w	r3, [r0], #4
    1f88:	f851 3b04 	ldr.w	r3, [r1], #4
    1f8c:	f840 3b04 	str.w	r3, [r0], #4
    1f90:	f851 3b04 	ldr.w	r3, [r1], #4
    1f94:	f840 3b04 	str.w	r3, [r0], #4
    1f98:	f851 3b04 	ldr.w	r3, [r1], #4
    1f9c:	f840 3b04 	str.w	r3, [r0], #4
    1fa0:	f851 3b04 	ldr.w	r3, [r1], #4
    1fa4:	f840 3b04 	str.w	r3, [r0], #4
    1fa8:	f851 3b04 	ldr.w	r3, [r1], #4
    1fac:	f840 3b04 	str.w	r3, [r0], #4
    1fb0:	f851 3b04 	ldr.w	r3, [r1], #4
    1fb4:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    1fb8:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    1fba:	d2bd      	bcs.n	1f38 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    1fbc:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    1fbe:	d311      	bcc.n	1fe4 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    1fc0:	f851 3b04 	ldr.w	r3, [r1], #4
    1fc4:	f840 3b04 	str.w	r3, [r0], #4
    1fc8:	f851 3b04 	ldr.w	r3, [r1], #4
    1fcc:	f840 3b04 	str.w	r3, [r0], #4
    1fd0:	f851 3b04 	ldr.w	r3, [r1], #4
    1fd4:	f840 3b04 	str.w	r3, [r0], #4
    1fd8:	f851 3b04 	ldr.w	r3, [r1], #4
    1fdc:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    1fe0:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    1fe2:	d2ed      	bcs.n	1fc0 <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    1fe4:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    1fe6:	d305      	bcc.n	1ff4 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    1fe8:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    1fec:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    1ff0:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    1ff2:	d2f9      	bcs.n	1fe8 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    1ff4:	3204      	adds	r2, #4
	beq	.Ldone
    1ff6:	d008      	beq.n	200a <memcpy+0xe2>

	lsls	r2, r2, #31
    1ff8:	07d2      	lsls	r2, r2, #31
	itt ne
    1ffa:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    1ffc:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    2000:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    2004:	d301      	bcc.n	200a <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    2006:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    2008:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    200a:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    200c:	4770      	bx	lr
    200e:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    2010:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    2012:	d313      	bcc.n	203c <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    2014:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    2016:	d08d      	beq.n	1f34 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    2018:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    201c:	d08a      	beq.n	1f34 <memcpy+0xc>

	rsb	r3, #4
    201e:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    2022:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    2024:	07db      	lsls	r3, r3, #31
	itt ne
    2026:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    2028:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    202c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    2030:	d380      	bcc.n	1f34 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    2032:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    2036:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    203a:	e77b      	b.n	1f34 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    203c:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    203e:	d3d9      	bcc.n	1ff4 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    2040:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    2042:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    2046:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    204a:	d2f9      	bcs.n	2040 <memcpy+0x118>

	ldrb	r3, [r1]
    204c:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    204e:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    2050:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    2052:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    2054:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    2056:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    2058:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    205a:	4770      	bx	lr

0000205c <ultoa>:


char * ultoa(unsigned long val, char *buf, int radix)
{
	unsigned digit;
	int i=0, j;
    205c:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
{
    2060:	b570      	push	{r4, r5, r6, lr}
	char t;

	while (1) {
		digit = val % radix;
    2062:	4666      	mov	r6, ip
	int i=0, j;
    2064:	2400      	movs	r4, #0
    2066:	e000      	b.n	206a <ultoa+0xe>
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    2068:	3401      	adds	r4, #1
		digit = val % radix;
    206a:	fbb0 f5f2 	udiv	r5, r0, r2
    206e:	fb02 0315 	mls	r3, r2, r5, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    2072:	2b09      	cmp	r3, #9
    2074:	f103 0e37 	add.w	lr, r3, #55	; 0x37
    2078:	f103 0330 	add.w	r3, r3, #48	; 0x30
    207c:	fa5f fe8e 	uxtb.w	lr, lr
    2080:	bf98      	it	ls
    2082:	fa5f fe83 	uxtbls.w	lr, r3
		if (val == 0) break;
    2086:	4290      	cmp	r0, r2
		val /= radix;
    2088:	4628      	mov	r0, r5
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    208a:	f806 ef01 	strb.w	lr, [r6, #1]!
		if (val == 0) break;
    208e:	d2eb      	bcs.n	2068 <ultoa+0xc>
	}
	buf[i + 1] = 0;
    2090:	1c63      	adds	r3, r4, #1
    2092:	2200      	movs	r2, #0
    2094:	18c8      	adds	r0, r1, r3
    2096:	54ca      	strb	r2, [r1, r3]
	for (j=0; j < i; j++, i--) {
    2098:	b17c      	cbz	r4, 20ba <ultoa+0x5e>
		t = buf[j];
    209a:	4662      	mov	r2, ip
    209c:	f81c 5f01 	ldrb.w	r5, [ip, #1]!
		buf[j] = buf[i];
    20a0:	f810 6d01 	ldrb.w	r6, [r0, #-1]!
	for (j=0; j < i; j++, i--) {
    20a4:	eba1 030c 	sub.w	r3, r1, ip
    20a8:	3202      	adds	r2, #2
		buf[j] = buf[i];
    20aa:	f88c 6000 	strb.w	r6, [ip]
	for (j=0; j < i; j++, i--) {
    20ae:	3b01      	subs	r3, #1
    20b0:	1a52      	subs	r2, r2, r1
		buf[i] = t;
    20b2:	7005      	strb	r5, [r0, #0]
	for (j=0; j < i; j++, i--) {
    20b4:	4423      	add	r3, r4
    20b6:	429a      	cmp	r2, r3
    20b8:	dbef      	blt.n	209a <ultoa+0x3e>
	}
	return buf;
}
    20ba:	4608      	mov	r0, r1
    20bc:	bd70      	pop	{r4, r5, r6, pc}
    20be:	bf00      	nop

000020c0 <flexpwm_init>:
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    20c0:	2300      	movs	r3, #0
	p->FSTS0 = 0x000F; // clear fault status
    20c2:	220f      	movs	r2, #15
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    20c4:	f248 2cb8 	movw	ip, #33464	; 0x82b8
	for (i=0; i < 4; i++) {
    20c8:	4619      	mov	r1, r3
{
    20ca:	b510      	push	{r4, lr}
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    20cc:	f44f 4470 	mov.w	r4, #61440	; 0xf000
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    20d0:	f44f 6e80 	mov.w	lr, #1024	; 0x400
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    20d4:	f8a0 418c 	strh.w	r4, [r0, #396]	; 0x18c
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20d8:	f44f 4460 	mov.w	r4, #57344	; 0xe000
	p->FSTS0 = 0x000F; // clear fault status
    20dc:	f8a0 218e 	strh.w	r2, [r0, #398]	; 0x18e
		p->SM[i].OCTRL = 0;
    20e0:	460a      	mov	r2, r1
	p->FFILT0 = 0;
    20e2:	f8a0 3190 	strh.w	r3, [r0, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    20e6:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    20ea:	b29b      	uxth	r3, r3
    20ec:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
    20f0:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    20f4:	eb01 0341 	add.w	r3, r1, r1, lsl #1
	for (i=0; i < 4; i++) {
    20f8:	3101      	adds	r1, #1
    20fa:	eb00 1343 	add.w	r3, r0, r3, lsl #5
    20fe:	2904      	cmp	r1, #4
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    2100:	809c      	strh	r4, [r3, #4]
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    2102:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    2106:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    2108:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    210a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    210c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    210e:	f8a3 c00e 	strh.w	ip, [r3, #14]
		p->SM[i].VAL2 = 0;
    2112:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    2114:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    2116:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    2118:	83da      	strh	r2, [r3, #30]
	for (i=0; i < 4; i++) {
    211a:	d1eb      	bne.n	20f4 <flexpwm_init+0x34>
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    211c:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    2120:	b29b      	uxth	r3, r3
    2122:	f043 030f 	orr.w	r3, r3, #15
    2126:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    212a:	f8b0 3188 	ldrh.w	r3, [r0, #392]	; 0x188
    212e:	b29b      	uxth	r3, r3
    2130:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    2134:	f8a0 3188 	strh.w	r3, [r0, #392]	; 0x188
}
    2138:	bd10      	pop	{r4, pc}
    213a:	bf00      	nop

0000213c <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    213c:	4b37      	ldr	r3, [pc, #220]	; (221c <pwm_init+0xe0>)
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    213e:	4a38      	ldr	r2, [pc, #224]	; (2220 <pwm_init+0xe4>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2140:	6f99      	ldr	r1, [r3, #120]	; 0x78
		CCM_CCGR6_QTIMER3(CCM_CCGR_ON) | CCM_CCGR6_QTIMER4(CCM_CCGR_ON);
	flexpwm_init(&IMXRT_FLEXPWM1);
    2142:	4838      	ldr	r0, [pc, #224]	; (2224 <pwm_init+0xe8>)
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    2144:	f441 017f 	orr.w	r1, r1, #16711680	; 0xff0000
{
    2148:	b570      	push	{r4, r5, r6, lr}
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    214a:	6799      	str	r1, [r3, #120]	; 0x78
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    214c:	f241 0601 	movw	r6, #4097	; 0x1001
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    2150:	f8d3 1080 	ldr.w	r1, [r3, #128]	; 0x80
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    2154:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2158:	f243 0426 	movw	r4, #12326	; 0x3026
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    215c:	430a      	orrs	r2, r1
    215e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	flexpwm_init(&IMXRT_FLEXPWM1);
    2162:	f7ff ffad 	bl	20c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM2);
    2166:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    216a:	f7ff ffa9 	bl	20c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM3);
    216e:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    2172:	f7ff ffa5 	bl	20c0 <flexpwm_init>
	flexpwm_init(&IMXRT_FLEXPWM4);
    2176:	f500 4080 	add.w	r0, r0, #16384	; 0x4000
    217a:	f7ff ffa1 	bl	20c0 <flexpwm_init>
	for (i=0; i < 4; i++) {
    217e:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    2180:	f5a0 1003 	sub.w	r0, r0, #2146304	; 0x20c000
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2184:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CTRL = 0; // stop timer
    2188:	4611      	mov	r1, r2
    218a:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    218e:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2192:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2194:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2196:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2198:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    219a:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    219e:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21a0:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    21a2:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    21a6:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21a8:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    21aa:	d1ee      	bne.n	218a <pwm_init+0x4e>
    21ac:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    21ae:	481e      	ldr	r0, [pc, #120]	; (2228 <pwm_init+0xec>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21b0:	f04f 0e0f 	mov.w	lr, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21b4:	f241 0601 	movw	r6, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    21b8:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21ba:	f645 55c0 	movw	r5, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21be:	f243 0426 	movw	r4, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    21c2:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    21c6:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    21ca:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    21cc:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    21ce:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    21d0:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21d2:	f8a3 e00e 	strh.w	lr, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21d6:	829e      	strh	r6, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21d8:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    21da:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    21de:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21e0:	819c      	strh	r4, [r3, #12]
	for (i=0; i < 4; i++) {
    21e2:	d1ee      	bne.n	21c2 <pwm_init+0x86>
    21e4:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
    21e6:	4811      	ldr	r0, [pc, #68]	; (222c <pwm_init+0xf0>)
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    21e8:	260f      	movs	r6, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    21ea:	f241 0501 	movw	r5, #4097	; 0x1001
		p->CH[i].CTRL = 0; // stop timer
    21ee:	4611      	mov	r1, r2
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    21f0:	f645 54c0 	movw	r4, #24000	; 0x5dc0
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    21f4:	f243 0e26 	movw	lr, #12326	; 0x3026
		p->CH[i].CTRL = 0; // stop timer
    21f8:	eb00 1342 	add.w	r3, r0, r2, lsl #5
    21fc:	ea4f 1c42 	mov.w	ip, r2, lsl #5
	for (i=0; i < 4; i++) {
    2200:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    2202:	8199      	strh	r1, [r3, #12]
	for (i=0; i < 4; i++) {
    2204:	2a04      	cmp	r2, #4
		p->CH[i].CNTR = 0;
    2206:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    2208:	81de      	strh	r6, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    220a:	829d      	strh	r5, [r3, #20]
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    220c:	80dc      	strh	r4, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    220e:	f820 100c 	strh.w	r1, [r0, ip]
		p->CH[i].CMPLD1 = 0;
    2212:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    2214:	f8a3 e00c 	strh.w	lr, [r3, #12]
	for (i=0; i < 4; i++) {
    2218:	d1ee      	bne.n	21f8 <pwm_init+0xbc>
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    221a:	bd70      	pop	{r4, r5, r6, pc}
    221c:	400fc000 	.word	0x400fc000
    2220:	fc030000 	.word	0xfc030000
    2224:	403dc000 	.word	0x403dc000
    2228:	401e0000 	.word	0x401e0000
    222c:	401e4000 	.word	0x401e4000

00002230 <rtc_get>:
	uint32_t hi1 = SNVS_HPRTCMR;
    2230:	4a07      	ldr	r2, [pc, #28]	; (2250 <rtc_get+0x20>)
    2232:	6a50      	ldr	r0, [r2, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
    2234:	6a93      	ldr	r3, [r2, #40]	; 0x28
		uint32_t hi2 = SNVS_HPRTCMR;
    2236:	4619      	mov	r1, r3
    2238:	4684      	mov	ip, r0
    223a:	6a50      	ldr	r0, [r2, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    223c:	6a93      	ldr	r3, [r2, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    223e:	4299      	cmp	r1, r3
    2240:	d1f9      	bne.n	2236 <rtc_get+0x6>
    2242:	4584      	cmp	ip, r0
    2244:	d1f7      	bne.n	2236 <rtc_get+0x6>
			return (hi2 << 17) | (lo2 >> 15);
    2246:	0bdb      	lsrs	r3, r3, #15
}
    2248:	ea43 4040 	orr.w	r0, r3, r0, lsl #17
    224c:	4770      	bx	lr
    224e:	bf00      	nop
    2250:	400d4000 	.word	0x400d4000
    2254:	00000000 	.word	0x00000000

00002258 <sqrt>:
    2258:	b508      	push	{r3, lr}
    225a:	ed2d 8b04 	vpush	{d8-d9}
    225e:	eeb0 8b40 	vmov.f64	d8, d0
    2262:	f000 f81d 	bl	22a0 <__ieee754_sqrt>
    2266:	eeb4 8b48 	vcmp.f64	d8, d8
    226a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    226e:	d606      	bvs.n	227e <sqrt+0x26>
    2270:	ed9f 9b09 	vldr	d9, [pc, #36]	; 2298 <sqrt+0x40>
    2274:	eeb4 8bc9 	vcmpe.f64	d8, d9
    2278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    227c:	d402      	bmi.n	2284 <sqrt+0x2c>
    227e:	ecbd 8b04 	vpop	{d8-d9}
    2282:	bd08      	pop	{r3, pc}
    2284:	f000 fb46 	bl	2914 <__errno>
    2288:	ee89 0b09 	vdiv.f64	d0, d9, d9
    228c:	ecbd 8b04 	vpop	{d8-d9}
    2290:	2321      	movs	r3, #33	; 0x21
    2292:	6003      	str	r3, [r0, #0]
    2294:	bd08      	pop	{r3, pc}
    2296:	bf00      	nop
	...

000022a0 <__ieee754_sqrt>:
    22a0:	eeb1 0bc0 	vsqrt.f64	d0, d0
    22a4:	4770      	bx	lr
    22a6:	bf00      	nop

000022a8 <__aeabi_atexit>:
    22a8:	4603      	mov	r3, r0
    22aa:	4608      	mov	r0, r1
    22ac:	4619      	mov	r1, r3
    22ae:	f000 bac7 	b.w	2840 <__cxa_atexit>
    22b2:	bf00      	nop

000022b4 <malloc>:
    22b4:	4b02      	ldr	r3, [pc, #8]	; (22c0 <malloc+0xc>)
    22b6:	4601      	mov	r1, r0
    22b8:	6818      	ldr	r0, [r3, #0]
    22ba:	f000 b80b 	b.w	22d4 <_malloc_r>
    22be:	bf00      	nop
    22c0:	200005c8 	.word	0x200005c8

000022c4 <free>:
    22c4:	4b02      	ldr	r3, [pc, #8]	; (22d0 <free+0xc>)
    22c6:	4601      	mov	r1, r0
    22c8:	6818      	ldr	r0, [r3, #0]
    22ca:	f000 bbf5 	b.w	2ab8 <_free_r>
    22ce:	bf00      	nop
    22d0:	200005c8 	.word	0x200005c8

000022d4 <_malloc_r>:
    22d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22d8:	f101 060b 	add.w	r6, r1, #11
    22dc:	2e16      	cmp	r6, #22
    22de:	b083      	sub	sp, #12
    22e0:	4604      	mov	r4, r0
    22e2:	d824      	bhi.n	232e <_malloc_r+0x5a>
    22e4:	2910      	cmp	r1, #16
    22e6:	f200 80ba 	bhi.w	245e <_malloc_r+0x18a>
    22ea:	f000 fa9d 	bl	2828 <__malloc_lock>
    22ee:	2610      	movs	r6, #16
    22f0:	2218      	movs	r2, #24
    22f2:	2002      	movs	r0, #2
    22f4:	4fb7      	ldr	r7, [pc, #732]	; (25d4 <_malloc_r+0x300>)
    22f6:	443a      	add	r2, r7
    22f8:	f1a2 0108 	sub.w	r1, r2, #8
    22fc:	6853      	ldr	r3, [r2, #4]
    22fe:	428b      	cmp	r3, r1
    2300:	f000 80ba 	beq.w	2478 <_malloc_r+0x1a4>
    2304:	685a      	ldr	r2, [r3, #4]
    2306:	68d9      	ldr	r1, [r3, #12]
    2308:	f022 0203 	bic.w	r2, r2, #3
    230c:	441a      	add	r2, r3
    230e:	689d      	ldr	r5, [r3, #8]
    2310:	60e9      	str	r1, [r5, #12]
    2312:	608d      	str	r5, [r1, #8]
    2314:	6851      	ldr	r1, [r2, #4]
    2316:	f041 0101 	orr.w	r1, r1, #1
    231a:	4620      	mov	r0, r4
    231c:	6051      	str	r1, [r2, #4]
    231e:	f103 0508 	add.w	r5, r3, #8
    2322:	f000 fa87 	bl	2834 <__malloc_unlock>
    2326:	4628      	mov	r0, r5
    2328:	b003      	add	sp, #12
    232a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    232e:	f036 0607 	bics.w	r6, r6, #7
    2332:	f100 8094 	bmi.w	245e <_malloc_r+0x18a>
    2336:	42b1      	cmp	r1, r6
    2338:	f200 8091 	bhi.w	245e <_malloc_r+0x18a>
    233c:	f000 fa74 	bl	2828 <__malloc_lock>
    2340:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
    2344:	f0c0 8196 	bcc.w	2674 <_malloc_r+0x3a0>
    2348:	0a73      	lsrs	r3, r6, #9
    234a:	f000 808f 	beq.w	246c <_malloc_r+0x198>
    234e:	2b04      	cmp	r3, #4
    2350:	f200 816b 	bhi.w	262a <_malloc_r+0x356>
    2354:	09b3      	lsrs	r3, r6, #6
    2356:	f103 0039 	add.w	r0, r3, #57	; 0x39
    235a:	f103 0c38 	add.w	ip, r3, #56	; 0x38
    235e:	00c3      	lsls	r3, r0, #3
    2360:	4f9c      	ldr	r7, [pc, #624]	; (25d4 <_malloc_r+0x300>)
    2362:	443b      	add	r3, r7
    2364:	f1a3 0508 	sub.w	r5, r3, #8
    2368:	685b      	ldr	r3, [r3, #4]
    236a:	429d      	cmp	r5, r3
    236c:	d106      	bne.n	237c <_malloc_r+0xa8>
    236e:	e00c      	b.n	238a <_malloc_r+0xb6>
    2370:	2900      	cmp	r1, #0
    2372:	f280 812b 	bge.w	25cc <_malloc_r+0x2f8>
    2376:	68db      	ldr	r3, [r3, #12]
    2378:	429d      	cmp	r5, r3
    237a:	d006      	beq.n	238a <_malloc_r+0xb6>
    237c:	685a      	ldr	r2, [r3, #4]
    237e:	f022 0203 	bic.w	r2, r2, #3
    2382:	1b91      	subs	r1, r2, r6
    2384:	290f      	cmp	r1, #15
    2386:	ddf3      	ble.n	2370 <_malloc_r+0x9c>
    2388:	4660      	mov	r0, ip
    238a:	693d      	ldr	r5, [r7, #16]
    238c:	f8df c248 	ldr.w	ip, [pc, #584]	; 25d8 <_malloc_r+0x304>
    2390:	4565      	cmp	r5, ip
    2392:	d07c      	beq.n	248e <_malloc_r+0x1ba>
    2394:	686a      	ldr	r2, [r5, #4]
    2396:	f022 0203 	bic.w	r2, r2, #3
    239a:	1b93      	subs	r3, r2, r6
    239c:	2b0f      	cmp	r3, #15
    239e:	f300 8177 	bgt.w	2690 <_malloc_r+0x3bc>
    23a2:	2b00      	cmp	r3, #0
    23a4:	e9c7 cc04 	strd	ip, ip, [r7, #16]
    23a8:	f280 8168 	bge.w	267c <_malloc_r+0x3a8>
    23ac:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
    23b0:	f080 8116 	bcs.w	25e0 <_malloc_r+0x30c>
    23b4:	08d3      	lsrs	r3, r2, #3
    23b6:	6879      	ldr	r1, [r7, #4]
    23b8:	3301      	adds	r3, #1
    23ba:	ea4f 1e52 	mov.w	lr, r2, lsr #5
    23be:	2201      	movs	r2, #1
    23c0:	fa02 f20e 	lsl.w	r2, r2, lr
    23c4:	430a      	orrs	r2, r1
    23c6:	f857 e033 	ldr.w	lr, [r7, r3, lsl #3]
    23ca:	f8c5 e008 	str.w	lr, [r5, #8]
    23ce:	eb07 01c3 	add.w	r1, r7, r3, lsl #3
    23d2:	3908      	subs	r1, #8
    23d4:	60e9      	str	r1, [r5, #12]
    23d6:	607a      	str	r2, [r7, #4]
    23d8:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    23dc:	f8ce 500c 	str.w	r5, [lr, #12]
    23e0:	1083      	asrs	r3, r0, #2
    23e2:	2101      	movs	r1, #1
    23e4:	4099      	lsls	r1, r3
    23e6:	4291      	cmp	r1, r2
    23e8:	d857      	bhi.n	249a <_malloc_r+0x1c6>
    23ea:	4211      	tst	r1, r2
    23ec:	d106      	bne.n	23fc <_malloc_r+0x128>
    23ee:	f020 0003 	bic.w	r0, r0, #3
    23f2:	0049      	lsls	r1, r1, #1
    23f4:	4211      	tst	r1, r2
    23f6:	f100 0004 	add.w	r0, r0, #4
    23fa:	d0fa      	beq.n	23f2 <_malloc_r+0x11e>
    23fc:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    2400:	464d      	mov	r5, r9
    2402:	4686      	mov	lr, r0
    2404:	f8d5 800c 	ldr.w	r8, [r5, #12]
    2408:	4545      	cmp	r5, r8
    240a:	d108      	bne.n	241e <_malloc_r+0x14a>
    240c:	e119      	b.n	2642 <_malloc_r+0x36e>
    240e:	2b00      	cmp	r3, #0
    2410:	f280 8120 	bge.w	2654 <_malloc_r+0x380>
    2414:	f8d8 800c 	ldr.w	r8, [r8, #12]
    2418:	4545      	cmp	r5, r8
    241a:	f000 8112 	beq.w	2642 <_malloc_r+0x36e>
    241e:	f8d8 2004 	ldr.w	r2, [r8, #4]
    2422:	f022 0203 	bic.w	r2, r2, #3
    2426:	1b93      	subs	r3, r2, r6
    2428:	2b0f      	cmp	r3, #15
    242a:	ddf0      	ble.n	240e <_malloc_r+0x13a>
    242c:	4620      	mov	r0, r4
    242e:	e9d8 5402 	ldrd	r5, r4, [r8, #8]
    2432:	eb08 0106 	add.w	r1, r8, r6
    2436:	f046 0601 	orr.w	r6, r6, #1
    243a:	f8c8 6004 	str.w	r6, [r8, #4]
    243e:	60ec      	str	r4, [r5, #12]
    2440:	60a5      	str	r5, [r4, #8]
    2442:	f043 0401 	orr.w	r4, r3, #1
    2446:	e9c7 1104 	strd	r1, r1, [r7, #16]
    244a:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    244e:	604c      	str	r4, [r1, #4]
    2450:	f848 3002 	str.w	r3, [r8, r2]
    2454:	f000 f9ee 	bl	2834 <__malloc_unlock>
    2458:	f108 0508 	add.w	r5, r8, #8
    245c:	e002      	b.n	2464 <_malloc_r+0x190>
    245e:	230c      	movs	r3, #12
    2460:	6023      	str	r3, [r4, #0]
    2462:	2500      	movs	r5, #0
    2464:	4628      	mov	r0, r5
    2466:	b003      	add	sp, #12
    2468:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    246c:	f44f 7300 	mov.w	r3, #512	; 0x200
    2470:	2040      	movs	r0, #64	; 0x40
    2472:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
    2476:	e773      	b.n	2360 <_malloc_r+0x8c>
    2478:	68d3      	ldr	r3, [r2, #12]
    247a:	429a      	cmp	r2, r3
    247c:	bf08      	it	eq
    247e:	3002      	addeq	r0, #2
    2480:	f47f af40 	bne.w	2304 <_malloc_r+0x30>
    2484:	693d      	ldr	r5, [r7, #16]
    2486:	f8df c150 	ldr.w	ip, [pc, #336]	; 25d8 <_malloc_r+0x304>
    248a:	4565      	cmp	r5, ip
    248c:	d182      	bne.n	2394 <_malloc_r+0xc0>
    248e:	687a      	ldr	r2, [r7, #4]
    2490:	1083      	asrs	r3, r0, #2
    2492:	2101      	movs	r1, #1
    2494:	4099      	lsls	r1, r3
    2496:	4291      	cmp	r1, r2
    2498:	d9a7      	bls.n	23ea <_malloc_r+0x116>
    249a:	68bd      	ldr	r5, [r7, #8]
    249c:	686b      	ldr	r3, [r5, #4]
    249e:	f023 0803 	bic.w	r8, r3, #3
    24a2:	4546      	cmp	r6, r8
    24a4:	d803      	bhi.n	24ae <_malloc_r+0x1da>
    24a6:	eba8 0306 	sub.w	r3, r8, r6
    24aa:	2b0f      	cmp	r3, #15
    24ac:	dc7e      	bgt.n	25ac <_malloc_r+0x2d8>
    24ae:	f8df 912c 	ldr.w	r9, [pc, #300]	; 25dc <_malloc_r+0x308>
    24b2:	f8d7 2408 	ldr.w	r2, [r7, #1032]	; 0x408
    24b6:	f8d9 3000 	ldr.w	r3, [r9]
    24ba:	3201      	adds	r2, #1
    24bc:	4433      	add	r3, r6
    24be:	eb05 0a08 	add.w	sl, r5, r8
    24c2:	f000 812f 	beq.w	2724 <_malloc_r+0x450>
    24c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
    24ca:	330f      	adds	r3, #15
    24cc:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
    24d0:	f02b 0b0f 	bic.w	fp, fp, #15
    24d4:	4659      	mov	r1, fp
    24d6:	4620      	mov	r0, r4
    24d8:	f000 fa0a 	bl	28f0 <_sbrk_r>
    24dc:	1c41      	adds	r1, r0, #1
    24de:	4602      	mov	r2, r0
    24e0:	f000 80ef 	beq.w	26c2 <_malloc_r+0x3ee>
    24e4:	4582      	cmp	sl, r0
    24e6:	f200 80ea 	bhi.w	26be <_malloc_r+0x3ea>
    24ea:	f8d9 1004 	ldr.w	r1, [r9, #4]
    24ee:	4459      	add	r1, fp
    24f0:	f8c9 1004 	str.w	r1, [r9, #4]
    24f4:	460b      	mov	r3, r1
    24f6:	f000 814b 	beq.w	2790 <_malloc_r+0x4bc>
    24fa:	f8d7 1408 	ldr.w	r1, [r7, #1032]	; 0x408
    24fe:	3101      	adds	r1, #1
    2500:	bf1b      	ittet	ne
    2502:	eba2 0a0a 	subne.w	sl, r2, sl
    2506:	4453      	addne	r3, sl
    2508:	f8c7 2408 	streq.w	r2, [r7, #1032]	; 0x408
    250c:	f8c9 3004 	strne.w	r3, [r9, #4]
    2510:	f012 0307 	ands.w	r3, r2, #7
    2514:	f000 8112 	beq.w	273c <_malloc_r+0x468>
    2518:	f1c3 0108 	rsb	r1, r3, #8
    251c:	440a      	add	r2, r1
    251e:	f5c3 5180 	rsb	r1, r3, #4096	; 0x1000
    2522:	4493      	add	fp, r2
    2524:	3108      	adds	r1, #8
    2526:	eba1 010b 	sub.w	r1, r1, fp
    252a:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    252e:	4651      	mov	r1, sl
    2530:	4620      	mov	r0, r4
    2532:	9201      	str	r2, [sp, #4]
    2534:	9300      	str	r3, [sp, #0]
    2536:	f000 f9db 	bl	28f0 <_sbrk_r>
    253a:	1c42      	adds	r2, r0, #1
    253c:	e9dd 3200 	ldrd	r3, r2, [sp]
    2540:	f000 814b 	beq.w	27da <_malloc_r+0x506>
    2544:	1a80      	subs	r0, r0, r2
    2546:	eb00 0b0a 	add.w	fp, r0, sl
    254a:	f8d9 0004 	ldr.w	r0, [r9, #4]
    254e:	60ba      	str	r2, [r7, #8]
    2550:	f04b 0301 	orr.w	r3, fp, #1
    2554:	eb0a 0100 	add.w	r1, sl, r0
    2558:	42bd      	cmp	r5, r7
    255a:	6053      	str	r3, [r2, #4]
    255c:	f8c9 1004 	str.w	r1, [r9, #4]
    2560:	f000 8122 	beq.w	27a8 <_malloc_r+0x4d4>
    2564:	f1b8 0f0f 	cmp.w	r8, #15
    2568:	f240 8120 	bls.w	27ac <_malloc_r+0x4d8>
    256c:	686b      	ldr	r3, [r5, #4]
    256e:	f1a8 000c 	sub.w	r0, r8, #12
    2572:	f020 0007 	bic.w	r0, r0, #7
    2576:	f003 0301 	and.w	r3, r3, #1
    257a:	4303      	orrs	r3, r0
    257c:	606b      	str	r3, [r5, #4]
    257e:	f04f 0c05 	mov.w	ip, #5
    2582:	182b      	adds	r3, r5, r0
    2584:	280f      	cmp	r0, #15
    2586:	e9c3 cc01 	strd	ip, ip, [r3, #4]
    258a:	f200 812d 	bhi.w	27e8 <_malloc_r+0x514>
    258e:	6853      	ldr	r3, [r2, #4]
    2590:	4615      	mov	r5, r2
    2592:	f8d9 202c 	ldr.w	r2, [r9, #44]	; 0x2c
    2596:	428a      	cmp	r2, r1
    2598:	f8d9 2030 	ldr.w	r2, [r9, #48]	; 0x30
    259c:	bf38      	it	cc
    259e:	f8c9 102c 	strcc.w	r1, [r9, #44]	; 0x2c
    25a2:	428a      	cmp	r2, r1
    25a4:	bf38      	it	cc
    25a6:	f8c9 1030 	strcc.w	r1, [r9, #48]	; 0x30
    25aa:	e08c      	b.n	26c6 <_malloc_r+0x3f2>
    25ac:	19aa      	adds	r2, r5, r6
    25ae:	f043 0301 	orr.w	r3, r3, #1
    25b2:	f046 0601 	orr.w	r6, r6, #1
    25b6:	606e      	str	r6, [r5, #4]
    25b8:	4620      	mov	r0, r4
    25ba:	60ba      	str	r2, [r7, #8]
    25bc:	6053      	str	r3, [r2, #4]
    25be:	f000 f939 	bl	2834 <__malloc_unlock>
    25c2:	3508      	adds	r5, #8
    25c4:	4628      	mov	r0, r5
    25c6:	b003      	add	sp, #12
    25c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    25cc:	68d9      	ldr	r1, [r3, #12]
    25ce:	441a      	add	r2, r3
    25d0:	e69d      	b.n	230e <_malloc_r+0x3a>
    25d2:	bf00      	nop
    25d4:	200006f4 	.word	0x200006f4
    25d8:	200006fc 	.word	0x200006fc
    25dc:	200010a4 	.word	0x200010a4
    25e0:	f5b2 6f20 	cmp.w	r2, #2560	; 0xa00
    25e4:	ea4f 2352 	mov.w	r3, r2, lsr #9
    25e8:	d363      	bcc.n	26b2 <_malloc_r+0x3de>
    25ea:	2b14      	cmp	r3, #20
    25ec:	f200 80b8 	bhi.w	2760 <_malloc_r+0x48c>
    25f0:	f103 015c 	add.w	r1, r3, #92	; 0x5c
    25f4:	00c9      	lsls	r1, r1, #3
    25f6:	335b      	adds	r3, #91	; 0x5b
    25f8:	eb07 0e01 	add.w	lr, r7, r1
    25fc:	5879      	ldr	r1, [r7, r1]
    25fe:	f1ae 0e08 	sub.w	lr, lr, #8
    2602:	458e      	cmp	lr, r1
    2604:	f000 8091 	beq.w	272a <_malloc_r+0x456>
    2608:	684b      	ldr	r3, [r1, #4]
    260a:	f023 0303 	bic.w	r3, r3, #3
    260e:	4293      	cmp	r3, r2
    2610:	d902      	bls.n	2618 <_malloc_r+0x344>
    2612:	6889      	ldr	r1, [r1, #8]
    2614:	458e      	cmp	lr, r1
    2616:	d1f7      	bne.n	2608 <_malloc_r+0x334>
    2618:	f8d1 e00c 	ldr.w	lr, [r1, #12]
    261c:	687a      	ldr	r2, [r7, #4]
    261e:	e9c5 1e02 	strd	r1, lr, [r5, #8]
    2622:	f8ce 5008 	str.w	r5, [lr, #8]
    2626:	60cd      	str	r5, [r1, #12]
    2628:	e6da      	b.n	23e0 <_malloc_r+0x10c>
    262a:	2b14      	cmp	r3, #20
    262c:	d959      	bls.n	26e2 <_malloc_r+0x40e>
    262e:	2b54      	cmp	r3, #84	; 0x54
    2630:	f200 809e 	bhi.w	2770 <_malloc_r+0x49c>
    2634:	0b33      	lsrs	r3, r6, #12
    2636:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    263a:	f103 0c6e 	add.w	ip, r3, #110	; 0x6e
    263e:	00c3      	lsls	r3, r0, #3
    2640:	e68e      	b.n	2360 <_malloc_r+0x8c>
    2642:	f10e 0e01 	add.w	lr, lr, #1
    2646:	f01e 0f03 	tst.w	lr, #3
    264a:	f105 0508 	add.w	r5, r5, #8
    264e:	f47f aed9 	bne.w	2404 <_malloc_r+0x130>
    2652:	e051      	b.n	26f8 <_malloc_r+0x424>
    2654:	4442      	add	r2, r8
    2656:	4645      	mov	r5, r8
    2658:	6853      	ldr	r3, [r2, #4]
    265a:	f8d8 100c 	ldr.w	r1, [r8, #12]
    265e:	f043 0301 	orr.w	r3, r3, #1
    2662:	6053      	str	r3, [r2, #4]
    2664:	f855 3f08 	ldr.w	r3, [r5, #8]!
    2668:	4620      	mov	r0, r4
    266a:	60d9      	str	r1, [r3, #12]
    266c:	608b      	str	r3, [r1, #8]
    266e:	f000 f8e1 	bl	2834 <__malloc_unlock>
    2672:	e6f7      	b.n	2464 <_malloc_r+0x190>
    2674:	08f0      	lsrs	r0, r6, #3
    2676:	f106 0208 	add.w	r2, r6, #8
    267a:	e63b      	b.n	22f4 <_malloc_r+0x20>
    267c:	442a      	add	r2, r5
    267e:	4620      	mov	r0, r4
    2680:	6853      	ldr	r3, [r2, #4]
    2682:	f043 0301 	orr.w	r3, r3, #1
    2686:	6053      	str	r3, [r2, #4]
    2688:	3508      	adds	r5, #8
    268a:	f000 f8d3 	bl	2834 <__malloc_unlock>
    268e:	e6e9      	b.n	2464 <_malloc_r+0x190>
    2690:	19a9      	adds	r1, r5, r6
    2692:	4620      	mov	r0, r4
    2694:	f046 0601 	orr.w	r6, r6, #1
    2698:	f043 0401 	orr.w	r4, r3, #1
    269c:	606e      	str	r6, [r5, #4]
    269e:	e9c7 1104 	strd	r1, r1, [r7, #16]
    26a2:	e9c1 cc02 	strd	ip, ip, [r1, #8]
    26a6:	604c      	str	r4, [r1, #4]
    26a8:	50ab      	str	r3, [r5, r2]
    26aa:	f000 f8c3 	bl	2834 <__malloc_unlock>
    26ae:	3508      	adds	r5, #8
    26b0:	e6d8      	b.n	2464 <_malloc_r+0x190>
    26b2:	0993      	lsrs	r3, r2, #6
    26b4:	f103 0139 	add.w	r1, r3, #57	; 0x39
    26b8:	00c9      	lsls	r1, r1, #3
    26ba:	3338      	adds	r3, #56	; 0x38
    26bc:	e79c      	b.n	25f8 <_malloc_r+0x324>
    26be:	42bd      	cmp	r5, r7
    26c0:	d060      	beq.n	2784 <_malloc_r+0x4b0>
    26c2:	68bd      	ldr	r5, [r7, #8]
    26c4:	686b      	ldr	r3, [r5, #4]
    26c6:	f023 0b03 	bic.w	fp, r3, #3
    26ca:	455e      	cmp	r6, fp
    26cc:	ebab 0306 	sub.w	r3, fp, r6
    26d0:	d802      	bhi.n	26d8 <_malloc_r+0x404>
    26d2:	2b0f      	cmp	r3, #15
    26d4:	f73f af6a 	bgt.w	25ac <_malloc_r+0x2d8>
    26d8:	4620      	mov	r0, r4
    26da:	f000 f8ab 	bl	2834 <__malloc_unlock>
    26de:	2500      	movs	r5, #0
    26e0:	e6c0      	b.n	2464 <_malloc_r+0x190>
    26e2:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    26e6:	f103 0c5b 	add.w	ip, r3, #91	; 0x5b
    26ea:	00c3      	lsls	r3, r0, #3
    26ec:	e638      	b.n	2360 <_malloc_r+0x8c>
    26ee:	f859 3908 	ldr.w	r3, [r9], #-8
    26f2:	454b      	cmp	r3, r9
    26f4:	f040 8096 	bne.w	2824 <_malloc_r+0x550>
    26f8:	f010 0f03 	tst.w	r0, #3
    26fc:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
    2700:	d1f5      	bne.n	26ee <_malloc_r+0x41a>
    2702:	687b      	ldr	r3, [r7, #4]
    2704:	ea23 0301 	bic.w	r3, r3, r1
    2708:	607b      	str	r3, [r7, #4]
    270a:	0049      	lsls	r1, r1, #1
    270c:	4299      	cmp	r1, r3
    270e:	f63f aec4 	bhi.w	249a <_malloc_r+0x1c6>
    2712:	b919      	cbnz	r1, 271c <_malloc_r+0x448>
    2714:	e6c1      	b.n	249a <_malloc_r+0x1c6>
    2716:	0049      	lsls	r1, r1, #1
    2718:	f10e 0e04 	add.w	lr, lr, #4
    271c:	4219      	tst	r1, r3
    271e:	d0fa      	beq.n	2716 <_malloc_r+0x442>
    2720:	4670      	mov	r0, lr
    2722:	e66b      	b.n	23fc <_malloc_r+0x128>
    2724:	f103 0b10 	add.w	fp, r3, #16
    2728:	e6d4      	b.n	24d4 <_malloc_r+0x200>
    272a:	109a      	asrs	r2, r3, #2
    272c:	f04f 0801 	mov.w	r8, #1
    2730:	687b      	ldr	r3, [r7, #4]
    2732:	fa08 f202 	lsl.w	r2, r8, r2
    2736:	431a      	orrs	r2, r3
    2738:	607a      	str	r2, [r7, #4]
    273a:	e770      	b.n	261e <_malloc_r+0x34a>
    273c:	eb02 010b 	add.w	r1, r2, fp
    2740:	4249      	negs	r1, r1
    2742:	f3c1 0a0b 	ubfx	sl, r1, #0, #12
    2746:	4651      	mov	r1, sl
    2748:	4620      	mov	r0, r4
    274a:	9301      	str	r3, [sp, #4]
    274c:	9200      	str	r2, [sp, #0]
    274e:	f000 f8cf 	bl	28f0 <_sbrk_r>
    2752:	1c43      	adds	r3, r0, #1
    2754:	e9dd 2300 	ldrd	r2, r3, [sp]
    2758:	f47f aef4 	bne.w	2544 <_malloc_r+0x270>
    275c:	469a      	mov	sl, r3
    275e:	e6f4      	b.n	254a <_malloc_r+0x276>
    2760:	2b54      	cmp	r3, #84	; 0x54
    2762:	d826      	bhi.n	27b2 <_malloc_r+0x4de>
    2764:	0b13      	lsrs	r3, r2, #12
    2766:	f103 016f 	add.w	r1, r3, #111	; 0x6f
    276a:	00c9      	lsls	r1, r1, #3
    276c:	336e      	adds	r3, #110	; 0x6e
    276e:	e743      	b.n	25f8 <_malloc_r+0x324>
    2770:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2774:	d826      	bhi.n	27c4 <_malloc_r+0x4f0>
    2776:	0bf3      	lsrs	r3, r6, #15
    2778:	f103 0078 	add.w	r0, r3, #120	; 0x78
    277c:	f103 0c77 	add.w	ip, r3, #119	; 0x77
    2780:	00c3      	lsls	r3, r0, #3
    2782:	e5ed      	b.n	2360 <_malloc_r+0x8c>
    2784:	f8d9 3004 	ldr.w	r3, [r9, #4]
    2788:	445b      	add	r3, fp
    278a:	f8c9 3004 	str.w	r3, [r9, #4]
    278e:	e6b4      	b.n	24fa <_malloc_r+0x226>
    2790:	f3ca 000b 	ubfx	r0, sl, #0, #12
    2794:	2800      	cmp	r0, #0
    2796:	f47f aeb0 	bne.w	24fa <_malloc_r+0x226>
    279a:	68bd      	ldr	r5, [r7, #8]
    279c:	eb08 030b 	add.w	r3, r8, fp
    27a0:	f043 0301 	orr.w	r3, r3, #1
    27a4:	606b      	str	r3, [r5, #4]
    27a6:	e6f4      	b.n	2592 <_malloc_r+0x2be>
    27a8:	4615      	mov	r5, r2
    27aa:	e6f2      	b.n	2592 <_malloc_r+0x2be>
    27ac:	2301      	movs	r3, #1
    27ae:	6053      	str	r3, [r2, #4]
    27b0:	e792      	b.n	26d8 <_malloc_r+0x404>
    27b2:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    27b6:	d821      	bhi.n	27fc <_malloc_r+0x528>
    27b8:	0bd3      	lsrs	r3, r2, #15
    27ba:	f103 0178 	add.w	r1, r3, #120	; 0x78
    27be:	00c9      	lsls	r1, r1, #3
    27c0:	3377      	adds	r3, #119	; 0x77
    27c2:	e719      	b.n	25f8 <_malloc_r+0x324>
    27c4:	f240 5254 	movw	r2, #1364	; 0x554
    27c8:	4293      	cmp	r3, r2
    27ca:	d821      	bhi.n	2810 <_malloc_r+0x53c>
    27cc:	0cb3      	lsrs	r3, r6, #18
    27ce:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    27d2:	f103 0c7c 	add.w	ip, r3, #124	; 0x7c
    27d6:	00c3      	lsls	r3, r0, #3
    27d8:	e5c2      	b.n	2360 <_malloc_r+0x8c>
    27da:	3b08      	subs	r3, #8
    27dc:	449b      	add	fp, r3
    27de:	ebab 0b02 	sub.w	fp, fp, r2
    27e2:	f04f 0a00 	mov.w	sl, #0
    27e6:	e6b0      	b.n	254a <_malloc_r+0x276>
    27e8:	f105 0108 	add.w	r1, r5, #8
    27ec:	4620      	mov	r0, r4
    27ee:	f000 f963 	bl	2ab8 <_free_r>
    27f2:	68bd      	ldr	r5, [r7, #8]
    27f4:	f8d9 1004 	ldr.w	r1, [r9, #4]
    27f8:	686b      	ldr	r3, [r5, #4]
    27fa:	e6ca      	b.n	2592 <_malloc_r+0x2be>
    27fc:	f240 5154 	movw	r1, #1364	; 0x554
    2800:	428b      	cmp	r3, r1
    2802:	d80b      	bhi.n	281c <_malloc_r+0x548>
    2804:	0c93      	lsrs	r3, r2, #18
    2806:	f103 017d 	add.w	r1, r3, #125	; 0x7d
    280a:	00c9      	lsls	r1, r1, #3
    280c:	337c      	adds	r3, #124	; 0x7c
    280e:	e6f3      	b.n	25f8 <_malloc_r+0x324>
    2810:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    2814:	207f      	movs	r0, #127	; 0x7f
    2816:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
    281a:	e5a1      	b.n	2360 <_malloc_r+0x8c>
    281c:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
    2820:	237e      	movs	r3, #126	; 0x7e
    2822:	e6e9      	b.n	25f8 <_malloc_r+0x324>
    2824:	687b      	ldr	r3, [r7, #4]
    2826:	e770      	b.n	270a <_malloc_r+0x436>

00002828 <__malloc_lock>:
    2828:	4801      	ldr	r0, [pc, #4]	; (2830 <__malloc_lock+0x8>)
    282a:	f000 b8a7 	b.w	297c <__retarget_lock_acquire_recursive>
    282e:	bf00      	nop
    2830:	20001228 	.word	0x20001228

00002834 <__malloc_unlock>:
    2834:	4801      	ldr	r0, [pc, #4]	; (283c <__malloc_unlock+0x8>)
    2836:	f000 b8a9 	b.w	298c <__retarget_lock_release_recursive>
    283a:	bf00      	nop
    283c:	20001228 	.word	0x20001228

00002840 <__cxa_atexit>:
    2840:	4613      	mov	r3, r2
    2842:	460a      	mov	r2, r1
    2844:	4601      	mov	r1, r0
    2846:	2002      	movs	r0, #2
    2848:	f000 b8a2 	b.w	2990 <__register_exitproc>

0000284c <memset>:
    284c:	0783      	lsls	r3, r0, #30
    284e:	b530      	push	{r4, r5, lr}
    2850:	d048      	beq.n	28e4 <memset+0x98>
    2852:	1e54      	subs	r4, r2, #1
    2854:	2a00      	cmp	r2, #0
    2856:	d03f      	beq.n	28d8 <memset+0x8c>
    2858:	b2ca      	uxtb	r2, r1
    285a:	4603      	mov	r3, r0
    285c:	e001      	b.n	2862 <memset+0x16>
    285e:	3c01      	subs	r4, #1
    2860:	d33a      	bcc.n	28d8 <memset+0x8c>
    2862:	f803 2b01 	strb.w	r2, [r3], #1
    2866:	079d      	lsls	r5, r3, #30
    2868:	d1f9      	bne.n	285e <memset+0x12>
    286a:	2c03      	cmp	r4, #3
    286c:	d92d      	bls.n	28ca <memset+0x7e>
    286e:	b2cd      	uxtb	r5, r1
    2870:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    2874:	2c0f      	cmp	r4, #15
    2876:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    287a:	d936      	bls.n	28ea <memset+0x9e>
    287c:	f1a4 0210 	sub.w	r2, r4, #16
    2880:	f022 0c0f 	bic.w	ip, r2, #15
    2884:	f103 0e20 	add.w	lr, r3, #32
    2888:	44e6      	add	lr, ip
    288a:	ea4f 1c12 	mov.w	ip, r2, lsr #4
    288e:	f103 0210 	add.w	r2, r3, #16
    2892:	e942 5504 	strd	r5, r5, [r2, #-16]
    2896:	e942 5502 	strd	r5, r5, [r2, #-8]
    289a:	3210      	adds	r2, #16
    289c:	4572      	cmp	r2, lr
    289e:	d1f8      	bne.n	2892 <memset+0x46>
    28a0:	f10c 0201 	add.w	r2, ip, #1
    28a4:	f014 0f0c 	tst.w	r4, #12
    28a8:	eb03 1202 	add.w	r2, r3, r2, lsl #4
    28ac:	f004 0c0f 	and.w	ip, r4, #15
    28b0:	d013      	beq.n	28da <memset+0x8e>
    28b2:	f1ac 0304 	sub.w	r3, ip, #4
    28b6:	f023 0303 	bic.w	r3, r3, #3
    28ba:	3304      	adds	r3, #4
    28bc:	4413      	add	r3, r2
    28be:	f842 5b04 	str.w	r5, [r2], #4
    28c2:	4293      	cmp	r3, r2
    28c4:	d1fb      	bne.n	28be <memset+0x72>
    28c6:	f00c 0403 	and.w	r4, ip, #3
    28ca:	b12c      	cbz	r4, 28d8 <memset+0x8c>
    28cc:	b2c9      	uxtb	r1, r1
    28ce:	441c      	add	r4, r3
    28d0:	f803 1b01 	strb.w	r1, [r3], #1
    28d4:	429c      	cmp	r4, r3
    28d6:	d1fb      	bne.n	28d0 <memset+0x84>
    28d8:	bd30      	pop	{r4, r5, pc}
    28da:	4664      	mov	r4, ip
    28dc:	4613      	mov	r3, r2
    28de:	2c00      	cmp	r4, #0
    28e0:	d1f4      	bne.n	28cc <memset+0x80>
    28e2:	e7f9      	b.n	28d8 <memset+0x8c>
    28e4:	4603      	mov	r3, r0
    28e6:	4614      	mov	r4, r2
    28e8:	e7bf      	b.n	286a <memset+0x1e>
    28ea:	461a      	mov	r2, r3
    28ec:	46a4      	mov	ip, r4
    28ee:	e7e0      	b.n	28b2 <memset+0x66>

000028f0 <_sbrk_r>:
    28f0:	b538      	push	{r3, r4, r5, lr}
    28f2:	4d07      	ldr	r5, [pc, #28]	; (2910 <_sbrk_r+0x20>)
    28f4:	2200      	movs	r2, #0
    28f6:	4604      	mov	r4, r0
    28f8:	4608      	mov	r0, r1
    28fa:	602a      	str	r2, [r5, #0]
    28fc:	f7fe fc24 	bl	1148 <_sbrk>
    2900:	1c43      	adds	r3, r0, #1
    2902:	d000      	beq.n	2906 <_sbrk_r+0x16>
    2904:	bd38      	pop	{r3, r4, r5, pc}
    2906:	682b      	ldr	r3, [r5, #0]
    2908:	2b00      	cmp	r3, #0
    290a:	d0fb      	beq.n	2904 <_sbrk_r+0x14>
    290c:	6023      	str	r3, [r4, #0]
    290e:	bd38      	pop	{r3, r4, r5, pc}
    2910:	20001214 	.word	0x20001214

00002914 <__errno>:
    2914:	4b01      	ldr	r3, [pc, #4]	; (291c <__errno+0x8>)
    2916:	6818      	ldr	r0, [r3, #0]
    2918:	4770      	bx	lr
    291a:	bf00      	nop
    291c:	200005c8 	.word	0x200005c8

00002920 <__libc_init_array>:
    2920:	b570      	push	{r4, r5, r6, lr}
    2922:	4e0d      	ldr	r6, [pc, #52]	; (2958 <__libc_init_array+0x38>)
    2924:	4d0d      	ldr	r5, [pc, #52]	; (295c <__libc_init_array+0x3c>)
    2926:	1b76      	subs	r6, r6, r5
    2928:	10b6      	asrs	r6, r6, #2
    292a:	d006      	beq.n	293a <__libc_init_array+0x1a>
    292c:	2400      	movs	r4, #0
    292e:	f855 3b04 	ldr.w	r3, [r5], #4
    2932:	3401      	adds	r4, #1
    2934:	4798      	blx	r3
    2936:	42a6      	cmp	r6, r4
    2938:	d1f9      	bne.n	292e <__libc_init_array+0xe>
    293a:	4e09      	ldr	r6, [pc, #36]	; (2960 <__libc_init_array+0x40>)
    293c:	4d09      	ldr	r5, [pc, #36]	; (2964 <__libc_init_array+0x44>)
    293e:	1b76      	subs	r6, r6, r5
    2940:	f000 f9c6 	bl	2cd0 <___init_veneer>
    2944:	10b6      	asrs	r6, r6, #2
    2946:	d006      	beq.n	2956 <__libc_init_array+0x36>
    2948:	2400      	movs	r4, #0
    294a:	f855 3b04 	ldr.w	r3, [r5], #4
    294e:	3401      	adds	r4, #1
    2950:	4798      	blx	r3
    2952:	42a6      	cmp	r6, r4
    2954:	d1f9      	bne.n	294a <__libc_init_array+0x2a>
    2956:	bd70      	pop	{r4, r5, r6, pc}
    2958:	60001af0 	.word	0x60001af0
    295c:	60001af0 	.word	0x60001af0
    2960:	60001af8 	.word	0x60001af8
    2964:	60001af0 	.word	0x60001af0

00002968 <__retarget_lock_init>:
    2968:	4770      	bx	lr
    296a:	bf00      	nop

0000296c <__retarget_lock_init_recursive>:
    296c:	4770      	bx	lr
    296e:	bf00      	nop

00002970 <__retarget_lock_close>:
    2970:	4770      	bx	lr
    2972:	bf00      	nop

00002974 <__retarget_lock_close_recursive>:
    2974:	4770      	bx	lr
    2976:	bf00      	nop

00002978 <__retarget_lock_acquire>:
    2978:	4770      	bx	lr
    297a:	bf00      	nop

0000297c <__retarget_lock_acquire_recursive>:
    297c:	4770      	bx	lr
    297e:	bf00      	nop

00002980 <__retarget_lock_try_acquire>:
    2980:	2001      	movs	r0, #1
    2982:	4770      	bx	lr

00002984 <__retarget_lock_try_acquire_recursive>:
    2984:	2001      	movs	r0, #1
    2986:	4770      	bx	lr

00002988 <__retarget_lock_release>:
    2988:	4770      	bx	lr
    298a:	bf00      	nop

0000298c <__retarget_lock_release_recursive>:
    298c:	4770      	bx	lr
    298e:	bf00      	nop

00002990 <__register_exitproc>:
    2990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2994:	f8df a07c 	ldr.w	sl, [pc, #124]	; 2a14 <__register_exitproc+0x84>
    2998:	4606      	mov	r6, r0
    299a:	f8da 0000 	ldr.w	r0, [sl]
    299e:	4698      	mov	r8, r3
    29a0:	460f      	mov	r7, r1
    29a2:	4691      	mov	r9, r2
    29a4:	f7ff ffea 	bl	297c <__retarget_lock_acquire_recursive>
    29a8:	4b18      	ldr	r3, [pc, #96]	; (2a0c <__register_exitproc+0x7c>)
    29aa:	681c      	ldr	r4, [r3, #0]
    29ac:	b324      	cbz	r4, 29f8 <__register_exitproc+0x68>
    29ae:	6865      	ldr	r5, [r4, #4]
    29b0:	2d1f      	cmp	r5, #31
    29b2:	dc24      	bgt.n	29fe <__register_exitproc+0x6e>
    29b4:	b95e      	cbnz	r6, 29ce <__register_exitproc+0x3e>
    29b6:	1c6b      	adds	r3, r5, #1
    29b8:	3502      	adds	r5, #2
    29ba:	f8da 0000 	ldr.w	r0, [sl]
    29be:	6063      	str	r3, [r4, #4]
    29c0:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
    29c4:	f7ff ffe2 	bl	298c <__retarget_lock_release_recursive>
    29c8:	2000      	movs	r0, #0
    29ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    29ce:	eb04 0185 	add.w	r1, r4, r5, lsl #2
    29d2:	2301      	movs	r3, #1
    29d4:	f8c1 9088 	str.w	r9, [r1, #136]	; 0x88
    29d8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
    29dc:	40ab      	lsls	r3, r5
    29de:	431a      	orrs	r2, r3
    29e0:	2e02      	cmp	r6, #2
    29e2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
    29e6:	f8c1 8108 	str.w	r8, [r1, #264]	; 0x108
    29ea:	d1e4      	bne.n	29b6 <__register_exitproc+0x26>
    29ec:	f8d4 218c 	ldr.w	r2, [r4, #396]	; 0x18c
    29f0:	431a      	orrs	r2, r3
    29f2:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    29f6:	e7de      	b.n	29b6 <__register_exitproc+0x26>
    29f8:	4c05      	ldr	r4, [pc, #20]	; (2a10 <__register_exitproc+0x80>)
    29fa:	601c      	str	r4, [r3, #0]
    29fc:	e7d7      	b.n	29ae <__register_exitproc+0x1e>
    29fe:	f8da 0000 	ldr.w	r0, [sl]
    2a02:	f7ff ffc3 	bl	298c <__retarget_lock_release_recursive>
    2a06:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2a0a:	e7de      	b.n	29ca <__register_exitproc+0x3a>
    2a0c:	200013c8 	.word	0x200013c8
    2a10:	20001238 	.word	0x20001238
    2a14:	20000b04 	.word	0x20000b04

00002a18 <_malloc_trim_r>:
    2a18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2a1a:	4f24      	ldr	r7, [pc, #144]	; (2aac <_malloc_trim_r+0x94>)
    2a1c:	460c      	mov	r4, r1
    2a1e:	4606      	mov	r6, r0
    2a20:	f7ff ff02 	bl	2828 <__malloc_lock>
    2a24:	68bb      	ldr	r3, [r7, #8]
    2a26:	685d      	ldr	r5, [r3, #4]
    2a28:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
    2a2c:	310f      	adds	r1, #15
    2a2e:	f025 0503 	bic.w	r5, r5, #3
    2a32:	194b      	adds	r3, r1, r5
    2a34:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
    2a38:	f023 030f 	bic.w	r3, r3, #15
    2a3c:	f5a3 5480 	sub.w	r4, r3, #4096	; 0x1000
    2a40:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    2a44:	db07      	blt.n	2a56 <_malloc_trim_r+0x3e>
    2a46:	2100      	movs	r1, #0
    2a48:	4630      	mov	r0, r6
    2a4a:	f7ff ff51 	bl	28f0 <_sbrk_r>
    2a4e:	68bb      	ldr	r3, [r7, #8]
    2a50:	442b      	add	r3, r5
    2a52:	4298      	cmp	r0, r3
    2a54:	d004      	beq.n	2a60 <_malloc_trim_r+0x48>
    2a56:	4630      	mov	r0, r6
    2a58:	f7ff feec 	bl	2834 <__malloc_unlock>
    2a5c:	2000      	movs	r0, #0
    2a5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a60:	4261      	negs	r1, r4
    2a62:	4630      	mov	r0, r6
    2a64:	f7ff ff44 	bl	28f0 <_sbrk_r>
    2a68:	3001      	adds	r0, #1
    2a6a:	d00d      	beq.n	2a88 <_malloc_trim_r+0x70>
    2a6c:	4a10      	ldr	r2, [pc, #64]	; (2ab0 <_malloc_trim_r+0x98>)
    2a6e:	68bb      	ldr	r3, [r7, #8]
    2a70:	1b2d      	subs	r5, r5, r4
    2a72:	f045 0501 	orr.w	r5, r5, #1
    2a76:	605d      	str	r5, [r3, #4]
    2a78:	6813      	ldr	r3, [r2, #0]
    2a7a:	4630      	mov	r0, r6
    2a7c:	1b1b      	subs	r3, r3, r4
    2a7e:	6013      	str	r3, [r2, #0]
    2a80:	f7ff fed8 	bl	2834 <__malloc_unlock>
    2a84:	2001      	movs	r0, #1
    2a86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2a88:	2100      	movs	r1, #0
    2a8a:	4630      	mov	r0, r6
    2a8c:	f7ff ff30 	bl	28f0 <_sbrk_r>
    2a90:	68ba      	ldr	r2, [r7, #8]
    2a92:	1a83      	subs	r3, r0, r2
    2a94:	2b0f      	cmp	r3, #15
    2a96:	ddde      	ble.n	2a56 <_malloc_trim_r+0x3e>
    2a98:	f043 0301 	orr.w	r3, r3, #1
    2a9c:	6053      	str	r3, [r2, #4]
    2a9e:	4b05      	ldr	r3, [pc, #20]	; (2ab4 <_malloc_trim_r+0x9c>)
    2aa0:	4903      	ldr	r1, [pc, #12]	; (2ab0 <_malloc_trim_r+0x98>)
    2aa2:	681b      	ldr	r3, [r3, #0]
    2aa4:	1ac0      	subs	r0, r0, r3
    2aa6:	6008      	str	r0, [r1, #0]
    2aa8:	e7d5      	b.n	2a56 <_malloc_trim_r+0x3e>
    2aaa:	bf00      	nop
    2aac:	200006f4 	.word	0x200006f4
    2ab0:	200010a8 	.word	0x200010a8
    2ab4:	20000afc 	.word	0x20000afc

00002ab8 <_free_r>:
    2ab8:	2900      	cmp	r1, #0
    2aba:	d061      	beq.n	2b80 <_free_r+0xc8>
    2abc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2abe:	460c      	mov	r4, r1
    2ac0:	4606      	mov	r6, r0
    2ac2:	f7ff feb1 	bl	2828 <__malloc_lock>
    2ac6:	f854 2c04 	ldr.w	r2, [r4, #-4]
    2aca:	4f7b      	ldr	r7, [pc, #492]	; (2cb8 <_free_r+0x200>)
    2acc:	f1a4 0508 	sub.w	r5, r4, #8
    2ad0:	f022 0101 	bic.w	r1, r2, #1
    2ad4:	eb05 0c01 	add.w	ip, r5, r1
    2ad8:	68b8      	ldr	r0, [r7, #8]
    2ada:	f8dc 3004 	ldr.w	r3, [ip, #4]
    2ade:	4560      	cmp	r0, ip
    2ae0:	f023 0303 	bic.w	r3, r3, #3
    2ae4:	f000 808b 	beq.w	2bfe <_free_r+0x146>
    2ae8:	07d2      	lsls	r2, r2, #31
    2aea:	f8cc 3004 	str.w	r3, [ip, #4]
    2aee:	d432      	bmi.n	2b56 <_free_r+0x9e>
    2af0:	f854 2c08 	ldr.w	r2, [r4, #-8]
    2af4:	1aad      	subs	r5, r5, r2
    2af6:	4411      	add	r1, r2
    2af8:	68aa      	ldr	r2, [r5, #8]
    2afa:	f107 0008 	add.w	r0, r7, #8
    2afe:	4282      	cmp	r2, r0
    2b00:	d06a      	beq.n	2bd8 <_free_r+0x120>
    2b02:	eb0c 0403 	add.w	r4, ip, r3
    2b06:	f8d4 e004 	ldr.w	lr, [r4, #4]
    2b0a:	68ec      	ldr	r4, [r5, #12]
    2b0c:	60d4      	str	r4, [r2, #12]
    2b0e:	f01e 0f01 	tst.w	lr, #1
    2b12:	60a2      	str	r2, [r4, #8]
    2b14:	f000 8097 	beq.w	2c46 <_free_r+0x18e>
    2b18:	f041 0301 	orr.w	r3, r1, #1
    2b1c:	606b      	str	r3, [r5, #4]
    2b1e:	f8cc 1000 	str.w	r1, [ip]
    2b22:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2b26:	d235      	bcs.n	2b94 <_free_r+0xdc>
    2b28:	6878      	ldr	r0, [r7, #4]
    2b2a:	08cb      	lsrs	r3, r1, #3
    2b2c:	2201      	movs	r2, #1
    2b2e:	0949      	lsrs	r1, r1, #5
    2b30:	3301      	adds	r3, #1
    2b32:	408a      	lsls	r2, r1
    2b34:	4302      	orrs	r2, r0
    2b36:	f857 1033 	ldr.w	r1, [r7, r3, lsl #3]
    2b3a:	607a      	str	r2, [r7, #4]
    2b3c:	eb07 02c3 	add.w	r2, r7, r3, lsl #3
    2b40:	3a08      	subs	r2, #8
    2b42:	e9c5 1202 	strd	r1, r2, [r5, #8]
    2b46:	f847 5033 	str.w	r5, [r7, r3, lsl #3]
    2b4a:	60cd      	str	r5, [r1, #12]
    2b4c:	4630      	mov	r0, r6
    2b4e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2b52:	f7ff be6f 	b.w	2834 <__malloc_unlock>
    2b56:	eb0c 0203 	add.w	r2, ip, r3
    2b5a:	6852      	ldr	r2, [r2, #4]
    2b5c:	07d0      	lsls	r0, r2, #31
    2b5e:	d410      	bmi.n	2b82 <_free_r+0xca>
    2b60:	4419      	add	r1, r3
    2b62:	f107 0008 	add.w	r0, r7, #8
    2b66:	f8dc 3008 	ldr.w	r3, [ip, #8]
    2b6a:	4283      	cmp	r3, r0
    2b6c:	d073      	beq.n	2c56 <_free_r+0x19e>
    2b6e:	f8dc 200c 	ldr.w	r2, [ip, #12]
    2b72:	60da      	str	r2, [r3, #12]
    2b74:	6093      	str	r3, [r2, #8]
    2b76:	f041 0301 	orr.w	r3, r1, #1
    2b7a:	606b      	str	r3, [r5, #4]
    2b7c:	5069      	str	r1, [r5, r1]
    2b7e:	e7d0      	b.n	2b22 <_free_r+0x6a>
    2b80:	4770      	bx	lr
    2b82:	f041 0301 	orr.w	r3, r1, #1
    2b86:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
    2b8a:	f844 3c04 	str.w	r3, [r4, #-4]
    2b8e:	f8cc 1000 	str.w	r1, [ip]
    2b92:	d3c9      	bcc.n	2b28 <_free_r+0x70>
    2b94:	f5b1 6f20 	cmp.w	r1, #2560	; 0xa00
    2b98:	ea4f 2351 	mov.w	r3, r1, lsr #9
    2b9c:	d248      	bcs.n	2c30 <_free_r+0x178>
    2b9e:	098b      	lsrs	r3, r1, #6
    2ba0:	f103 0039 	add.w	r0, r3, #57	; 0x39
    2ba4:	f103 0238 	add.w	r2, r3, #56	; 0x38
    2ba8:	00c3      	lsls	r3, r0, #3
    2baa:	18f8      	adds	r0, r7, r3
    2bac:	58fb      	ldr	r3, [r7, r3]
    2bae:	3808      	subs	r0, #8
    2bb0:	4298      	cmp	r0, r3
    2bb2:	d059      	beq.n	2c68 <_free_r+0x1b0>
    2bb4:	685a      	ldr	r2, [r3, #4]
    2bb6:	f022 0203 	bic.w	r2, r2, #3
    2bba:	428a      	cmp	r2, r1
    2bbc:	d902      	bls.n	2bc4 <_free_r+0x10c>
    2bbe:	689b      	ldr	r3, [r3, #8]
    2bc0:	4298      	cmp	r0, r3
    2bc2:	d1f7      	bne.n	2bb4 <_free_r+0xfc>
    2bc4:	68d8      	ldr	r0, [r3, #12]
    2bc6:	e9c5 3002 	strd	r3, r0, [r5, #8]
    2bca:	6085      	str	r5, [r0, #8]
    2bcc:	60dd      	str	r5, [r3, #12]
    2bce:	4630      	mov	r0, r6
    2bd0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2bd4:	f7ff be2e 	b.w	2834 <__malloc_unlock>
    2bd8:	eb0c 0203 	add.w	r2, ip, r3
    2bdc:	6852      	ldr	r2, [r2, #4]
    2bde:	07d2      	lsls	r2, r2, #31
    2be0:	d463      	bmi.n	2caa <_free_r+0x1f2>
    2be2:	440b      	add	r3, r1
    2be4:	e9dc 1202 	ldrd	r1, r2, [ip, #8]
    2be8:	60ca      	str	r2, [r1, #12]
    2bea:	6091      	str	r1, [r2, #8]
    2bec:	f043 0201 	orr.w	r2, r3, #1
    2bf0:	606a      	str	r2, [r5, #4]
    2bf2:	4630      	mov	r0, r6
    2bf4:	50eb      	str	r3, [r5, r3]
    2bf6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    2bfa:	f7ff be1b 	b.w	2834 <__malloc_unlock>
    2bfe:	440b      	add	r3, r1
    2c00:	07d1      	lsls	r1, r2, #31
    2c02:	d407      	bmi.n	2c14 <_free_r+0x15c>
    2c04:	f854 2c08 	ldr.w	r2, [r4, #-8]
    2c08:	1aad      	subs	r5, r5, r2
    2c0a:	4413      	add	r3, r2
    2c0c:	e9d5 1202 	ldrd	r1, r2, [r5, #8]
    2c10:	60ca      	str	r2, [r1, #12]
    2c12:	6091      	str	r1, [r2, #8]
    2c14:	f043 0201 	orr.w	r2, r3, #1
    2c18:	606a      	str	r2, [r5, #4]
    2c1a:	4a28      	ldr	r2, [pc, #160]	; (2cbc <_free_r+0x204>)
    2c1c:	60bd      	str	r5, [r7, #8]
    2c1e:	6812      	ldr	r2, [r2, #0]
    2c20:	429a      	cmp	r2, r3
    2c22:	d893      	bhi.n	2b4c <_free_r+0x94>
    2c24:	4b26      	ldr	r3, [pc, #152]	; (2cc0 <_free_r+0x208>)
    2c26:	4630      	mov	r0, r6
    2c28:	6819      	ldr	r1, [r3, #0]
    2c2a:	f7ff fef5 	bl	2a18 <_malloc_trim_r>
    2c2e:	e78d      	b.n	2b4c <_free_r+0x94>
    2c30:	2b14      	cmp	r3, #20
    2c32:	d90a      	bls.n	2c4a <_free_r+0x192>
    2c34:	2b54      	cmp	r3, #84	; 0x54
    2c36:	d81f      	bhi.n	2c78 <_free_r+0x1c0>
    2c38:	0b0b      	lsrs	r3, r1, #12
    2c3a:	f103 006f 	add.w	r0, r3, #111	; 0x6f
    2c3e:	f103 026e 	add.w	r2, r3, #110	; 0x6e
    2c42:	00c3      	lsls	r3, r0, #3
    2c44:	e7b1      	b.n	2baa <_free_r+0xf2>
    2c46:	4419      	add	r1, r3
    2c48:	e78d      	b.n	2b66 <_free_r+0xae>
    2c4a:	f103 005c 	add.w	r0, r3, #92	; 0x5c
    2c4e:	f103 025b 	add.w	r2, r3, #91	; 0x5b
    2c52:	00c3      	lsls	r3, r0, #3
    2c54:	e7a9      	b.n	2baa <_free_r+0xf2>
    2c56:	f041 0301 	orr.w	r3, r1, #1
    2c5a:	e9c7 5504 	strd	r5, r5, [r7, #16]
    2c5e:	e9c5 0002 	strd	r0, r0, [r5, #8]
    2c62:	606b      	str	r3, [r5, #4]
    2c64:	5069      	str	r1, [r5, r1]
    2c66:	e771      	b.n	2b4c <_free_r+0x94>
    2c68:	6879      	ldr	r1, [r7, #4]
    2c6a:	1092      	asrs	r2, r2, #2
    2c6c:	2401      	movs	r4, #1
    2c6e:	fa04 f202 	lsl.w	r2, r4, r2
    2c72:	430a      	orrs	r2, r1
    2c74:	607a      	str	r2, [r7, #4]
    2c76:	e7a6      	b.n	2bc6 <_free_r+0x10e>
    2c78:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    2c7c:	d806      	bhi.n	2c8c <_free_r+0x1d4>
    2c7e:	0bcb      	lsrs	r3, r1, #15
    2c80:	f103 0078 	add.w	r0, r3, #120	; 0x78
    2c84:	f103 0277 	add.w	r2, r3, #119	; 0x77
    2c88:	00c3      	lsls	r3, r0, #3
    2c8a:	e78e      	b.n	2baa <_free_r+0xf2>
    2c8c:	f240 5254 	movw	r2, #1364	; 0x554
    2c90:	4293      	cmp	r3, r2
    2c92:	d806      	bhi.n	2ca2 <_free_r+0x1ea>
    2c94:	0c8b      	lsrs	r3, r1, #18
    2c96:	f103 007d 	add.w	r0, r3, #125	; 0x7d
    2c9a:	f103 027c 	add.w	r2, r3, #124	; 0x7c
    2c9e:	00c3      	lsls	r3, r0, #3
    2ca0:	e783      	b.n	2baa <_free_r+0xf2>
    2ca2:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
    2ca6:	227e      	movs	r2, #126	; 0x7e
    2ca8:	e77f      	b.n	2baa <_free_r+0xf2>
    2caa:	f041 0301 	orr.w	r3, r1, #1
    2cae:	606b      	str	r3, [r5, #4]
    2cb0:	f8cc 1000 	str.w	r1, [ip]
    2cb4:	e74a      	b.n	2b4c <_free_r+0x94>
    2cb6:	bf00      	nop
    2cb8:	200006f4 	.word	0x200006f4
    2cbc:	20000b00 	.word	0x20000b00
    2cc0:	200010a4 	.word	0x200010a4
    2cc4:	00000000 	.word	0x00000000

00002cc8 <___reboot_Teensyduino__veneer>:
    2cc8:	f85f f000 	ldr.w	pc, [pc]	; 2ccc <___reboot_Teensyduino__veneer+0x4>
    2ccc:	60001a05 	.word	0x60001a05

00002cd0 <___init_veneer>:
    2cd0:	f85f f000 	ldr.w	pc, [pc]	; 2cd4 <___init_veneer+0x4>
    2cd4:	60001aad 	.word	0x60001aad
	...

Disassembly of section .fini:

00002ce0 <_fini>:
    2ce0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ce2:	bf00      	nop
