#include <AccelStepper.h>
#include <MultiStepper.h>

#define   EN_PIN_R2 11
#define STEP_PIN_R2 3
#define  DIR_PIN_R2 2

#define   EN_PIN_P2 12
#define STEP_PIN_P2 22
#define  DIR_PIN_P2 23

// Stepper setup
AccelStepper stepper1(AccelStepper::DRIVER, STEP_PIN_R2, DIR_PIN_R2); // Roll motor (step pin 2, dir pin 5)
AccelStepper stepper2(AccelStepper::DRIVER, STEP_PIN_P2, DIR_PIN_P2); // Pitch motor (step pin 3, dir pin 6)
MultiStepper steppers;



const float STEPS_PER_DEGREE = 10.0;

// CSV Motion Data (PROGMEM to save RAM)
const int numSteps = 300;  // 15s * 20Hz
const float timeInterval = 0.05; // seconds

const float rollAngles[300] PROGMEM = {
  0.0, 3.24, 6.45, 9.58, 12.6, 15.47, 18.16, 20.63, 22.86, 24.83, 
  26.51, 27.87, 28.91, 29.6, 29.96, 29.96, 29.6, 28.91, 27.87, 26.51, 
  24.83, 22.86, 20.63, 18.16, 15.47, 12.6, 9.58, 6.45, 3.24, 0.0, 
  30.0, 20.12, 10.52, 1.44, -6.85, -14.14, -20.23, -24.95, -28.16, -29.8, 
  -29.8, -28.16, -24.95, -20.23, -14.14, -6.85, 1.44, 10.52, 20.12, 30.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  -30.0, -20.0, -10.0, 0.0, 10.0, 20.0, 30.0, 40.0, 50.0, 60.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  -30.0, -26.84, -23.68, -20.53, -17.37, -14.21, -11.05, -7.89, -4.74, -1.58, 
  1.58, 4.74, 7.89, 11.05, 14.21, 17.37, 20.53, 23.68, 26.84, 30.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  30.0, 11.0, -6.04, -19.38, -27.63, -29.95, -26.1, -16.48, -2.07, 15.64, 
  34.83, 53.52, 69.79, 81.96, 88.79, 89.56, 84.21, 73.27, 57.88, 39.62, 
  20.38, 2.12, -13.27, -24.21, -29.56, -28.79, -21.96, -9.79, 6.48, 25.17, 
  44.36, 62.07, 76.48, 86.1, 89.95, 87.63, 79.38, 66.04, 49.0, 30.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  -30.0, -25.26, -20.53, -15.79, -11.05, -6.32, -1.58, 3.16, 7.89, 12.63, 
  17.37, 22.11, 26.84, 31.58, 36.32, 41.05, 45.79, 50.53, 55.26, 60.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  60.0, 56.81, 53.62, 50.46, 47.32, 44.21, 41.16, 38.15, 35.21, 32.33, 
  29.54, 26.83, 24.22, 21.71, 19.3, 17.01, 14.85, 12.81, 10.9, 9.14, 
  7.51, 6.04, 4.72, 3.56, 2.55, 1.71, 1.04, 0.53, 0.19, 0.02, 
  0.02, 0.19, 0.53, 1.04, 1.71, 2.55, 3.56, 4.72, 6.04, 7.51, 
  9.14, 10.9, 12.81, 14.85, 17.01, 19.3, 21.71, 24.22, 26.83, 29.54, 
  32.33, 35.21, 38.15, 41.16, 44.21, 47.32, 50.46, 53.62, 56.81, 60.0, 
  };

const float pitchAngles[300] PROGMEM = {
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 2.47, 4.87, 7.14, 9.21, 11.04, 12.56, 13.74, 14.54, 14.95, 
  14.95, 14.54, 13.74, 12.56, 11.04, 9.21, 7.14, 4.87, 2.47, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  15.0, 11.22, 7.48, 3.82, 0.3, -3.04, -6.18, -9.07, -11.68, -13.97, 
  -15.92, -17.51, -18.72, -19.54, -19.95, -19.95, -19.54, -18.72, -17.51, -15.92, 
  -13.97, -11.68, -9.07, -6.18, -3.04, 0.3, 3.82, 7.48, 11.22, 15.0, 
  -20.0, -18.16, -16.32, -14.47, -12.63, -10.79, -8.95, -7.11, -5.26, -3.42, 
  -1.58, 0.26, 2.11, 3.95, 5.79, 7.63, 9.47, 11.32, 13.16, 15.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  -20.0, -13.42, -7.01, -0.96, 4.57, 9.43, 13.49, 16.63, 18.78, 19.86, 
  19.86, 18.78, 16.63, 13.49, 9.43, 4.57, -0.96, -7.01, -13.42, -20.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 
  20.0, 11.77, 3.77, -3.8, -10.71, -16.79, -21.86, -25.79, -28.47, -29.83, 
  -29.83, -28.47, -25.79, -21.86, -16.79, -10.71, -3.8, 3.77, 11.77, 20.0, 
  -30.0, -26.81, -23.62, -20.46, -17.32, -14.21, -11.16, -8.15, -5.21, -2.33, 
  0.46, 3.17, 5.78, 8.29, 10.7, 12.99, 15.15, 17.19, 19.1, 20.86, 
  22.49, 23.96, 25.28, 26.44, 27.45, 28.29, 28.96, 29.47, 29.81, 29.98, 
  29.98, 29.81, 29.47, 28.96, 28.29, 27.45, 26.44, 25.28, 23.96, 22.49, 
  20.86, 19.1, 17.19, 15.15, 12.99, 10.7, 8.29, 5.78, 3.17, 0.46, 
  -2.33, -5.21, -8.15, -11.16, -14.21, -17.32, -20.46, -23.62, -26.81, -30.0, 
  };

long positions[2];
unsigned long lastUpdate = 0;
int currentStep = 0;

void setup() {
  pinMode(EN_PIN_R2, OUTPUT);
  digitalWrite(EN_PIN_R2,LOW);

  pinMode(EN_PIN_P2, OUTPUT);
  digitalWrite(EN_PIN_P2,LOW);

  stepper1.setMaxSpeed(1000);
  stepper2.setMaxSpeed(1000);
  stepper1.setAcceleration(500);
  stepper2.setAcceleration(500);

  steppers.addStepper(stepper1);
  steppers.addStepper(stepper2);
}

void loop() {
  if (millis() - lastUpdate >= timeInterval * 1000) {
    if (currentStep >= numSteps) {
      currentStep = 0; // loop back to start
    }

    float rollDeg = pgm_read_float_near(&rollAngles[currentStep]);
    float pitchDeg = pgm_read_float_near(&pitchAngles[currentStep]);

    positions[0] = rollDeg * STEPS_PER_DEGREE;
    positions[1] = pitchDeg * STEPS_PER_DEGREE;

    steppers.moveTo(positions);
    steppers.runSpeedToPosition(); // blocking sync move

    currentStep++;
    lastUpdate = millis();
  }
}
